;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("skeleton" include nil nil [1165 1184])
            ("cl-lib" include nil nil [1145 1162])
            ("compare-w" include nil nil [1122 1142])
            ("font-lock-comment-face" variable nil nil [1187 1218])
            ("font-lock-doc-face" variable nil nil [1219 1246])
            ("shell" include nil nil [1248 1264])
            ("compile" include nil nil [1265 1283])
            ("tex-file" customgroup (:user-visible-flag t) nil [1285 1370])
            ("tex-run" customgroup (:user-visible-flag t) nil [1372 1470])
            ("tex-view" customgroup (:user-visible-flag t) nil [1472 1562])
            ("tex-flymake" customgroup (:user-visible-flag t) nil [1564 1664])
            ("tex-shell-file-name" variable nil nil [1681 1862])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1879 2207])
            ("tex-first-line-header-regexp" variable nil nil [2224 2589])
            ("tex-main-file" variable nil nil [2606 2883])
            ("tex-offer-save" variable (:default-value t) nil [2900 3042])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [3059 3257])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [3274 3480])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [3497 3707])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [3724 4075])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [4092 4564])
            ("latex-standard-block-names" variable (:default-value (quote ("abstract" "array" "center" "description" "displaymath" "document" "enumerate" "eqnarray" "eqnarray*" "equation" "figure" "figure*" "flushleft" "flushright" "itemize" "letter" "list" "minipage" "picture" "quotation" "quote" "slide" "sloppypar" "tabbing" "table" "table*" "tabular" "tabular*" "thebibliography" "theindex*" "titlepage" "trivlist" "verbatim" "verbatim*" "verse" "math"))) nil [4566 5063])
            ("latex-block-names" variable nil nil [5080 5262])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [5279 5575])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5592 5880])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5897 6601])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [6618 7186])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [7203 7417])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [7434 7767])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [7784 7968])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [7985 8171])
            ("tex-fontify-script" variable (:default-value t) nil [8173 8313])
            ("put" code nil nil [8314 8370])
            ("tex-font-script-display" variable (:default-value (quote (-0.2 0.2))) nil [8372 8827])
            ("tex-chktex-program" variable (:default-value "chktex") nil [8829 9012])
            ("tex-chktex-extra-flags" variable nil nil [9014 9172])
            ("tex-last-temp-file" variable nil nil [9174 9376])
            ("tex-command" variable (:default-value "tex") nil [9378 9736])
            ("tex-trailer" variable nil nil [9738 9839])
            ("tex-start-of-header" variable nil nil [9841 9951])
            ("tex-end-of-header" variable nil nil [9953 10059])
            ("tex-shell-cd-command" variable (:default-value "cd") nil [10061 10229])
            ("tex-zap-file" variable nil nil [10231 10397])
            ("tex-last-buffer-texed" variable nil nil [10399 10466])
            ("tex-print-file" variable nil nil [10468 10593])
            ("tex-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "<" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 12 ">" st) (modify-syntax-entry 0 "w" st) (modify-syntax-entry 39 "w" st) (modify-syntax-entry 64 "_" st) (modify-syntax-entry 42 "_" st) (modify-syntax-entry 9 " " st) (modify-syntax-entry 126 "." st) (modify-syntax-entry 36 "$$" st) (modify-syntax-entry 92 "/" st) (modify-syntax-entry 34 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 95 "." st) (modify-syntax-entry 94 "." st) st)) nil [10595 11399])
            ("latex-imenu-indent-string" variable (:default-value ". ") nil [11432 11650])
            ("latex-section-alist" variable (:default-value (quote (("part" . 0) ("chapter" . 1) ("section" . 2) ("subsection" . 3) ("subsubsection" . 4) ("paragraph" . 5) ("subparagraph" . 6)))) nil [11652 11822])
            ("latex-metasection-list" variable (:default-value (quote ("documentstyle" "documentclass" "begin{document}" "end{document}" "appendix" "frontmatter" "mainmatter" "backmatter"))) nil [11824 11985])
            ("latex-imenu-create-index" function nil nil [11987 14128])
            ("latex-outline-regexp" variable (:default-value (concat "\\\\" (regexp-opt (append latex-metasection-list (mapcar (function car) latex-section-alist)) t))) nil [14163 14326])
            ("latex-outline-level" function nil nil [14328 14478])
            ("tex-current-defun-name" function nil nil [14480 14857])
            ("tex-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (let* ((headings (regexp-opt (quote ("title" "begin" "end" "chapter" "part" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "subsubparagraph" "newcommand" "renewcommand" "providecommand" "newenvironment" "renewenvironment" "newtheorem" "renewtheorem")) t)) (variables (regexp-opt (quote ("newcounter" "newcounter*" "setcounter" "addtocounter" "setlength" "addtolength" "settowidth")) t)) (includes (regexp-opt (quote ("input" "include" "includeonly" "bibliography" "epsfig" "psfig" "epsf" "nofiles" "usepackage" "documentstyle" "documentclass" "verbatiminput" "includegraphics" "includegraphics*")) t)) (verbish (regexp-opt (quote ("url" "nolinkurl" "path")) t)) (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (inbraces-re (lambda (re) (concat "\\(?:[^{}\\]\\|\\\\.\\|" re "\\)"))) (arg (concat "{\\(" (funcall inbraces-re "{[^}]*}") "+\\)"))) (\` (((\, (concat "\\$\\$?\\(?:[^$\\{}]\\|\\\\.\\|{" (funcall inbraces-re (concat "{" (funcall inbraces-re "{[^}]*}") "*}")) "*}\\)+\\$?\\$")) (0 (quote tex-math))) ((\, (concat slash headings "\\*?" opt arg)) 3 font-lock-function-name-face keep) ((\, (concat slash "\\(?:provide\\|\\(?:re\\)?new\\)command\\** *\\(\\\\[A-Za-z@]+\\)")) 1 font-lock-function-name-face keep) ((\, (concat slash variables " *" arg)) 2 font-lock-variable-name-face) ((\, (concat slash includes opt arg)) 3 font-lock-builtin-face) ((\, (concat slash verbish opt arg)) 3 (quote tex-verbatim)) ("^[ 	]*\\\\def *\\\\\\(\\(\\w\\|@\\)+\\)" 1 font-lock-function-name-face))))))
                nil [16616 19834])
            ("tex-font-lock-append-prop" function (:arguments ("prop")) nil [19836 19984])
            ("tex-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-1 (eval-when-compile (let* ((bold (regexp-opt (quote ("textbf" "textsc" "textup" "boldsymbol" "pmb")) t)) (italic (regexp-opt (quote ("textit" "textsl" "emph")) t)) (citations (regexp-opt (quote ("label" "ref" "pageref" "vref" "eqref" "cite" "nocite" "index" "glossary" "bibitem" "citep" "citet")) t)) (specials-1 (regexp-opt (quote ("\\" "\\*")) t)) (specials-2 (regexp-opt (quote ("linebreak" "nolinebreak" "pagebreak" "nopagebreak" "newline" "newpage" "clearpage" "cleardoublepage" "displaybreak" "allowdisplaybreaks" "enlargethispage")) t)) (general "\\([a-zA-Z@]+\\**\\|[^ 	
]\\)") (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (args "\\(\\(?:[^{}&\\]+\\|\\\\.\\|{[^}]*}\\)+\\)") (arg "{\\(\\(?:[^{}\\]+\\|\\\\.\\|{[^}]*}\\)+\\)")) (list (list (concat slash citations opt arg) 3 (quote font-lock-constant-face)) (cons (concat (regexp-opt (\` ("``" "\"<" "\"`" "<<" "«")) t) "[^'\">{]+" (regexp-opt (\` ("''" "\">" "\"'" ">>" "»")) t)) (quote font-lock-string-face)) (cons (concat slash specials-1) (quote font-lock-warning-face)) (list (concat "\\(" slash specials-2 "\\)\\([^a-zA-Z@]\\|\\'\\)") 1 (quote font-lock-warning-face)) (concat slash general) (list (concat slash bold " *" arg) 2 (quote (tex-font-lock-append-prop (quote bold))) (quote append)) (list (concat slash italic " *" arg) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(em\\|it\\|sl\\)\\>" args) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(bf\\(series\\)?\\)\\>" args) 3 (quote (tex-font-lock-append-prop (quote bold))) (quote append)))))))
                nil [19986 22834])
            ("tex-font-lock-suscript" function (:arguments ("pos")) nil [22836 23359])
            ("tex-font-lock-match-suscript" function (:arguments ("limit")) nil [23361 23935])
            ("tex-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-2 (quote ((tex-font-lock-match-suscript (1 (tex-font-lock-suscript (match-beginning 0)) append))))))
                nil [23937 24163])
            ("tex-font-lock-keywords" variable
               (:constant-flag t
                :default-value tex-font-lock-keywords-1)
                nil [24165 24274])
            ("tex-verbatim-environments" variable (:default-value (quote ("verbatim" "verbatim*"))) nil [24276 24338])
            ("put" code nil nil [24339 24447])
            ("latex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules tex-syntax-propertize-rules ("\\\\\\(?:end\\|begin\\) *\\({[^
{}]*}\\)" (1 (ignore (tex-env-mark (match-beginning 0) (match-beginning 1) (match-end 1)))))))
                nil [24708 24995])
            ("tex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules ("\\\\verb\\**\\([^a-z@*]\\)" (1 (prog1 "\"" (tex-font-lock-verb (match-beginning 0) (char-after (match-beginning 1))))))))
                nil [24470 24704])
            ("tex-env-mark" function (:arguments ("cmd" "start" "end")) nil [24998 26246])
            ("define-minor-mode" code nil nil [26248 26891])
            ("latex-env-before-change" function (:arguments ("start" "end")) nil [26893 28721])
            ("tex-font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [28723 29155])
            ("tex-suscript-height-ratio" variable (:default-value 0.8) nil [29157 29445])
            ("tex-suscript-height-minimum" variable nil nil [29447 29859])
            ("tex-suscript-height" function (:arguments ("height")) nil [29861 30353])
            ("superscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [30355 30473])
            ("subscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [30474 30589])
            ("tex-math" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [30591 30712])
            ("tex-verbatim" variable
               (:default-value (quote ((t :inherit fixed-pitch-serif)))
                :type "face")
                nil [30714 30840])
            ("tex-font-lock-verb" function (:arguments ("start" "delim")) nil [30842 31891])
            ("tex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [31939 32199])
            ("tex-define-common-keys" function (:arguments ("keymap")) nil [32203 33443])
            ("tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (tex-define-common-keys map) (define-key map "\"" (quote tex-insert-quote)) (define-key map "
" (quote tex-handle-newline)) (define-key map "\215" (quote latex-insert-item)) (define-key map "}" (quote up-list)) (define-key map "{" (quote tex-insert-braces)) (define-key map "" (quote tex-region)) (define-key map "" (quote tex-buffer)) (define-key map "" (quote tex-file)) (define-key map "" (quote tex-compile)) (define-key map "	" (quote tex-bibtex-file)) (define-key map "" (quote latex-insert-block)) (define-key map "" (quote latex-insert-block)) (define-key map "]" (quote latex-close-block)) (define-key map "/" (quote latex-close-block)) (define-key map "" (quote latex-close-block)) (define-key map "" (quote tex-goto-last-unclosed-latex-block)) (define-key map "" (quote tex-feed-input)) (define-key map [(control return)] (quote tex-feed-input)) (define-key map [menu-bar tex tex-bibtex-file] (quote ("BibTeX File" . tex-bibtex-file))) (define-key map [menu-bar tex tex-validate-region] (quote (menu-item "Validate Region" tex-validate-region :enable mark-active))) (define-key map [menu-bar tex tex-validate-buffer] (quote ("Validate Buffer" . tex-validate-buffer))) (define-key map [menu-bar tex tex-region] (quote (menu-item "TeX Region" tex-region :enable mark-active))) (define-key map [menu-bar tex tex-buffer] (quote ("TeX Buffer" . tex-buffer))) (define-key map [menu-bar tex tex-file] (quote ("TeX File" . tex-file))) map)) nil [33445 35145])
            ("latex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) (define-key map "" (quote latex-split-block)) map)) nil [35147 35362])
            ("plain-tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) map)) nil [35364 35536])
            ("tex-shell-map" variable (:default-value (let ((m (make-sparse-keymap))) (set-keymap-parent m shell-mode-map) (tex-define-common-keys m) m)) nil [35538 35751])
            ("tex-face-alist" variable (:default-value (quote ((bold . "{\\bf ") (italic . "{\\it ") (bold-italic . "{\\bi ") (underline . "\\underline{") (default . "{\\rm ")))) nil [35753 35976])
            ("tex-latex-face-alist" variable (:default-value (\` ((italic . "{\\em ") (\,@ tex-face-alist)))) nil [35978 36105])
            ("tex-facemenu-add-face-function" function (:arguments ("face" "_end")) nil [36107 36629])
            ("tex-guess-mode" function nil nil [36729 37658])
            ("define-derived-mode" code nil nil [37913 37997])
            ("defalias" code nil nil [38289 38346])
            ("if" code nil nil [38551 38768])
            ("tex-mode" function (:user-visible-flag t) nil [38786 39336])
            ("defalias" code nil nil [39798 39828])
            ("defalias" code nil nil [39844 39886])
            ("defalias" code nil nil [39902 39936])
            ("define-derived-mode" code nil nil [39953 41895])
            ("define-derived-mode" code nil nil [41912 45525])
            ("define-derived-mode" code nil nil [45542 47446])
            ("tildify-space-string" variable nil nil [47448 47477])
            ("tildify-foreach-region-function" variable nil nil [47478 47518])
            ("declare-function" code nil nil [47519 47627])
            ("tex--prettify-symbols-alist" variable nil nil [47628 47664])
            ("tex-common-initialization" function nil nil [47666 50661])
            ("tex-categorize-whitespace" function (:arguments ("backward-limit")) nil [50663 51624])
            ("tex-insert-quote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51626 54124])
            ("tex-validate-buffer" function (:user-visible-flag t) nil [54126 56865])
            ("tex-validate-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [56867 58025])
            ("tex-handle-newline" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58027 58600])
            ("tex-terminate-paragraph" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [58602 59285])
            ("define-skeleton" code nil nil [59287 59403])
            ("latex-fill-nobreak-predicate" function nil nil [59556 60005])
            ("latex-block-default" variable (:default-value "enumerate") nil [60007 60047])
            ("latex-block-args-alist" variable (:default-value (quote (("array" nil 123 (skeleton-read "Format: ") 125) ("tabular" nil 123 (skeleton-read "Format: ") 125) ("minipage" nil 123 (skeleton-read "Size: ") 125) ("picture" nil 40 (skeleton-read "SizeX,SizeY: ") 41)))) nil [60049 60669])
            ("latex-block-body-alist" variable (:default-value (quote (("enumerate" nil (quote (latex-insert-item)) > _) ("itemize" nil (quote (latex-insert-item)) > _) ("table" nil "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))) n _) ("figure" nil > _ n "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))))))) nil [60671 61345])
            ("defalias" code nil nil [61389 61436])
            ("define-skeleton" code nil nil [61437 62205])
            ("define-skeleton" code nil nil [62207 62293])
            ("latex-complete-bibtex-cache" variable nil nil [62321 62361])
            ("define-obsolete-function-alias" code nil nil [62363 62444])
            ("bibtex-reference-key" variable nil nil [62446 62475])
            ("declare-function" code nil nil [62476 62538])
            ("latex-complete-bibtex-keys" function nil nil [62540 63794])
            ("latex-complete-envnames" function nil nil [63796 64589])
            ("latex-complete-refkeys" function nil nil [64591 64710])
            ("latex-complete-alist" variable (:default-value (\` (("\\`\\\\\\(short\\)?cite\\'" \, (function latex-complete-bibtex-keys)) ("\\`\\\\\\(begin\\|end\\)\\'" \, (function latex-complete-envnames)) ("\\`\\\\[vf]?ref\\'" \, (function latex-complete-refkeys))))) nil [64712 64929])
            ("latex-complete-data" function nil nil [64931 66431])
            ("tex-search-noncomment" function (:arguments ("body")) nil [66473 66868])
            ("tex-last-unended-begin" function nil nil [66870 67216])
            ("tex-next-unmatched-end" function nil nil [67218 67540])
            ("tex-next-unmatched-eparen" function (:arguments ("otype")) nil [67542 68249])
            ("tex-last-unended-eparen" function (:arguments ("ctype")) nil [68251 68898])
            ("tex-goto-last-unclosed-latex-block" function (:user-visible-flag t) nil [68900 69178])
            ("latex-handle-escaped-parens" variable (:default-value t) nil [69180 69218])
            ("latex-backward-sexp-1" function nil nil [69396 70249])
            ("latex-forward-sexp-1" function nil nil [70532 71627])
            ("latex-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71629 72134])
            ("latex-syntax-after" function nil nil [72136 72303])
            ("latex-skip-close-parens" function nil nil [72305 72549])
            ("latex-down-list" function nil nil [72551 72912])
            ("defalias" code nil nil [72914 72966])
            ("define-skeleton" code nil nil [72967 73234])
            ("define-skeleton" code nil nil [73236 73720])
            ("tex-discount-args-cmds" variable
               (:constant-flag t
                :default-value (quote ("begin" "end" "input" "special" "cite" "ref" "include" "includeonly" "documentclass" "usepackage" "label")))
                nil [73722 73934])
            ("tex-count-words" function
               (:user-visible-flag t
                :arguments ("begin" "end"))
                nil [73936 75000])
            ("tex-error-parse-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 123 "_" st) (modify-syntax-entry 125 "_" st) (modify-syntax-entry 91 "_" st) (modify-syntax-entry 93 "_" st) (modify-syntax-entry 34 "_" st) st)) nil [75185 75665])
            ("tex-old-error-file-name" function nil nil [75667 76426])
            ("tex-error-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (gnu ("^l\\.\\([1-9][0-9]*\\) \\(?:\\.\\.\\.\\)?\\(.*\\)$" tex-old-error-file-name 1 nil nil nil (2 compilation-error-face)) ("^\\(?:Und\\|Ov\\)erfull \\\\[hv]box .* at lines? \\(\\([1-9][0-9]*\\)\\(?:--\\([1-9][0-9]*\\)\\)?\\)$" tex-old-error-file-name (2 . 3) nil 1 nil (1 compilation-warning-face)) ("^(Font) *\\([^ 
].* on input line \\([1-9][0-9]*\\)\\)\\.$" tex-old-error-file-name 2 nil 1 1 (2 compilation-warning-face)))))
                nil [76428 77595])
            ("define-derived-mode" code nil nil [77624 77782])
            ("tex-start-shell" function nil nil [77799 78258])
            ("tex-feed-input" function (:user-visible-flag t) nil [78260 78572])
            ("tex-display-shell" function nil nil [78574 78723])
            ("tex-shell-sentinel" function (:arguments ("proc" "_msg")) nil [78725 78991])
            ("tex-set-buffer-directory" function (:arguments ("buffer" "directory")) nil [78993 79333])
            ("tex-send-command-modified-tick" variable nil nil [79335 79376])
            ("make-variable-buffer-local" code nil nil [79377 79437])
            ("tex-shell-proc" function nil nil [79439 79519])
            ("tex-shell-buf" function nil nil [79520 79580])
            ("tex-shell-buf-no-error" function nil nil [79581 79688])
            ("tex-send-command" function (:arguments ("command" "file" "background")) nil [79690 81194])
            ("tex-delete-last-temp-files" function (:arguments ("not-all")) nil [81196 81824])
            ("add-hook" code nil nil [81826 81881])
            ("tex-compile-history" variable nil nil [81956 81988])
            ("tex-input-files-re" variable (:default-value (eval-when-compile (concat "\\." (regexp-opt (quote ("tex" "texi" "texinfo" "bbl" "ind" "sty" "cls")) t) "\\'\\|\\`[^.]+\\'"))) nil [81990 82206])
            ("tex-use-reftex" variable (:default-value t) nil [82208 82344])
            ("tex-compile-commands" variable (:default-value (\` ((\,@ (mapcar (lambda (prefix) (\` ((concat (\, prefix) tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.pdf"))) (quote ("pdf" "xe" "lua")))) ((concat tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.dvi") ("xdvi %r &" "%r.dvi") ("\\doc-view \"%r.pdf\"" "%r.pdf") ("xpdf %r.pdf &" "%r.pdf") ("gv %r.ps &" "%r.ps") ("yap %r &" "%r.dvi") ("advi %r &" "%r.dvi") ("gv %r.pdf &" "%r.pdf") ("bibtex %r" "%r.aux" "%r.bbl") ("makeindex %r" "%r.idx" "%r.ind") ("texindex %r.??") ("dvipdfm %r" "%r.dvi" "%r.pdf") ("dvipdf %r" "%r.dvi" "%r.pdf") ("dvips -o %r.ps %r" "%r.dvi" "%r.ps") ("ps2pdf %r.ps" "%r.ps" "%r.pdf") ("lpr %r.ps" "%r.ps")))) nil [82346 83892])
            ("define-obsolete-function-alias" code nil nil [83894 83971])
            ("tex-guess-main-file" function (:arguments ("all")) nil [83973 85316])
            ("tex-main-file" function nil nil [85318 86321])
            ("tex-summarize-command" function (:arguments ("cmd")) nil [86323 86535])
            ("tex-uptodate-p" function (:arguments ("file")) nil [86537 88841])
            ("format-spec" function (:prototype-flag t) nil [88844 88881])
            ("tex-executable-cache" variable nil nil [88883 88916])
            ("tex-executable-exists-p" function (:arguments ("name")) nil [88917 89393])
            ("tex-command-executable" function (:arguments ("cmd")) nil [89395 89536])
            ("tex-command-active-p" function (:arguments ("cmd" "fspec")) nil [89538 89943])
            ("tex-cmd-bibtex-args" variable (:default-value "--min-crossref=100") nil [89945 90096])
            ("tex-format-cmd" function (:arguments ("format" "fspec")) nil [90098 90733])
            ("tex-compile-default" function (:arguments ("fspec")) nil [90735 93696])
            ("tex-cmd-doc-view" function (:arguments ("file")) nil [93698 93773])
            ("tex-compile" function
               (:user-visible-flag t
                :arguments ("dir" "cmd"))
                nil [93775 95210])
            ("tex-start-tex" function (:arguments ("command" "file" "dir")) nil [95212 95762])
            ("tex-send-tex-command" function (:arguments ("cmd" "dir")) nil [95764 96418])
            ("tex-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [96440 99127])
            ("tex-region-header" function (:arguments ("file" "beg")) nil [99129 100801])
            ("tex-buffer" function (:user-visible-flag t) nil [100803 101064])
            ("tex-file" function (:user-visible-flag t) nil [101066 101636])
            ("tex-generate-zap-file-name" function nil nil [101638 102094])
            ("tex-expand-files" function (:arguments ("s")) nil [102216 102590])
            ("tex-shell-running" function nil nil [102592 103041])
            ("tex-kill-job" function (:user-visible-flag t) nil [103043 103474])
            ("tex-recenter-output-buffer" function
               (:user-visible-flag t
                :arguments ("linenum"))
                nil [103476 104060])
            ("tex-print-file-extension" variable (:default-value ".dvi") nil [104062 104357])
            ("tex-print" function
               (:user-visible-flag t
                :arguments ("alt"))
                nil [104359 105470])
            ("tex-alt-print" function (:user-visible-flag t) nil [105472 105671])
            ("tex-view" function (:user-visible-flag t) nil [105673 106297])
            ("tex-append" function (:arguments ("file-name" "suffix")) nil [106299 107282])
            ("tex-show-print-queue" function (:user-visible-flag t) nil [107284 107588])
            ("tex-bibtex-file" function (:user-visible-flag t) nil [107590 108110])
            ("tex-indent-allhanging" variable (:default-value t) nil [108147 108179])
            ("tex-indent-arg" variable (:default-value 4) nil [108180 108205])
            ("tex-indent-basic" variable (:default-value 2) nil [108206 108233])
            ("tex-indent-item" variable (:default-value tex-indent-basic) nil [108234 108275])
            ("tex-indent-item-re" variable (:default-value "\\\\\\(bib\\)?item\\>") nil [108276 108327])
            ("latex-noindent-environments" variable (:default-value (quote ("document"))) nil [108328 108378])
            ("put" code nil nil [108379 108489])
            ("tex-latex-indent-syntax-table" variable (:default-value (let ((st (make-syntax-table tex-mode-syntax-table))) (modify-syntax-entry 36 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) st)) nil [108491 108754])
            ("latex-indent" function (:arguments ("_arg")) nil [108756 109458])
            ("latex-indent-within-escaped-parens" variable nil nil [109460 109846])
            ("latex-find-indent" function (:arguments ("virtual")) nil [109848 113821])
            ("doctex-font-lock-^^A" function nil nil [113842 114596])
            ("doctex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [114598 114972])
            ("doctex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules latex-syntax-propertize-rules ("\\(\\^\\)\\^A" (1 (doctex-font-lock-^^A)))))
                nil [114995 115197])
            ("doctex-font-lock-keywords" variable (:default-value (append tex-font-lock-keywords (quote (("^%<[^>]*>" (0 font-lock-preprocessor-face t)))))) nil [115200 115322])
            ("define-derived-mode" code nil nil [115339 115844])
            ("tex--prettify-symbols-alist" variable (:default-value (quote (("\\alpha" . 945) ("\\beta" . 946) ("\\gamma" . 947) ("\\delta" . 948) ("\\epsilon" . 1013) ("\\zeta" . 950) ("\\eta" . 951) ("\\theta" . 952) ("\\iota" . 953) ("\\kappa" . 954) ("\\lambda" . 955) ("\\mu" . 956) ("\\nu" . 957) ("\\xi" . 958) ("\\pi" . 960) ("\\rho" . 961) ("\\sigma" . 963) ("\\tau" . 964) ("\\upsilon" . 965) ("\\phi" . 981) ("\\chi" . 967) ("\\psi" . 968) ("\\omega" . 969) ("\\Gamma" . 915) ("\\Delta" . 916) ("\\Lambda" . 923) ("\\Phi" . 934) ("\\Pi" . 928) ("\\Psi" . 936) ("\\Sigma" . 931) ("\\Theta" . 920) ("\\Upsilon" . 933) ("\\Xi" . 926) ("\\Omega" . 937) ("\\Box" . 9633) ("\\Bumpeq" . 8782) ("\\Cap" . 8914) ("\\Cup" . 8915) ("\\Diamond" . 9671) ("\\Downarrow" . 8659) ("\\H{o}" . 337) ("\\Im" . 8465) ("\\Join" . 8904) ("\\Leftarrow" . 8656) ("\\Leftrightarrow" . 8660) ("\\Ll" . 8920) ("\\Lleftarrow" . 8666) ("\\Longleftarrow" . 8656) ("\\Longleftrightarrow" . 8660) ("\\Longrightarrow" . 8658) ("\\Lsh" . 8624) ("\\Re" . 8476) ("\\Rightarrow" . 8658) ("\\Rrightarrow" . 8667) ("\\Rsh" . 8625) ("\\Subset" . 8912) ("\\Supset" . 8913) ("\\Uparrow" . 8657) ("\\Updownarrow" . 8661) ("\\Vdash" . 8873) ("\\Vert" . 8214) ("\\Vvdash" . 8874) ("\\aleph" . 8501) ("\\amalg" . 8720) ("\\angle" . 8736) ("\\approx" . 8776) ("\\approxeq" . 8778) ("\\ast" . 8727) ("\\asymp" . 8781) ("\\backcong" . 8780) ("\\backepsilon" . 8717) ("\\backprime" . 8245) ("\\backsim" . 8765) ("\\backsimeq" . 8909) ("\\backslash" . 92) ("\\barwedge" . 8892) ("\\because" . 8757) ("\\beth" . 8502) ("\\between" . 8812) ("\\bigcap" . 8898) ("\\bigcirc" . 9711) ("\\bigcup" . 8899) ("\\bigstar" . 9733) ("\\bigtriangledown" . 9661) ("\\bigtriangleup" . 9651) ("\\bigvee" . 8897) ("\\bigwedge" . 8896) ("\\blacklozenge" . 10022) ("\\blacksquare" . 9642) ("\\blacktriangle" . 9652) ("\\blacktriangledown" . 9662) ("\\blacktriangleleft" . 9666) ("\\blacktriangleright" . 9656) ("\\bot" . 8869) ("\\bowtie" . 8904) ("\\boxminus" . 8863) ("\\boxplus" . 8862) ("\\boxtimes" . 8864) ("\\bullet" . 8226) ("\\bumpeq" . 8783) ("\\cap" . 8745) ("\\cdots" . 8943) ("\\centerdot" . 183) ("\\checkmark" . 10003) ("\\chi" . 967) ("\\cdot" . 8901) ("\\cdots" . 8943) ("\\circ" . 8728) ("\\circeq" . 8791) ("\\circlearrowleft" . 8634) ("\\circlearrowright" . 8635) ("\\circledR" . 174) ("\\circledS" . 9416) ("\\circledast" . 8859) ("\\circledcirc" . 8858) ("\\circleddash" . 8861) ("\\clubsuit" . 9827) ("\\coloneq" . 8788) ("\\complement" . 8705) ("\\cong" . 8773) ("\\coprod" . 8720) ("\\cup" . 8746) ("\\curlyeqprec" . 8926) ("\\curlyeqsucc" . 8927) ("\\curlypreceq" . 8828) ("\\curlyvee" . 8910) ("\\curlywedge" . 8911) ("\\curvearrowleft" . 8630) ("\\curvearrowright" . 8631) ("\\dag" . 8224) ("\\dagger" . 8224) ("\\daleth" . 8504) ("\\dashv" . 8867) ("\\ddag" . 8225) ("\\ddagger" . 8225) ("\\ddots" . 8945) ("\\diamond" . 8900) ("\\diamondsuit" . 9826) ("\\divideontimes" . 8903) ("\\doteq" . 8784) ("\\doteqdot" . 8785) ("\\dotplus" . 8724) ("\\dotsquare" . 8865) ("\\downarrow" . 8595) ("\\downdownarrows" . 8650) ("\\downleftharpoon" . 8643) ("\\downrightharpoon" . 8642) ("\\ell" . 8467) ("\\emptyset" . 8709) ("\\eqcirc" . 8790) ("\\eqcolon" . 8789) ("\\eqslantgtr" . 8925) ("\\eqslantless" . 8924) ("\\equiv" . 8801) ("\\exists" . 8707) ("\\fallingdotseq" . 8786) ("\\flat" . 9837) ("\\forall" . 8704) ("\\frown" . 8994) ("\\ge" . 8805) ("\\geq" . 8805) ("\\geqq" . 8807) ("\\geqslant" . 8805) ("\\gets" . 8592) ("\\gg" . 8811) ("\\ggg" . 8921) ("\\gimel" . 8503) ("\\gnapprox" . 8935) ("\\gneq" . 8809) ("\\gneqq" . 8809) ("\\gnsim" . 8935) ("\\gtrapprox" . 8819) ("\\gtrdot" . 8919) ("\\gtreqless" . 8923) ("\\gtreqqless" . 8923) ("\\gtrless" . 8823) ("\\gtrsim" . 8819) ("\\gvertneqq" . 8809) ("\\hbar" . 8463) ("\\heartsuit" . 9829) ("\\hookleftarrow" . 8617) ("\\hookrightarrow" . 8618) ("\\iff" . 8660) ("\\imath" . 305) ("\\in" . 8712) ("\\infty" . 8734) ("\\int" . 8747) ("\\intercal" . 8890) ("\\langle" . 10216) ("\\lbrace" . 123) ("\\lbrack" . 91) ("\\lceil" . 8968) ("\\ldots" . 8230) ("\\le" . 8804) ("\\leadsto" . 8605) ("\\leftarrow" . 8592) ("\\leftarrowtail" . 8610) ("\\leftharpoondown" . 8637) ("\\leftharpoonup" . 8636) ("\\leftleftarrows" . 8647) ("\\leftrightarrow" . 8596) ("\\leftrightarrows" . 8646) ("\\leftrightharpoons" . 8651) ("\\leftrightsquigarrow" . 8621) ("\\leftthreetimes" . 8907) ("\\leq" . 8804) ("\\leqq" . 8806) ("\\leqslant" . 8804) ("\\lessapprox" . 8818) ("\\lessdot" . 8918) ("\\lesseqgtr" . 8922) ("\\lesseqqgtr" . 8922) ("\\lessgtr" . 8822) ("\\lesssim" . 8818) ("\\lfloor" . 8970) ("\\lhd" . 9665) ("\\rhd" . 9655) ("\\ll" . 8810) ("\\llcorner" . 8990) ("\\lnapprox" . 8934) ("\\lneq" . 8808) ("\\lneqq" . 8808) ("\\lnsim" . 8934) ("\\longleftarrow" . 8592) ("\\longleftrightarrow" . 8596) ("\\longmapsto" . 8614) ("\\longrightarrow" . 8594) ("\\looparrowleft" . 8619) ("\\looparrowright" . 8620) ("\\lozenge" . 10023) ("\\lq" . 8216) ("\\lrcorner" . 8991) ("\\ltimes" . 8905) ("\\lvertneqq" . 8808) ("\\maltese" . 10016) ("\\mapsto" . 8614) ("\\measuredangle" . 8737) ("\\mho" . 8487) ("\\mid" . 8739) ("\\models" . 8871) ("\\mp" . 8723) ("\\multimap" . 8888) ("\\nLeftarrow" . 8653) ("\\nLeftrightarrow" . 8654) ("\\nRightarrow" . 8655) ("\\nVDash" . 8879) ("\\nVdash" . 8878) ("\\nabla" . 8711) ("\\napprox" . 8777) ("\\natural" . 9838) ("\\ncong" . 8775) ("\\ne" . 8800) ("\\nearrow" . 8599) ("\\neg" . 172) ("\\neq" . 8800) ("\\nequiv" . 8802) ("\\newline" . 8232) ("\\nexists" . 8708) ("\\ngeq" . 8817) ("\\ngeqq" . 8817) ("\\ngeqslant" . 8817) ("\\ngtr" . 8815) ("\\ni" . 8715) ("\\nleftarrow" . 8602) ("\\nleftrightarrow" . 8622) ("\\nleq" . 8816) ("\\nleqq" . 8816) ("\\nleqslant" . 8816) ("\\nless" . 8814) ("\\nmid" . 8740) ("\\notin" . 8713) ("\\nparallel" . 8742) ("\\nprec" . 8832) ("\\npreceq" . 8928) ("\\nrightarrow" . 8603) ("\\nshortmid" . 8740) ("\\nshortparallel" . 8742) ("\\nsim" . 8769) ("\\nsimeq" . 8772) ("\\nsubset" . 8836) ("\\nsubseteq" . 8840) ("\\nsubseteqq" . 8840) ("\\nsucc" . 8833) ("\\nsucceq" . 8929) ("\\nsupset" . 8837) ("\\nsupseteq" . 8841) ("\\nsupseteqq" . 8841) ("\\ntriangleleft" . 8938) ("\\ntrianglelefteq" . 8940) ("\\ntriangleright" . 8939) ("\\ntrianglerighteq" . 8941) ("\\nvDash" . 8877) ("\\nvdash" . 8876) ("\\nwarrow" . 8598) ("\\odot" . 8857) ("\\oint" . 8750) ("\\ominus" . 8854) ("\\oplus" . 8853) ("\\oslash" . 8856) ("\\otimes" . 8855) ("\\par" . 8233) ("\\parallel" . 8741) ("\\partial" . 8706) ("\\perp" . 8869) ("\\pitchfork" . 8916) ("\\prec" . 8826) ("\\precapprox" . 8830) ("\\preceq" . 8828) ("\\precnapprox" . 8936) ("\\precnsim" . 8936) ("\\precsim" . 8830) ("\\prime" . 8242) ("\\prod" . 8719) ("\\propto" . 8733) ("\\qed" . 8718) ("\\qquad" . 10722) ("\\quad" . 9251) ("\\rangle" . 10217) ("\\rbrace" . 125) ("\\rbrack" . 93) ("\\rceil" . 8969) ("\\rfloor" . 8971) ("\\rightarrow" . 8594) ("\\rightarrowtail" . 8611) ("\\rightharpoondown" . 8641) ("\\rightharpoonup" . 8640) ("\\rightleftarrows" . 8644) ("\\rightleftharpoons" . 8652) ("\\rightrightarrows" . 8649) ("\\rightthreetimes" . 8908) ("\\risingdotseq" . 8787) ("\\rtimes" . 8906) ("\\times" . 215) ("\\sbs" . 65128) ("\\searrow" . 8600) ("\\setminus" . 8726) ("\\sharp" . 9839) ("\\shortmid" . 8739) ("\\shortparallel" . 8741) ("\\sim" . 8764) ("\\simeq" . 8771) ("\\smallamalg" . 8720) ("\\smallsetminus" . 8726) ("\\smallsmile" . 8995) ("\\smile" . 8995) ("\\spadesuit" . 9824) ("\\sphericalangle" . 8738) ("\\sqcap" . 8851) ("\\sqcup" . 8852) ("\\sqsubset" . 8847) ("\\sqsubseteq" . 8849) ("\\sqsupset" . 8848) ("\\sqsupseteq" . 8850) ("\\square" . 9633) ("\\squigarrowright" . 8669) ("\\star" . 8902) ("\\straightphi" . 966) ("\\subset" . 8834) ("\\subseteq" . 8838) ("\\subseteqq" . 8838) ("\\subsetneq" . 8842) ("\\subsetneqq" . 8842) ("\\succ" . 8827) ("\\succapprox" . 8831) ("\\succcurlyeq" . 8829) ("\\succeq" . 8829) ("\\succnapprox" . 8937) ("\\succnsim" . 8937) ("\\succsim" . 8831) ("\\sum" . 8721) ("\\supset" . 8835) ("\\supseteq" . 8839) ("\\supseteqq" . 8839) ("\\supsetneq" . 8843) ("\\supsetneqq" . 8843) ("\\surd" . 8730) ("\\swarrow" . 8601) ("\\therefore" . 8756) ("\\thickapprox" . 8776) ("\\thicksim" . 8764) ("\\to" . 8594) ("\\top" . 8868) ("\\triangle" . 9653) ("\\triangledown" . 9663) ("\\triangleleft" . 9667) ("\\trianglelefteq" . 8884) ("\\triangleq" . 8796) ("\\triangleright" . 9657) ("\\trianglerighteq" . 8885) ("\\twoheadleftarrow" . 8606) ("\\twoheadrightarrow" . 8608) ("\\ulcorner" . 8988) ("\\uparrow" . 8593) ("\\updownarrow" . 8597) ("\\upleftharpoon" . 8639) ("\\uplus" . 8846) ("\\uprightharpoon" . 8638) ("\\upuparrows" . 8648) ("\\urcorner" . 8989) ("\\u{i}" . 301) ("\\vDash" . 8872) ("\\varepsilon" . 949) ("\\varphi" . 966) ("\\varprime" . 8242) ("\\varpropto" . 8733) ("\\varrho" . 1009) ("\\varsigma" 962) ("\\vartriangleleft" . 8882) ("\\vartriangleright" . 8883) ("\\vdash" . 8866) ("\\vdots" . 8942) ("\\vee" . 8744) ("\\veebar" . 8891) ("\\vert" . 124) ("\\wedge" . 8743) ("\\wp" . 8472) ("\\wr" . 8768) ("\\Bbb{N}" . 8469) ("\\Bbb{P}" . 8473) ("\\Bbb{Q}" . 8474) ("\\Bbb{R}" . 8477) ("\\Bbb{Z}" . 8484) ("--" . 8211) ("---" . 8212) ("\\ordfeminine" . 170) ("\\ordmasculine" . 186) ("\\lambdabar" . 411) ("\\celsius" . 8451) ("\\textmu" . 181) ("\\textfractionsolidus" . 8260) ("\\textbigcircle" . 8413) ("\\textmusicalnote" . 9834) ("\\textdied" . 10013) ("\\textcolonmonetary" . 8353) ("\\textwon" . 8361) ("\\textnaira" . 8358) ("\\textpeso" . 8369) ("\\textlira" . 8356) ("\\textrecipe" . 8478) ("\\textinterrobang" . 8253) ("\\textpertenthousand" . 8241) ("\\textbaht" . 3647) ("\\textnumero" . 8470) ("\\textdiscount" . 8274) ("\\textestimated" . 8494) ("\\textopenbullet" . 9702) ("\\textlquill" . 8261) ("\\textrquill" . 8262) ("\\textcircledP" . 8471) ("\\textreferencemark" . 8251)))) nil [115876 127250])
            ("tex--prettify-symbols-compose-p" function (:arguments ("_start" "end" "_match")) nil [127252 128125])
            ("defvar-local" code nil nil [128150 128188])
            ("tex-chktex-command" function nil nil [128190 128394])
            ("tex-chktex" function (:arguments ("report-fn" "_args")) nil [128396 130195])
            ("run-hooks" code nil nil [130197 130228])
            ("tex-mode" package nil nil [130230 130249]))          
      :file "tex-mode.el"
      :pointmax 130277
      :fsize 131125
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax '((close-paren 115197 . 115198) (symbol 114975 . 114992) (open-paren 114974 . 114975) (close-paren 38768 . 38769) (symbol 38531 . 38548) (open-paren 38530 . 38531) (close-paren 24995 . 24996) (symbol 24450 . 24467) (open-paren 24449 . 24450) (close-paren 1184 . 1185) (symbol 1102 . 1119) (open-paren 1101 . 1102)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("texinfmt-version" variable (:default-value "2.42 of  7 Jul 2006") nil [1001 1048])
            ("texinfmt-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [1050 1485])
            ("texinfo" include nil nil [1515 1533])
            ("texnfo-upd" include nil nil [1585 1606])
            ("texinfo-vindex" variable nil nil [1662 1685])
            ("texinfo-findex" variable nil nil [1686 1709])
            ("texinfo-cindex" variable nil nil [1710 1733])
            ("texinfo-pindex" variable nil nil [1734 1757])
            ("texinfo-tindex" variable nil nil [1758 1781])
            ("texinfo-kindex" variable nil nil [1782 1805])
            ("texinfo-last-node" variable nil nil [1806 1832])
            ("texinfo-node-names" variable nil nil [1833 1860])
            ("texinfo-enclosure-list" variable nil nil [1861 1892])
            ("texinfo-alias-list" variable nil nil [1893 1920])
            ("texinfo-fold-nodename-case" variable nil nil [1921 1960])
            ("texinfo-command-start" variable nil nil [1962 1992])
            ("texinfo-command-end" variable nil nil [1993 2021])
            ("texinfo-command-name" variable nil nil [2022 2051])
            ("texinfo-defun-type" variable nil nil [2052 2079])
            ("texinfo-last-node-pos" variable nil nil [2080 2110])
            ("texinfo-stack" variable nil nil [2111 2133])
            ("texinfo-short-index-cmds-alist" variable nil nil [2134 2173])
            ("texinfo-short-index-format-cmds-alist" variable nil nil [2174 2220])
            ("texinfo-format-filename" variable nil nil [2221 2253])
            ("texinfo-footnote-number" variable nil nil [2254 2286])
            ("texinfo-raisesections-alist" variable (:default-value (quote ((@chapter . @chapter) (@unnumbered . @unnumbered) (@centerchap . @unnumbered) (@majorheading . @majorheading) (@chapheading . @chapheading) (@appendix . @appendix) (@section . @chapter) (@unnumberedsec . @unnumbered) (@heading . @chapheading) (@appendixsec . @appendix) (@subsection . @section) (@unnumberedsubsec . @unnumberedsec) (@subheading . @heading) (@appendixsubsec . @appendixsec) (@subsubsection . @subsection) (@unnumberedsubsubsec . @unnumberedsubsec) (@subsubheading . @subheading) (@appendixsubsubsec . @appendixsubsec)))) nil [2288 3211])
            ("texinfo-lowersections-alist" variable (:default-value (quote ((@chapter . @section) (@unnumbered . @unnumberedsec) (@centerchap . @unnumberedsec) (@majorheading . @heading) (@chapheading . @heading) (@appendix . @appendixsec) (@section . @subsection) (@unnumberedsec . @unnumberedsubsec) (@heading . @subheading) (@appendixsec . @appendixsubsec) (@subsection . @subsubsection) (@unnumberedsubsec . @unnumberedsubsubsec) (@subheading . @subsubheading) (@appendixsubsec . @appendixsubsubsec) (@subsubsection . @subsubsection) (@unnumberedsubsubsec . @unnumberedsubsubsec) (@subsubheading . @subsubheading) (@appendixsubsubsec . @appendixsubsubsec)))) nil [3213 4171])
            ("texinfo-format-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 " " st) (modify-syntax-entry 92 " " st) (modify-syntax-entry 64 "\\" st) (modify-syntax-entry 17 "\\" st) (modify-syntax-entry 91 "." st) (modify-syntax-entry 93 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 39 "." st) st)) nil [4192 4679])
            ("texinfo-format-buffer" function
               (:user-visible-flag t
                :arguments ("nosplit"))
                nil [4752 5692])
            ("texinfo-region-buffer-name" variable (:default-value "*Info Region*") nil [5694 5813])
            ("texinfo-pre-format-hook" variable nil nil [5815 6025])
            ("tex-start-of-header" variable nil nil [6059 6087])
            ("tex-end-of-header" variable nil nil [6088 6114])
            ("texinfo-format-region" function
               (:user-visible-flag t
                :arguments ("region-beginning" "region-end"))
                nil [6131 12591])
            ("texi2info" function
               (:user-visible-flag t
                :arguments ("nosplit"))
                nil [12608 13659])
            ("texinfo-format-buffer-1" function nil nil [13727 17941])
            ("texinfo-format-convert" function (:arguments ("min" "max")) nil [18009 18480])
            ("texinfo-no-refill-regexp" variable (:default-value (concat "^@" "\\(" "direntry\\|" "lisp\\|" "smalllisp\\|" "example\\|" "smallexample\\|" "display\\|" "smalldisplay\\|" "format\\|" "smallformat\\|" "flushleft\\|" "flushright\\|" "menu\\|" "multitable\\|" "titlepage\\|" "iftex\\|" "ifhtml\\|" "tex\\|" "html" "\\)")) nil [18569 19346])
            ("texinfo-accent-commands" variable (:default-value (concat "@^\\|" "@`\\|" "@'\\|" "@\"\\|" "@,\\|" "@=\\|" "@~\\|" "@OE{\\|" "@oe{\\|" "@AA{\\|" "@aa{\\|" "@AE{\\|" "@ae{\\|" "@ss{\\|" "@questiondown{\\|" "@exclamdown{\\|" "@L{\\|" "@l{\\|" "@O{\\|" "@o{\\|" "@dotaccent{\\|" "@ubaraccent{\\|" "@d{\\|" "@H{\\|" "@ringaccent{\\|" "@tieaccent{\\|" "@u{\\|" "@v{\\|" "@dotless{")) nil [19348 19801])
            ("texinfo-part-of-para-regexp" variable (:default-value (concat "^@" "\\(" "b{\\|" "bullet{\\|" "cite{\\|" "code{\\|" "email{\\|" "emph{\\|" "equiv{\\|" "error{\\|" "expansion{\\|" "file{\\|" "i{\\|" "inforef{\\|" "kbd{\\|" "key{\\|" "lisp{\\|" "minus{\\|" "point{\\|" "print{\\|" "pxref{\\|" "r{\\|" "ref{\\|" "result{\\|" "samp{\\|" "sc{\\|" "t{\\|" "TeX{\\|" "today{\\|" "url{\\|" "var{\\|" "w{\\|" "xref{\\|" "@-\\|" texinfo-accent-commands "\\)")) nil [19803 20467])
            ("texinfo-append-refill" function nil nil [20469 23033])
            ("texinfo-raise-lower-sections" function nil nil [24097 27129])
            ("texinfo-format-scan" function nil nil [27224 32038])
            ("texinfo-copying-text" variable nil nil [32040 32130])
            ("texinfo-copying" function nil nil [32132 32713])
            ("texinfo-insertcopying" function nil nil [32715 32934])
            ("put" code nil nil [32936 32986])
            ("texinfo-format-begin" function nil nil [32987 33063])
            ("put" code nil nil [33065 33111])
            ("texinfo-format-end" function nil nil [33112 33183])
            ("texinfo-format-begin-end" function (:arguments ("prop")) nil [33185 33391])
            ("texinfo-parse-line-arg" function nil nil [33417 34387])
            ("texinfo-parse-expanded-arg" function nil nil [34389 35213])
            ("texinfo-format-expand-region" function (:arguments ("start" "end")) nil [35215 35492])
            ("texinfo-parse-arg-discard" function nil nil [35494 35661])
            ("texinfo-discard-command" function nil nil [35663 35757])
            ("texinfo-optional-braces-discard" function nil nil [35759 36273])
            ("texinfo-format-parse-line-args" function nil nil [36275 36875])
            ("texinfo-format-parse-args" function nil nil [36877 37922])
            ("texinfo-format-parse-defun-args" function nil nil [37924 38863])
            ("texinfo-discard-line" function nil nil [38865 39198])
            ("texinfo-discard-line-with-args" function nil nil [39200 39336])
            ("put" code nil nil [39504 39566])
            ("texinfo-format-setfilename" function nil nil [39567 39634])
            ("put" code nil nil [39668 39716])
            ("put" code nil nil [39717 39767])
            ("texinfo-format-node" function nil nil [39768 40622])
            ("put" code nil nil [40624 40669])
            ("texinfo-anchor" function nil nil [40670 41256])
            ("put" code nil nil [41258 41306])
            ("texinfo-format-menu" function nil nil [41307 41387])
            ("put" code nil nil [41389 41438])
            ("put" code nil nil [41902 41957])
            ("put" code nil nil [41958 42013])
            ("put" code nil nil [42772 42819])
            ("put" code nil nil [42821 42869])
            ("texinfo-format-xref" function nil nil [42870 43282])
            ("put" code nil nil [43284 43334])
            ("texinfo-format-pxref" function nil nil [43335 43485])
            ("put" code nil nil [43616 43670])
            ("texinfo-format-inforef" function nil nil [43671 43935])
            ("put" code nil nil [44161 44209])
            ("texinfo-format-uref" function nil nil [44210 44641])
            ("put" code nil nil [44667 44726])
            ("put" code nil nil [44727 44785])
            ("put" code nil nil [44786 44841])
            ("put" code nil nil [44842 44896])
            ("put" code nil nil [44897 44953])
            ("put" code nil nil [44954 45009])
            ("put" code nil nil [45010 45068])
            ("put" code nil nil [45069 45119])
            ("put" code nil nil [45120 45177])
            ("put" code nil nil [45178 45235])
            ("texinfo-format-chapter" function nil nil [45236 45301])
            ("put" code nil nil [45303 45357])
            ("put" code nil nil [45358 45413])
            ("put" code nil nil [45414 45468])
            ("put" code nil nil [45469 45532])
            ("put" code nil nil [45533 45595])
            ("put" code nil nil [45596 45655])
            ("put" code nil nil [45656 45714])
            ("put" code nil nil [45715 45776])
            ("put" code nil nil [45777 45837])
            ("texinfo-format-section" function nil nil [45838 45903])
            ("put" code nil nil [45905 45965])
            ("put" code nil nil [45966 46027])
            ("put" code nil nil [46028 46088])
            ("put" code nil nil [46089 46154])
            ("put" code nil nil [46155 46219])
            ("put" code nil nil [46220 46287])
            ("put" code nil nil [46288 46354])
            ("texinfo-format-subsection" function nil nil [46355 46423])
            ("put" code nil nil [46425 46491])
            ("put" code nil nil [46492 46559])
            ("put" code nil nil [46560 46626])
            ("put" code nil nil [46627 46698])
            ("put" code nil nil [46699 46769])
            ("put" code nil nil [46770 46843])
            ("put" code nil nil [46844 46916])
            ("texinfo-format-subsubsection" function nil nil [46917 46988])
            ("texinfo-format-chapter-1" function (:arguments ("belowchar")) nil [46990 47226])
            ("put" code nil nil [47228 47288])
            ("texinfo-format-sectionpad" function nil nil [47289 47551])
            ("put" code nil nil [47621 47665])
            ("texinfo-format-." function nil nil [47666 47737])
            ("put" code nil nil [47739 47783])
            ("texinfo-format-:" function nil nil [47784 47840])
            ("put" code nil nil [47842 47895])
            ("texinfo-format-soft-hyphen" function nil nil [47896 47961])
            ("put" code nil nil [48174 48242])
            ("put" code nil nil [48254 48314])
            ("put" code nil nil [48339 48405])
            ("put" code nil nil [48406 48472])
            ("put" code nil nil [48473 48538])
            ("put" code nil nil [48539 48604])
            ("put" code nil nil [48605 48672])
            ("put" code nil nil [48673 48740])
            ("put" code nil nil [48940 49018])
            ("texinfo-format-documentdescription" function nil nil [49019 49182])
            ("put" code nil nil [49214 49266])
            ("texinfo-format-center" function nil nil [49267 49521])
            ("put" code nil nil [49523 49567])
            ("texinfo-format-sp" function nil nil [49568 49693])
            ("put" code nil nil [49695 49752])
            ("texinfo-format-paragraph-break" function nil nil [49753 50081])
            ("texinfo-footnote-style" variable (:default-value "separate") nil [50973 51059])
            ("put" code nil nil [51061 51120])
            ("texinfo-footnotestyle" function nil nil [51121 51320])
            ("put" code nil nil [51322 51378])
            ("texinfo-format-footnote" function nil nil [51379 51791])
            ("texinfo-format-separate-node" function nil nil [51793 53882])
            ("texinfo-format-end-node" function nil nil [53884 54968])
            ("texinfo-stack-depth" variable nil nil [55495 55655])
            ("texinfo-push-stack" function (:arguments ("check" "arg")) nil [55657 55819])
            ("texinfo-pop-stack" function (:arguments ("check")) nil [55821 56193])
            ("put" code nil nil [56195 56242])
            ("texinfo-itemize" function nil nil [56243 56499])
            ("put" code nil nil [56501 56549])
            ("texinfo-end-itemize" function nil nil [56550 56748])
            ("put" code nil nil [56750 56801])
            ("texinfo-enumerate" function nil nil [56802 57265])
            ("put" code nil nil [57267 57319])
            ("texinfo-end-enumerate" function nil nil [57320 57522])
            ("put" code nil nil [57583 57644])
            ("texinfo-alphaenumerate" function nil nil [57645 57789])
            ("put" code nil nil [57791 57853])
            ("texinfo-end-alphaenumerate" function nil nil [57854 58066])
            ("put" code nil nil [58126 58185])
            ("texinfo-capsenumerate" function nil nil [58186 58328])
            ("put" code nil nil [58330 58390])
            ("texinfo-end-capsenumerate" function nil nil [58391 58601])
            ("texinfo-do-itemize" function (:arguments ("from")) nil [58739 59089])
            ("put" code nil nil [59091 59132])
            ("put" code nil nil [59133 59175])
            ("texinfo-item" function nil nil [59176 59257])
            ("put" code nil nil [59259 59309])
            ("texinfo-itemize-item" function nil nil [59310 59717])
            ("put" code nil nil [59719 59773])
            ("texinfo-enumerate-item" function nil nil [59774 60898])
            ("put" code nil nil [60900 60964])
            ("texinfo-alphaenumerate-item" function nil nil [60965 61278])
            ("put" code nil nil [61280 61342])
            ("texinfo-capsenumerate-item" function nil nil [61343 61654])
            ("put" code nil nil [61723 61766])
            ("texinfo-table" function nil nil [61767 62017])
            ("put" code nil nil [62019 62065])
            ("texinfo-table-item" function nil nil [62066 62257])
            ("put" code nil nil [62259 62303])
            ("texinfo-end-table" function nil nil [62304 62498])
            ("put" code nil nil [62709 62759])
            ("put" code nil nil [62760 62815])
            ("texinfo-description" function nil nil [62816 62948])
            ("put" code nil nil [63198 63243])
            ("put" code nil nil [63244 63289])
            ("texinfo-ftable" function nil nil [63291 63345])
            ("texinfo-vtable" function nil nil [63346 63400])
            ("texinfo-indextable" function (:arguments ("table-type")) nil [63402 63542])
            ("put" code nil nil [63600 63648])
            ("put" code nil nil [63649 63697])
            ("texinfo-ftable-item" function nil nil [63699 63771])
            ("texinfo-vtable-item" function nil nil [63772 63844])
            ("texinfo-indextable-item" function (:arguments ("index-type")) nil [63846 64195])
            ("put" code nil nil [64233 64279])
            ("put" code nil nil [64280 64326])
            ("texinfo-end-ftable" function nil nil [64328 64390])
            ("texinfo-end-vtable" function nil nil [64391 64453])
            ("texinfo-end-indextable" function (:arguments ("table-type")) nil [64455 64668])
            ("texinfo-extra-inter-column-width" variable nil nil [67773 67885])
            ("texinfo-multitable-buffer-name" variable (:default-value "*multitable-temporary-buffer*") nil [67887 67958])
            ("texinfo-multitable-rectangle-name" variable (:default-value "texinfo-multitable-temp-") nil [67959 68028])
            ("put" code nil nil [68095 68167])
            ("put" code nil nil [68168 68242])
            ("put" code nil nil [68243 68317])
            ("put" code nil nil [68318 68392])
            ("put" code nil nil [68394 68447])
            ("texinfo-multitable" function nil nil [68449 70021])
            ("put" code nil nil [70023 70077])
            ("texinfo-end-multitable" function nil nil [70078 70243])
            ("texinfo-multitable-widths" function nil nil [70245 72786])
            ("texinfo-multitable-extract-row" function nil nil [72821 73487])
            ("put" code nil nil [73489 73545])
            ("texinfo-multitable-item" function nil nil [73546 78561])
            ("put" code nil nil [78669 78719])
            ("texinfo-format-image" function nil nil [78720 79321])
            ("put" code nil nil [79463 79514])
            ("put" code nil nil [79515 79566])
            ("put" code nil nil [79568 79618])
            ("texinfo-format-iftex" function nil nil [79619 79748])
            ("put" code nil nil [79750 79802])
            ("texinfo-format-ifhtml" function nil nil [79803 79934])
            ("put" code nil nil [79936 79998])
            ("texinfo-format-ifplaintext" function nil nil [79999 80140])
            ("put" code nil nil [80142 80192])
            ("texinfo-format-ifxml" function nil nil [80193 80363])
            ("put" code nil nil [80365 80411])
            ("texinfo-format-tex" function nil nil [80412 80537])
            ("put" code nil nil [80539 80587])
            ("texinfo-format-html" function nil nil [80588 80715])
            ("put" code nil nil [80717 80763])
            ("texinfo-format-xml" function nil nil [80764 80930])
            ("put" code nil nil [80932 80990])
            ("texinfo-format-ifnotinfo" function nil nil [80991 81128])
            ("put" code nil nil [81130 81189])
            ("put" code nil nil [81190 81249])
            ("put" code nil nil [81251 81304])
            ("put" code nil nil [81305 81358])
            ("put" code nil nil [81360 81414])
            ("put" code nil nil [81415 81469])
            ("put" code nil nil [81471 81524])
            ("put" code nil nil [81525 81578])
            ("put" code nil nil [81598 81656])
            ("texinfo-format-titlepage" function nil nil [81657 81794])
            ("put" code nil nil [81796 81853])
            ("put" code nil nil [81926 81984])
            ("texinfo-format-titlespec" function nil nil [81985 82122])
            ("put" code nil nil [82124 82181])
            ("put" code nil nil [82197 82247])
            ("texinfo-format-today" function nil nil [82379 82483])
            ("put" code nil nil [82584 82642])
            ("texinfo-format-timestamp" function nil nil [82717 82949])
            ("put" code nil nil [82966 83018])
            ("texinfo-format-ignore" function nil nil [83019 83150])
            ("put" code nil nil [83152 83206])
            ("put" code nil nil [85728 85796])
            ("texinfo-define-info-enclosure" function nil nil [85797 86208])
            ("put" code nil nil [86224 86267])
            ("texinfo-alias" function nil nil [86268 86671])
            ("put" code nil nil [86705 86751])
            ("put" code nil nil [86815 86860])
            ("put" code nil nil [86985 87035])
            ("texinfo-format-var" function nil nil [87036 87166])
            ("put" code nil nil [87168 87216])
            ("put" code nil nil [87217 87265])
            ("put" code nil nil [87298 87349])
            ("put" code nil nil [87386 87433])
            ("put" code nil nil [87434 87482])
            ("put" code nil nil [87483 87531])
            ("put" code nil nil [87532 87579])
            ("texinfo-format-code" function nil nil [87580 87693])
            ("put" code nil nil [87894 87946])
            ("texinfo-format-option" function nil nil [87947 88399])
            ("put" code nil nil [88401 88449])
            ("put" code nil nil [88450 88500])
            ("texinfo-format-emph" function nil nil [88501 88614])
            ("put" code nil nil [88616 88663])
            ("put" code nil nil [88664 88712])
            ("texinfo-format-defn" function nil nil [88713 88828])
            ("put" code nil nil [88830 88880])
            ("texinfo-format-email" function nil nil [88881 89246])
            ("put" code nil nil [89248 89294])
            ("texinfo-format-key" function nil nil [89364 89468])
            ("put" code nil nil [89527 89575])
            ("texinfo-format-verb" function nil nil [89576 90308])
            ("put" code nil nil [90481 90533])
            ("texinfo-format-bullet" function nil nil [90534 90694])
            ("texinfo-format-kbd-regexp" variable (:default-value (concat "^@" "\\(" "display\\|" "example\\|" "smallexample\\|" "lisp\\|" "smalllisp" "\\)")) nil [90887 91117])
            ("texinfo-format-kbd-end-regexp" variable (:default-value (concat "^@end " "\\(" "display\\|" "example\\|" "smallexample\\|" "lisp\\|" "smalllisp" "\\)")) nil [91119 91405])
            ("put" code nil nil [91407 91453])
            ("texinfo-format-kbd" function nil nil [91454 92690])
            ("put" code nil nil [92783 92837])
            ("put" code nil nil [92838 92897])
            ("put" code nil nil [92898 92952])
            ("put" code nil nil [92953 93004])
            ("put" code nil nil [93005 93061])
            ("put" code nil nil [93062 93121])
            ("put" code nil nil [93122 93178])
            ("texinfo-format-example" function nil nil [93179 93312])
            ("put" code nil nil [93314 93362])
            ("put" code nil nil [93363 93411])
            ("put" code nil nil [93412 93465])
            ("put" code nil nil [93466 93511])
            ("put" code nil nil [93512 93562])
            ("put" code nil nil [93563 93616])
            ("put" code nil nil [93617 93667])
            ("texinfo-end-example" function nil nil [93668 93866])
            ("put" code nil nil [93868 93920])
            ("texinfo-format-exdent" function nil nil [93921 94274])
            ("put" code nil nil [94309 94365])
            ("texinfo-format-direntry" function nil nil [94366 94498])
            ("put" code nil nil [94500 94550])
            ("texinfo-end-direntry" function nil nil [94551 94678])
            ("put" code nil nil [94680 94742])
            ("texinfo-format-dircategory" function nil nil [94743 94996])
            ("put" code nil nil [95122 95176])
            ("put" code nil nil [95177 95231])
            ("put" code nil nil [95563 95618])
            ("put" code nil nil [95619 95679])
            ("put" code nil nil [95680 95738])
            ("texinfo-format-flushleft" function nil nil [95739 95799])
            ("put" code nil nil [95801 95850])
            ("put" code nil nil [95851 95905])
            ("put" code nil nil [95906 95958])
            ("texinfo-end-flushleft" function nil nil [95959 96019])
            ("put" code nil nil [96238 96298])
            ("texinfo-format-flushright" function nil nil [96299 96399])
            ("put" code nil nil [96401 96455])
            ("texinfo-end-flushright" function nil nil [96456 96626])
            ("texinfo-do-flushright" function (:arguments ("from")) nil [96628 97036])
            ("put" code nil nil [97103 97151])
            ("texinfo-format-ctrl" function nil nil [97152 97264])
            ("put" code nil nil [97266 97312])
            ("texinfo-format-TeX" function nil nil [97313 97389])
            ("put" code nil nil [97391 97449])
            ("texinfo-format-copyright" function nil nil [97450 97532])
            ("put" code nil nil [97534 97584])
            ("texinfo-format-minus" function nil nil [97585 97744])
            ("put" code nil nil [97746 97794])
            ("texinfo-format-dots" function nil nil [97795 97872])
            ("put" code nil nil [97874 97928])
            ("texinfo-format-enddots" function nil nil [97929 98010])
            ("put" code nil nil [98012 98064])
            ("texinfo-format-pounds" function nil nil [98065 98142])
            ("texinfo-paragraph-indent" variable (:default-value "asis") nil [98704 98821])
            ("put" code nil nil [98823 98886])
            ("texinfo-paragraphindent" function nil nil [98888 99221])
            ("put" code nil nil [99223 99275])
            ("texinfo-format-refill" function nil nil [99276 101007])
            ("put" code nil nil [101009 101058])
            ("texinfo-noindent" function nil nil [101059 101317])
            ("put" code nil nil [101343 101395])
            ("texinfo-format-vindex" function nil nil [101396 101462])
            ("put" code nil nil [101464 101516])
            ("texinfo-format-cindex" function nil nil [101517 101583])
            ("put" code nil nil [101585 101637])
            ("texinfo-format-findex" function nil nil [101638 101704])
            ("put" code nil nil [101706 101758])
            ("texinfo-format-pindex" function nil nil [101759 101825])
            ("put" code nil nil [101827 101879])
            ("texinfo-format-tindex" function nil nil [101880 101946])
            ("put" code nil nil [101948 102000])
            ("texinfo-format-kindex" function nil nil [102001 102067])
            ("texinfo-index" function (:arguments ("indexvar")) nil [102069 102525])
            ("texinfo-indexvar-alist" variable (:default-value (quote (("cp" . texinfo-cindex) ("fn" . texinfo-findex) ("vr" . texinfo-vindex) ("tp" . texinfo-tindex) ("pg" . texinfo-pindex) ("ky" . texinfo-kindex)))) nil [102527 102727])
            ("put" code nil nil [102761 102817])
            ("put" code nil nil [102818 102878])
            ("texinfo-format-defindex" function nil nil [102880 103834])
            ("put" code nil nil [103869 103925])
            ("put" code nil nil [103926 103986])
            ("texinfo-format-synindex" function nil nil [103988 104748])
            ("texinfo-short-index-cmds-alist" variable
               (:constant-flag t
                :default-value (quote (("cp" . cindex) ("fn" . findex) ("vr" . vindex) ("tp" . tindex) ("pg" . pindex) ("ky" . kindex))))
                nil [104750 104912])
            ("texinfo-short-index-format-cmds-alist" variable
               (:constant-flag t
                :default-value (quote (("cp" . texinfo-format-cindex) ("fn" . texinfo-format-findex) ("vr" . texinfo-format-vindex) ("tp" . texinfo-format-tindex) ("pg" . texinfo-format-pindex) ("ky" . texinfo-format-kindex))))
                nil [104914 105173])
            ("texinfo-sort-region" function (:arguments ("start" "end")) nil [105268 105480])
            ("texinfo-sort-startkeyfun" function nil nil [105581 105972])
            ("put" code nil nil [105993 106053])
            ("texinfo-format-printindex" function nil nil [106055 106738])
            ("texinfo-print-index" function (:arguments ("file" "indexelts")) nil [106740 107410])
            ("put" code nil nil [107805 107855])
            ("texinfo-format-equiv" function nil nil [107856 107933])
            ("put" code nil nil [107935 107985])
            ("texinfo-format-error" function nil nil [107986 108069])
            ("put" code nil nil [108071 108129])
            ("texinfo-format-expansion" function nil nil [108130 108212])
            ("put" code nil nil [108214 108264])
            ("texinfo-format-point" function nil nil [108265 108343])
            ("put" code nil nil [108345 108395])
            ("texinfo-format-print" function nil nil [108396 108473])
            ("put" code nil nil [108475 108527])
            ("texinfo-format-result" function nil nil [108528 108606])
            ("put" code nil nil [112298 112358])
            ("texinfo-format-French-OE-ligature" function nil nil [112359 112485])
            ("put" code nil nil [112516 112576])
            ("texinfo-format-French-oe-ligature" function nil nil [112577 112717])
            ("put" code nil nil [112782 112850])
            ("texinfo-format-Scandinavian-A-with-circle" function nil nil [112851 112985])
            ("put" code nil nil [113016 113084])
            ("texinfo-format-Scandinavian-a-with-circle" function nil nil [113085 113233])
            ("put" code nil nil [113293 113356])
            ("texinfo-format-Latin-Scandinavian-AE" function nil nil [113357 113486])
            ("put" code nil nil [113517 113580])
            ("texinfo-format-Latin-Scandinavian-ae" function nil nil [113581 113725])
            ("put" code nil nil [113778 113834])
            ("texinfo-format-German-sharp-S" function nil nil [113835 113957])
            ("put" code nil nil [114021 114098])
            ("texinfo-format-upside-down-question-mark" function nil nil [114099 114231])
            ("put" code nil nil [114298 114376])
            ("texinfo-format-upside-down-exclamation-mark" function nil nil [114377 114512])
            ("put" code nil nil [114579 114639])
            ("texinfo-format-Polish-suppressed-L" function nil nil [114640 114767])
            ("put" code nil nil [114847 114918])
            ("texinfo-format-Polish-suppressed-l-lower-case" function nil nil [114919 115057])
            ("put" code nil nil [115122 115188])
            ("texinfo-format-Scandinavian-O-with-slash" function nil nil [115189 115322])
            ("put" code nil nil [115399 115476])
            ("texinfo-format-Scandinavian-o-with-slash-lower-case" function nil nil [115477 115621])
            ("put" code nil nil [115693 115749])
            ("texinfo-format-cedilla-accent" function nil nil [115750 115870])
            ("put" code nil nil [115924 115987])
            ("texinfo-format-overdot-accent" function nil nil [115988 116108])
            ("put" code nil nil [116162 116227])
            ("texinfo-format-underbar-accent" function nil nil [116228 116350])
            ("put" code nil nil [116404 116469])
            ("texinfo-format-underdot-accent" function nil nil [116470 116593])
            ("put" code nil nil [116653 116715])
            ("texinfo-format-long-Hungarian-umlaut" function nil nil [116716 116847])
            ("put" code nil nil [116897 116958])
            ("texinfo-format-ring-accent" function nil nil [116959 117077])
            ("put" code nil nil [117132 117197])
            ("texinfo-format-tie-after-accent" function nil nil [117198 117321])
            ("put" code nil nil [117373 117426])
            ("texinfo-format-breve-accent" function nil nil [117427 117546])
            ("put" code nil nil [117597 117650])
            ("texinfo-format-hacek-accent" function nil nil [117651 117770])
            ("put" code nil nil [117833 117887])
            ("texinfo-format-dotless" function nil nil [117888 117999])
            ("texinfo-format-defun" function nil nil [120025 120158])
            ("texinfo-end-defun" function nil nil [120160 120458])
            ("texinfo-format-defunx" function nil nil [120460 120523])
            ("texinfo-format-defun-1" function (:arguments ("first-p")) nil [120525 121189])
            ("put" code nil nil [121264 121333])
            ("put" code nil nil [121334 121404])
            ("put" code nil nil [121405 121474])
            ("put" code nil nil [121475 121545])
            ("put" code nil nil [121546 121615])
            ("put" code nil nil [121616 121686])
            ("texinfo-format-deffn" function (:arguments ("parsed-args")) nil [121687 122401])
            ("put" code nil nil [122471 122557])
            ("put" code nil nil [122558 122645])
            ("put" code nil nil [122646 122733])
            ("put" code nil nil [122734 122822])
            ("put" code nil nil [122823 122911])
            ("put" code nil nil [122912 123001])
            ("put" code nil nil [123002 123089])
            ("put" code nil nil [123090 123178])
            ("put" code nil nil [123179 123266])
            ("put" code nil nil [123267 123355])
            ("texinfo-format-specialized-defun" function (:arguments ("parsed-args")) nil [123356 124038])
            ("put" code nil nil [124085 124162])
            ("put" code nil nil [124163 124241])
            ("put" code nil nil [124242 124319])
            ("put" code nil nil [124320 124398])
            ("texinfo-format-deftypefn" function (:arguments ("parsed-args")) nil [124399 125067])
            ("put" code nil nil [125116 125195])
            ("put" code nil nil [125196 125281])
            ("put" code nil nil [125282 125361])
            ("put" code nil nil [125362 125447])
            ("texinfo-format-deftypefun" function (:arguments ("parsed-args")) nil [125448 126152])
            ("put" code nil nil [126193 126262])
            ("put" code nil nil [126263 126333])
            ("texinfo-format-defop" function (:arguments ("parsed-args")) nil [126334 126854])
            ("put" code nil nil [126895 126964])
            ("put" code nil nil [126965 127035])
            ("texinfo-format-defcv" function (:arguments ("parsed-args")) nil [127036 127544])
            ("put" code nil nil [127589 127666])
            ("put" code nil nil [127667 127745])
            ("texinfo-format-defmethod" function (:arguments ("parsed-args")) nil [127746 128319])
            ("put" code nil nil [128362 128435])
            ("put" code nil nil [128436 128510])
            ("texinfo-format-defivar" function (:arguments ("parsed-args")) nil [128511 129078])
            ("put" code nil nil [130085 130151])
            ("put" code nil nil [130152 130219])
            ("put" code nil nil [130220 130287])
            ("put" code nil nil [130288 130356])
            ("put" code nil nil [130357 130425])
            ("put" code nil nil [130426 130495])
            ("put" code nil nil [130496 130563])
            ("put" code nil nil [130564 130632])
            ("put" code nil nil [130633 130701])
            ("put" code nil nil [130702 130771])
            ("texinfo-index-defun" function (:arguments ("parsed-args")) nil [130772 131377])
            ("put" code nil nil [131379 131445])
            ("put" code nil nil [131446 131513])
            ("put" code nil nil [131514 131580])
            ("put" code nil nil [131581 131648])
            ("put" code nil nil [131649 131715])
            ("put" code nil nil [131716 131783])
            ("put" code nil nil [131784 131855])
            ("put" code nil nil [131856 131928])
            ("put" code nil nil [131929 132000])
            ("put" code nil nil [132001 132073])
            ("texinfo-index-deffn" function (:arguments ("parsed-args")) nil [132074 132684])
            ("put" code nil nil [132686 132760])
            ("put" code nil nil [132761 132836])
            ("put" code nil nil [132837 132911])
            ("put" code nil nil [132912 132987])
            ("texinfo-index-deftypefn" function (:arguments ("parsed-args")) nil [132988 133609])
            ("put" code nil nil [133611 133685])
            ("put" code nil nil [133686 133761])
            ("texinfo-index-defmethod" function (:arguments ("parsed-args")) nil [133762 134460])
            ("put" code nil nil [134462 134528])
            ("put" code nil nil [134529 134596])
            ("texinfo-index-defop" function (:arguments ("parsed-args")) nil [134597 135303])
            ("put" code nil nil [135305 135375])
            ("put" code nil nil [135376 135447])
            ("texinfo-index-defivar" function (:arguments ("parsed-args")) nil [135448 136144])
            ("put" code nil nil [136146 136212])
            ("put" code nil nil [136213 136280])
            ("texinfo-index-defcv" function (:arguments ("parsed-args")) nil [136281 136987])
            ("put" code nil nil [137736 137786])
            ("put" code nil nil [137787 137839])
            ("put" code nil nil [137840 137884])
            ("put" code nil nil [137885 137936])
            ("put" code nil nil [137937 137989])
            ("put" code nil nil [137990 138039])
            ("put" code nil nil [138040 138090])
            ("put" code nil nil [138092 138142])
            ("put" code nil nil [138143 138195])
            ("put" code nil nil [138196 138240])
            ("put" code nil nil [138241 138299])
            ("put" code nil nil [138300 138359])
            ("put" code nil nil [138360 138409])
            ("put" code nil nil [138410 138460])
            ("put" code nil nil [138462 138513])
            ("put" code nil nil [138514 138567])
            ("put" code nil nil [138568 138613])
            ("put" code nil nil [138614 138670])
            ("put" code nil nil [138671 138728])
            ("put" code nil nil [138729 138779])
            ("put" code nil nil [138780 138831])
            ("put" code nil nil [138833 138885])
            ("put" code nil nil [138886 138940])
            ("put" code nil nil [138941 138987])
            ("put" code nil nil [138988 139052])
            ("put" code nil nil [139053 139118])
            ("put" code nil nil [139119 139170])
            ("put" code nil nil [139171 139223])
            ("put" code nil nil [139225 139275])
            ("put" code nil nil [139276 139328])
            ("put" code nil nil [139329 139373])
            ("put" code nil nil [139374 139425])
            ("put" code nil nil [139426 139478])
            ("put" code nil nil [139479 139528])
            ("put" code nil nil [139529 139579])
            ("put" code nil nil [139581 139632])
            ("put" code nil nil [139633 139686])
            ("put" code nil nil [139687 139732])
            ("put" code nil nil [139733 139792])
            ("put" code nil nil [139793 139853])
            ("put" code nil nil [139854 139904])
            ("put" code nil nil [139905 139956])
            ("put" code nil nil [139958 140011])
            ("put" code nil nil [140012 140067])
            ("put" code nil nil [140068 140115])
            ("put" code nil nil [140116 140177])
            ("put" code nil nil [140178 140240])
            ("put" code nil nil [140241 140293])
            ("put" code nil nil [140294 140347])
            ("put" code nil nil [140349 140400])
            ("put" code nil nil [140401 140454])
            ("put" code nil nil [140455 140500])
            ("put" code nil nil [140501 140559])
            ("put" code nil nil [140560 140619])
            ("put" code nil nil [140620 140670])
            ("put" code nil nil [140671 140722])
            ("put" code nil nil [140724 140775])
            ("put" code nil nil [140776 140829])
            ("put" code nil nil [140830 140875])
            ("put" code nil nil [140876 140938])
            ("put" code nil nil [140939 141002])
            ("put" code nil nil [141003 141053])
            ("put" code nil nil [141054 141105])
            ("put" code nil nil [141107 141157])
            ("put" code nil nil [141158 141210])
            ("put" code nil nil [141211 141255])
            ("put" code nil nil [141256 141307])
            ("put" code nil nil [141308 141360])
            ("put" code nil nil [141361 141410])
            ("put" code nil nil [141411 141461])
            ("put" code nil nil [141511 141561])
            ("put" code nil nil [141562 141614])
            ("put" code nil nil [141615 141659])
            ("put" code nil nil [141660 141711])
            ("put" code nil nil [141712 141764])
            ("put" code nil nil [141765 141814])
            ("put" code nil nil [141815 141865])
            ("put" code nil nil [141867 141921])
            ("put" code nil nil [141922 141978])
            ("put" code nil nil [141979 142027])
            ("put" code nil nil [142028 142092])
            ("put" code nil nil [142093 142158])
            ("put" code nil nil [142159 142212])
            ("put" code nil nil [142213 142267])
            ("put" code nil nil [142269 142319])
            ("put" code nil nil [142320 142372])
            ("put" code nil nil [142373 142417])
            ("put" code nil nil [142418 142469])
            ("put" code nil nil [142470 142522])
            ("put" code nil nil [142523 142572])
            ("put" code nil nil [142573 142623])
            ("put" code nil nil [142625 142677])
            ("put" code nil nil [142678 142732])
            ("put" code nil nil [142733 142779])
            ("put" code nil nil [142780 142853])
            ("put" code nil nil [142854 142928])
            ("put" code nil nil [142929 142980])
            ("put" code nil nil [142981 143033])
            ("put" code nil nil [143070 143124])
            ("put" code nil nil [143125 143181])
            ("put" code nil nil [143182 143230])
            ("put" code nil nil [143231 143290])
            ("put" code nil nil [143291 143351])
            ("put" code nil nil [143352 143405])
            ("put" code nil nil [143406 143460])
            ("put" code nil nil [143462 143517])
            ("put" code nil nil [143518 143575])
            ("put" code nil nil [143576 143625])
            ("put" code nil nil [143626 143694])
            ("put" code nil nil [143695 143764])
            ("put" code nil nil [143765 143819])
            ("put" code nil nil [143820 143875])
            ("put" code nil nil [143877 143931])
            ("put" code nil nil [143932 143988])
            ("put" code nil nil [143989 144037])
            ("put" code nil nil [144038 144097])
            ("put" code nil nil [144098 144158])
            ("put" code nil nil [144159 144212])
            ("put" code nil nil [144213 144267])
            ("put" code nil nil [144269 144324])
            ("put" code nil nil [144325 144382])
            ("put" code nil nil [144383 144432])
            ("put" code nil nil [144433 144501])
            ("put" code nil nil [144502 144571])
            ("put" code nil nil [144572 144626])
            ("put" code nil nil [144627 144682])
            ("put" code nil nil [145375 145418])
            ("texinfo-clear" function nil nil [145419 145716])
            ("put" code nil nil [145718 145757])
            ("texinfo-set" function nil nil [145758 146300])
            ("put" code nil nil [146302 146345])
            ("texinfo-value" function nil nil [146346 147158])
            ("put" code nil nil [147160 147210])
            ("put" code nil nil [147211 147255])
            ("texinfo-if-set" function nil nil [147256 148012])
            ("put" code nil nil [148014 148066])
            ("put" code nil nil [148067 148115])
            ("texinfo-if-clear" function nil nil [148116 148876])
            ("put" code nil nil [148890 148938])
            ("texinfo-format-ifeq" function nil nil [148939 150537])
            ("put" code nil nil [151725 151777])
            ("put" code nil nil [154149 154194])
            ("put" code nil nil [154195 154240])
            ("put" code nil nil [154241 154286])
            ("put" code nil nil [154287 154332])
            ("put" code nil nil [154333 154378])
            ("put" code nil nil [154379 154427])
            ("put" code nil nil [154428 154475])
            ("put" code nil nil [154476 154524])
            ("put" code nil nil [154525 154578])
            ("texinfo-format-noop" function nil nil [154579 154684])
            ("put" code nil nil [154745 154812])
            ("texinfo-discard-command-and-arg" function nil nil [154813 155060])
            ("put" code nil nil [155187 155235])
            ("put" code nil nil [155236 155290])
            ("put" code nil nil [155291 155344])
            ("put" code nil nil [155345 155402])
            ("put" code nil nil [155403 155458])
            ("put" code nil nil [155459 155512])
            ("put" code nil nil [155513 155566])
            ("put" code nil nil [155567 155622])
            ("put" code nil nil [155623 155678])
            ("put" code nil nil [155679 155734])
            ("put" code nil nil [155735 155790])
            ("put" code nil nil [155849 155905])
            ("put" code nil nil [155906 155968])
            ("put" code nil nil [155969 156032])
            ("put" code nil nil [156033 156090])
            ("put" code nil nil [156091 156151])
            ("put" code nil nil [156152 156215])
            ("put" code nil nil [156216 156286])
            ("put" code nil nil [156287 156347])
            ("put" code nil nil [156348 156413])
            ("put" code nil nil [156414 156482])
            ("put" code nil nil [156483 156542])
            ("put" code nil nil [156543 156604])
            ("put" code nil nil [156919 156984])
            ("put" code nil nil [156986 157045])
            ("put" code nil nil [157046 157110])
            ("put" code nil nil [157111 157175])
            ("put" code nil nil [157176 157248])
            ("put" code nil nil [157249 157308])
            ("put" code nil nil [157310 157395])
            ("put" code nil nil [157396 157486])
            ("put" code nil nil [157488 157551])
            ("put" code nil nil [157552 157611])
            ("put" code nil nil [157612 157680])
            ("put" code nil nil [157681 157750])
            ("put" code nil nil [157751 157821])
            ("put" code nil nil [157822 157882])
            ("put" code nil nil [157884 157955])
            ("put" code nil nil [157956 158027])
            ("texinfo-unsupported" function nil nil [158069 158224])
            ("batch-texinfo-format" function nil nil [158249 160723])
            ("texinfmt" package nil nil [160763 160782]))          
      :file "texinfmt.el"
      :pointmax 160810
      :fsize 160809
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tex-mode" include nil nil [1070 1089])
            ("declare-function" code nil nil [1091 1134])
            ("declare-function" code nil nil [1135 1185])
            ("declare-function" code nil nil [1186 1232])
            ("declare-function" code nil nil [1233 1299])
            ("declare-function" code nil nil [1300 1355])
            ("declare-function" code nil nil [1356 1397])
            ("declare-function" code nil nil [1398 1448])
            ("declare-function" code nil nil [1449 1494])
            ("outline-heading-alist" variable nil nil [1496 1526])
            ("skeleton-end-newline" variable nil nil [1528 1557])
            ("texinfo" customgroup (:user-visible-flag t) nil [1559 1688])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1705 1861])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1878 2036])
            ("texinfo-mode-hook" variable nil nil [2038 2197])
            ("makeinfo-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2217 2516])
            ("makeinfo-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2518 2688])
            ("kill-compilation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2690 2792])
            ("makeinfo-recenter-compilation-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2794 3032])
            ("texinfo-update-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3034 3931])
            ("texinfo-every-node-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3933 4034])
            ("texinfo-sequential-node-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4036 4821])
            ("texinfo-make-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4823 5349])
            ("texinfo-all-menus-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5351 5628])
            ("texinfo-master-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5630 7137])
            ("texinfo-indent-menu-description" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7139 7445])
            ("texinfo-insert-node-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7447 7761])
            ("texinfo-start-menu-description" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7763 8166])
            ("texinfo-multiple-files-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [8168 9538])
            ("texinfo-section-list" variable (:default-value (quote (("top" 1) ("chapter" 2) ("section" 3) ("subsection" 4) ("subsubsection" 5) ("unnumbered" 2) ("unnumberedsec" 3) ("unnumberedsubsec" 4) ("unnumberedsubsubsec" 5) ("appendix" 2) ("appendixsec" 3) ("appendixsection" 3) ("appendixsubsec" 4) ("appendixsubsubsec" 5) ("majorheading" 2) ("chapheading" 2) ("heading" 3) ("subheading" 4) ("subsubheading" 5)))) nil [9632 10146])
            ("texinfo-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 "." st) (modify-syntax-entry 92 "." st) (modify-syntax-entry 64 "\\" st) (modify-syntax-entry 17 "\\" st) (modify-syntax-entry 91 "(]" st) (modify-syntax-entry 93 ")[" st) (modify-syntax-entry 123 "(}" st) (modify-syntax-entry 125 "){" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 39 "w" st) st)) nil [10166 10616])
            ("texinfo-imenu-generic-expression" variable (:default-value (quote ((nil "^@\\(node\\|anchor\\)[ 	]+\\([^,
]*\\)" 2) ("Chapters" "^@chapter[ 	]+\\(.*\\)$" 1)))) nil [10793 11016])
            ("texinfo-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("\\(@\\)c\\(omment\\)?\\>" (1 "<")) ("^\\(@\\)ignore\\>" (1 "< b")) ("^@end ignore\\(
\\)" (1 "> b"))))
                nil [11018 11274])
            ("texinfo-environments" variable
               (:constant-flag t
                :default-value (quote ("cartouche" "copying" "defcv" "deffn" "defivar" "defmac" "defmethod" "defop" "defopt" "defspec" "deftp" "deftypecv" "deftypefn" "deftypefun" "deftypeivar" "deftypemethod" "deftypeop" "deftypevar" "deftypevr" "defun" "defvar" "defvr" "description" "detailmenu" "direntry" "display" "documentdescription" "enumerate" "example" "flushleft" "flushright" "format" "ftable" "group" "html" "ifclear" "ifset" "ifhtml" "ifinfo" "ifnothtml" "ifnotinfo" "ifnotplaintext" "ifnottex" "ifplaintext" "iftex" "ignore" "itemize" "lisp" "macro" "menu" "multitable" "quotation" "smalldisplay" "smallexample" "smallformat" "smalllisp" "table" "tex" "titlepage" "verbatim" "vtable")))
                nil [11276 12051])
            ("texinfo-environment-regexp" variable
               (:constant-flag t
                :default-value (concat "^@" (regexp-opt (cons "end" texinfo-environments) t) "\\>"))
                nil [12053 12286])
            ("texinfo-heading" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [12288 12434])
            ("texinfo-font-lock-keywords" variable (:default-value (\` (("@\\([a-zA-Z]+\\|[^ 	
]\\)" 1 font-lock-keyword-face) ("^\\*\\([^
:]*\\)" 1 font-lock-function-name-face t) ("@\\(emph\\|i\\|sc\\){\\([^}]+\\)" 2 (quote italic)) ("@\\(strong\\|b\\){\\([^}]+\\)" 2 (quote bold)) ("@\\(kbd\\|key\\|url\\|uref\\){\\([^}]+\\)" 2 font-lock-string-face) ("@\\(file\\|email\\){\\([^}]+\\)" 2 font-lock-string-face keep) ("@\\(samp\\|code\\|var\\|env\\|command\\|option\\){\\([^}]+\\)" 2 font-lock-variable-name-face keep) ("@math{\\([^{}]*{?[^{}]*}?[^{}]*\\)}" 1 font-lock-variable-name-face) ("@\\(cite\\|x?ref\\|pxref\\|dfn\\|inforef\\){\\([^}]+\\)" 2 font-lock-constant-face) ("@\\(anchor\\){\\([^}]+\\)" 2 font-lock-type-face) ("@\\(dmn\\|acronym\\|value\\){\\([^}]+\\)" 2 font-lock-builtin-face) ("@\\(end\\|itemx?\\) +\\(.+\\)" 2 font-lock-keyword-face keep) ((\, (concat "^@" (regexp-opt (mapcar (quote car) texinfo-section-list) t) ".*
")) 0 (quote texinfo-heading) t)))) nil [12436 14097])
            ("texinfo-clone-environment" function (:arguments ("start" "end")) nil [14099 14659])
            ("texinfo-define-common-keys" function (:arguments ("keymap")) nil [14736 15461])
            ("texinfo-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (texinfo-define-common-keys map) (define-key map "\"" (quote texinfo-insert-quote)) (define-key map "" (quote kill-compilation)) (define-key map "" (quote makeinfo-recenter-compilation-buffer)) (define-key map "" (quote makeinfo-region)) (define-key map "" (quote makeinfo-buffer)) (define-key map "" (quote texinfo-format-region)) (define-key map "" (quote texinfo-format-buffer)) (define-key map "" (quote texinfo-insert-@item)) (define-key map "m" (quote texinfo-master-menu)) (define-key map "" (quote texinfo-make-menu)) (define-key map "" (quote texinfo-update-node)) (define-key map "" (quote texinfo-every-node-update)) (define-key map "" (quote texinfo-all-menus-update)) (define-key map "" (quote texinfo-show-structure)) (define-key map "}" (quote up-list)) (define-key map "]" (quote up-list)) (define-key map "/" (quote texinfo-insert-@end)) (define-key map "{" (quote texinfo-insert-braces)) (define-key map "" (quote texinfo-insert-block)) (define-key map "" (quote texinfo-start-menu-description)) (define-key map "" (quote texinfo-insert-@strong)) (define-key map "" (quote texinfo-insert-@emph)) (define-key map "v" (quote texinfo-insert-@var)) (define-key map "u" (quote texinfo-insert-@uref)) (define-key map "t" (quote texinfo-insert-@table)) (define-key map "s" (quote texinfo-insert-@samp)) (define-key map "q" (quote texinfo-insert-@quotation)) (define-key map "o" (quote texinfo-insert-@noindent)) (define-key map "n" (quote texinfo-insert-@node)) (define-key map "m" (quote texinfo-insert-@email)) (define-key map "k" (quote texinfo-insert-@kbd)) (define-key map "i" (quote texinfo-insert-@item)) (define-key map "f" (quote texinfo-insert-@file)) (define-key map "x" (quote texinfo-insert-@example)) (define-key map "e" (quote texinfo-insert-@end)) (define-key map "d" (quote texinfo-insert-@dfn)) (define-key map "c" (quote texinfo-insert-@code)) map)) nil [15574 18134])
            ("easy-menu-define" code nil nil [18136 18940])
            ("texinfo-filter" function (:arguments ("section" "list")) nil [18944 19071])
            ("texinfo-chapter-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 2 texinfo-section-list))) nil [19073 19238])
            ("texinfo-current-defun-name" function nil nil [19240 19450])
            ("define-derived-mode" code nil nil [19485 24502])
            ("texinfo-block-default" variable (:default-value "example") nil [24535 24575])
            ("define-skeleton" code nil nil [24577 25130])
            ("texinfo-inside-macro-p" function (:arguments ("macro" "bound")) nil [25132 25541])
            ("texinfo-inside-env-p" function (:arguments ("env" "bound")) nil [25543 25768])
            ("texinfo-enable-quote-macros" variable (:default-value "@\\(code\\|samp\\|kbd\\)\\>") nil [25770 25836])
            ("texinfo-enable-quote-envs" variable (:default-value (quote ("example\\>" "smallexample\\>" "lisp\\>"))) nil [25837 25917])
            ("texinfo-insert-quote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25918 27085])
            ("texinfo-last-unended-begin" function nil nil [27280 27441])
            ("texinfo-next-unmatched-end" function nil nil [27443 27662])
            ("define-skeleton" code nil nil [27664 27945])
            ("define-skeleton" code nil nil [27947 28119])
            ("define-skeleton" code nil nil [28121 28371])
            ("define-skeleton" code nil nil [28373 28620])
            ("define-skeleton" code nil nil [28622 28875])
            ("define-skeleton" code nil nil [28877 29127])
            ("define-skeleton" code nil nil [29129 29252])
            ("define-skeleton" code nil nil [29254 29504])
            ("define-skeleton" code nil nil [29506 29859])
            ("define-skeleton" code nil nil [29861 30108])
            ("define-skeleton" code nil nil [30110 30384])
            ("define-skeleton" code nil nil [30386 30509])
            ("define-skeleton" code nil nil [30511 30636])
            ("define-skeleton" code nil nil [30638 30888])
            ("define-skeleton" code nil nil [30890 31146])
            ("define-skeleton" code nil nil [31148 31265])
            ("define-skeleton" code nil nil [31267 31511])
            ("define-skeleton" code nil nil [31513 31760])
            ("defalias" code nil nil [31761 31814])
            ("texinfo-show-structure" function
               (:user-visible-flag t
                :arguments ("nodes-too"))
                nil [31845 34181])
            ("texinfo-texi2dvi-command" variable (:default-value "texi2dvi") nil [34234 34393])
            ("texinfo-tex-command" variable (:default-value "tex") nil [34395 34531])
            ("texinfo-texindex-command" variable (:default-value "texindex") nil [34533 34683])
            ("texinfo-delete-from-print-queue-command" variable (:default-value "lprm") nil [34685 34974])
            ("texinfo-tex-trailer" variable (:default-value "@bye") nil [34976 35083])
            ("texinfo-tex-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [35085 35858])
            ("texinfo-tex-buffer" function (:user-visible-flag t) nil [35860 36197])
            ("texinfo-texindex" function (:user-visible-flag t) nil [36199 36718])
            ("texinfo-tex-print" function (:user-visible-flag t) nil [36720 36944])
            ("texinfo-tex-view" function (:user-visible-flag t) nil [36946 37166])
            ("texinfo-quit-job" function (:user-visible-flag t) nil [37168 37373])
            ("texinfo-delete-from-print-queue" function
               (:user-visible-flag t
                :arguments ("job-number"))
                nil [37528 38183])
            ("texinfo" package nil nil [38185 38203]))          
      :file "texinfo.el"
      :pointmax 38230
      :fsize 38231
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax '((close-paren 1089 . 1090) (symbol 1052 . 1069) (open-paren 1051 . 1052)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("texinfo" include nil nil [7512 7530])
            ("texinfo-master-menu-header" variable (:default-value " --- The Detailed Node Listing ---
") nil [7533 7727])
            ("texinfo-section-types-regexp" variable (:default-value "^@\\(chapter \\|sect\\|subs\\|subh\\|unnum\\|major\\|chapheading \\|heading \\|appendix\\)") nil [7788 7997])
            ("texinfo-section-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 3 texinfo-section-list))) nil [7999 8164])
            ("texinfo-subsection-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 4 texinfo-section-list))) nil [8166 8337])
            ("texinfo-subsubsection-level-regexp" variable (:default-value (regexp-opt (texinfo-filter 5 texinfo-section-list))) nil [8339 8516])
            ("texinfo-update-menu-same-level-regexps" variable (:default-value (quote ((1 . "top[ 	]+") (2 concat "\\(^@\\)\\(" texinfo-chapter-level-regexp "\\)\\>[ 	]*") (3 concat "\\(^@\\)\\(" texinfo-section-level-regexp "\\)\\>[ 	]*") (4 concat "\\(^@\\)\\(" texinfo-subsection-level-regexp "\\)\\>[ 	]+") (5 concat "\\(^@\\)\\(" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+")))) nil [8518 9090])
            ("texinfo-update-menu-higher-regexps" variable (:default-value (quote ((1 . "^@node [ 	]*DIR") (2 . "^@node [ 	]*top[ 	]*\\(,\\|$\\)") (3 concat "\\(^@\\(" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)") (4 concat "\\(^@\\(" texinfo-section-level-regexp "\\|" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)") (5 concat "\\(^@\\(" texinfo-subsection-level-regexp "\\|" texinfo-section-level-regexp "\\|" texinfo-chapter-level-regexp "\\)\\>[ 	]*\\)")))) nil [9092 9842])
            ("texinfo-update-menu-lower-regexps" variable (:default-value (quote ((1 concat "\\(^@\\(" texinfo-chapter-level-regexp "\\|" texinfo-section-level-regexp "\\|" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]*\\)") (2 concat "\\(^@\\(" texinfo-section-level-regexp "\\|" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]*\\)") (3 concat "\\(^@\\(" texinfo-subsection-level-regexp "\\|" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+\\)") (4 concat "\\(^@\\(" texinfo-subsubsection-level-regexp "\\)\\>[ 	]+\\)") (5 . "a\\(^\\)")))) nil [9844 10878])
            ("texinfo-make-menu" function
               (:user-visible-flag t
                :arguments ("beginning" "end"))
                nil [10882 12854])
            ("texinfo-make-one-menu" function (:arguments ("level")) nil [12856 13797])
            ("texinfo-all-menus-update" function
               (:user-visible-flag t
                :arguments ("update-all-nodes-p"))
                nil [13799 15858])
            ("texinfo-find-lower-level-node" function (:arguments ("level" "region-end")) nil [15860 17061])
            ("texinfo-find-higher-level-node" function (:arguments ("level" "region-end")) nil [17063 18253])
            ("texinfo-make-menu-list" function (:arguments ("beginning" "end" "level")) nil [18298 19185])
            ("texinfo-menu-locate-entry-p" function (:arguments ("level" "search-end")) nil [19187 20292])
            ("texinfo-copy-node-name" function nil nil [20294 20916])
            ("texinfo-copy-section-title" function nil nil [20918 21729])
            ("texinfo-old-menu-p" function (:arguments ("beginning" "first")) nil [21760 22421])
            ("texinfo-incorporate-descriptions" function (:arguments ("new-menu-list")) nil [22423 23714])
            ("texinfo-incorporate-menu-entry-names" function (:arguments ("new-menu-list")) nil [23716 25120])
            ("texinfo-menu-copy-old-description" function (:arguments ("end-of-menu")) nil [25122 25992])
            ("texinfo-menu-end" function nil nil [25994 26233])
            ("texinfo-delete-old-menu" function (:arguments ("beginning" "first")) nil [26235 26706])
            ("texinfo-column-for-description" variable (:default-value 32) nil [26770 26870])
            ("texinfo-insert-menu" function (:arguments ("menu-list" "node-name")) nil [26872 28560])
            ("texinfo-start-menu-description" function (:user-visible-flag t) nil [28616 31550])
            ("texinfo-indent-menu-description" function
               (:user-visible-flag t
                :arguments ("column" "region-p"))
                nil [31726 32647])
            ("texinfo-menu-indent-description" function (:arguments ("to-column-number")) nil [32649 33687])
            ("texinfo-master-menu" function
               (:user-visible-flag t
                :arguments ("update-all-nodes-menus-p"))
                nil [33719 38497])
            ("texinfo-master-menu-list" function nil nil [38499 39122])
            ("texinfo-insert-master-menu-list" function (:arguments ("master-menu-list")) nil [39124 41723])
            ("texinfo-locate-menu-p" function nil nil [41725 41977])
            ("texinfo-copy-menu-title" function nil nil [41979 42624])
            ("texinfo-copy-menu" function nil nil [42626 43479])
            ("texinfo-specific-section-type" function nil nil [43543 45062])
            ("texinfo-hierarchic-level" function nil nil [45064 45348])
            ("texinfo-update-menu-region-beginning" function (:arguments ("level")) nil [45386 46611])
            ("texinfo-update-menu-region-end" function (:arguments ("level")) nil [46613 47648])
            ("texinfo-menu-first-node" function (:arguments ("beginning" "end")) nil [47650 48165])
            ("texinfo-update-node" function
               (:user-visible-flag t
                :arguments ("beginning" "end"))
                nil [48190 50046])
            ("texinfo-every-node-update" function (:user-visible-flag t) nil [50048 50543])
            ("texinfo-update-the-node" function nil nil [50545 51280])
            ("texinfo-top-pointer-case" function nil nil [51282 52126])
            ("texinfo-check-for-node-name" function nil nil [52128 52835])
            ("texinfo-delete-existing-pointers" function nil nil [52837 53277])
            ("texinfo-find-pointer" function (:arguments ("beginning" "end" "level" "direction")) nil [53279 56763])
            ("texinfo-pointer-name" function (:arguments ("kind")) nil [56765 57433])
            ("texinfo-insert-pointer" function (:arguments ("beginning" "end" "level" "direction")) nil [57435 58070])
            ("texinfo-clean-up-node-line" function nil nil [58072 58254])
            ("texinfo-sequential-node-update" function
               (:user-visible-flag t
                :arguments ("region-p"))
                nil [58738 60330])
            ("texinfo-sequentially-update-the-node" function nil nil [60332 61052])
            ("texinfo-sequentially-insert-pointer" function (:arguments ("level" "direction")) nil [61054 61507])
            ("texinfo-sequentially-find-pointer" function (:arguments ("level" "direction")) nil [61509 62796])
            ("texinfo-insert-node-lines" function
               (:user-visible-flag t
                :arguments ("beginning" "end" "title-p"))
                nil [62997 65383])
            ("texinfo-multi-file-included-list" function (:arguments ("outer-file")) nil [66530 67077])
            ("texinfo-copy-next-section-title" function nil nil [67079 67860])
            ("texinfo-multi-file-update" function (:arguments ("files" "update-everything")) nil [67862 72317])
            ("texinfo-multi-files-insert-main-menu" function (:arguments ("menu-list")) nil [72319 73297])
            ("texinfo-multi-file-master-menu-list" function (:arguments ("files-list")) nil [73299 73915])
            ("texinfo-multiple-files-update" function
               (:user-visible-flag t
                :arguments ("outer-file" "make-master-menu" "update-everything"))
                nil [73958 78369])
            ("texnfo-upd" package nil nil [78408 78429]))          
      :file "texnfo-upd.el"
      :pointmax 78459
      :fsize 78458
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("regexp-opt" include nil nil [32165 32186])
            ("quail-translating" variable nil nil [32283 32309])
            ("quail-converting" variable nil nil [32310 32335])
            ("flyspell-mode" variable nil nil [32336 32358])
            ("real-last-command" variable nil nil [32359 32385])
            ("delete-selection-mode" variable nil nil [32386 32416])
            ("table" customgroup (:user-visible-flag t) nil [32775 32907])
            ("table-hooks" customgroup (:user-visible-flag t) nil [32909 32995])
            ("table-time-before-update" variable (:default-value 0.2) nil [32997 33714])
            ("table-time-before-reformat" variable (:default-value 0.2) nil [33716 34021])
            ("table-command-prefix" variable (:default-value [(control c) (control c)]) nil [34023 34239])
            ("table-cell" variable
               (:default-value (quote ((((min-colors 88) (class color)) :foreground "gray90" :background "blue1") (((class color)) :foreground "gray90" :background "blue") (t :weight bold)))
                :type "face")
                nil [34241 34498])
            ("table-cell-horizontal-chars" variable (:default-value "-=") nil [34500 34694])
            ("table-cell-vertical-char" variable (:default-value 124) nil [34696 34873])
            ("table-cell-intersection-char" variable (:default-value 43) nil [34875 35037])
            ("table-word-continuation-char" variable (:default-value 92) nil [35039 35636])
            ("table-detect-cell-alignment" variable (:default-value t) nil [35638 36056])
            ("table-dest-buffer-name" variable (:default-value "table") nil [36058 36226])
            ("table-html-delegate-spacing-to-user-agent" variable nil nil [36228 36489])
            ("table-html-th-rows" variable nil nil [36491 36662])
            ("table-html-th-columns" variable nil nil [36664 36845])
            ("table-html-table-attribute" variable (:default-value "border=\"1\"") nil [36847 37028])
            ("table-html-cell-attribute" variable nil nil [37030 37298])
            ("table-cals-thead-rows" variable (:default-value 1) nil [37300 37454])
            ("table-cell-map-hook" variable nil nil [37456 37690])
            ("table-disable-incompatibility-warning" variable nil nil [37692 37917])
            ("table-abort-recognition-when-input-pending" variable (:default-value t) nil [37919 38273])
            ("table-load-hook" variable nil nil [38275 38410])
            ("table-point-entered-cell-hook" variable nil nil [38412 38562])
            ("table-point-left-cell-hook" variable nil nil [38564 38708])
            ("table-yank-handler" variable (:default-value (quote (nil nil t nil))) nil [38710 38783])
            ("setplist" code nil nil [38785 38838])
            ("table-disable-menu" variable (:default-value (null (and (locate-library "easymenu") (require (quote easymenu)) (fboundp (quote easy-menu-add-item))))) nil [38840 39112])
            ("table-paragraph-start" variable
               (:constant-flag t
                :default-value "[ 	
]")
                nil [39255 39371])
            ("table-cache-buffer-name" variable
               (:constant-flag t
                :default-value " *table cell cache*")
                nil [39372 39456])
            ("table-cell-info-lu-coordinate" variable nil nil [39457 39565])
            ("table-cell-info-rb-coordinate" variable nil nil [39566 39676])
            ("table-cell-info-width" variable nil nil [39677 39759])
            ("table-cell-info-height" variable nil nil [39760 39839])
            ("table-cell-info-justify" variable nil nil [39840 39926])
            ("table-cell-info-valign" variable nil nil [39927 40017])
            ("table-cell-self-insert-command-count" variable nil nil [40018 40095])
            ("table-cell-map" variable nil nil [40096 40159])
            ("table-cell-global-map-alist" variable nil nil [40160 40275])
            ("table-global-menu-map" variable nil nil [40276 40355])
            ("table-cell-menu-map" variable nil nil [40356 40433])
            ("table-cell-buffer" variable nil nil [40434 40505])
            ("table-cell-cache-point-coordinate" variable nil nil [40506 40607])
            ("table-cell-cache-mark-coordinate" variable nil nil [40608 40707])
            ("table-update-timer" variable nil nil [40708 40778])
            ("table-widen-timer" variable nil nil [40779 40848])
            ("table-heighten-timer" variable nil nil [40849 40921])
            ("table-inhibit-update" variable nil nil [40922 41114])
            ("table-inhibit-auto-fill-paragraph" variable nil nil [41115 41337])
            ("table-mode-indicator" variable nil nil [41338 41399])
            ("make-variable-buffer-local" code nil nil [41529 41579])
            ("unless" code nil nil [41580 41740])
            ("table-source-languages" variable
               (:constant-flag t
                :default-value (quote (html latex cals)))
                nil [41742 41826])
            ("table-source-info-plist" variable nil nil [41827 41939])
            ("table-cell-span-direction-history" variable (:default-value (quote ("right"))) nil [42344 42397])
            ("table-cell-split-orientation-history" variable (:default-value (quote ("horizontally"))) nil [42398 42461])
            ("table-cell-split-contents-to-history" variable (:default-value (quote ("split"))) nil [42462 42518])
            ("table-insert-row-column-history" variable (:default-value (quote ("row"))) nil [42519 42568])
            ("table-justify-history" variable (:default-value (quote ("center"))) nil [42569 42611])
            ("table-columns-history" variable (:default-value (quote ("3"))) nil [42612 42649])
            ("table-rows-history" variable (:default-value (quote ("3"))) nil [42650 42684])
            ("table-cell-width-history" variable (:default-value (quote ("5"))) nil [42685 42725])
            ("table-cell-height-history" variable (:default-value (quote ("1"))) nil [42726 42767])
            ("table-source-caption-history" variable (:default-value (quote ("Table"))) nil [42768 42816])
            ("table-sequence-string-history" variable (:default-value (quote ("0"))) nil [42817 42862])
            ("table-sequence-count-history" variable (:default-value (quote ("0"))) nil [42863 42907])
            ("table-sequence-increment-history" variable (:default-value (quote ("1"))) nil [42908 42956])
            ("table-sequence-interval-history" variable (:default-value (quote ("1"))) nil [42957 43004])
            ("table-sequence-justify-history" variable (:default-value (quote ("left"))) nil [43005 43054])
            ("table-source-language-history" variable (:default-value (quote ("html"))) nil [43055 43103])
            ("table-col-delim-regexp-history" variable (:default-value (quote (""))) nil [43104 43149])
            ("table-row-delim-regexp-history" variable (:default-value (quote (""))) nil [43150 43195])
            ("table-capture-justify-history" variable (:default-value (quote ("left"))) nil [43196 43244])
            ("table-capture-min-cell-width-history" variable (:default-value (quote ("5"))) nil [43245 43297])
            ("table-capture-columns-history" variable (:default-value (quote (""))) nil [43298 43342])
            ("table-target-history" variable (:default-value (quote ("cell"))) nil [43343 43382])
            ("table-cell-bindings" variable
               (:constant-flag t
                :default-value (quote (([(control i)] . table-forward-cell) ([(control I)] . table-backward-cell) ([tab] . table-forward-cell) ([(shift backtab)] . table-backward-cell) ([(shift iso-lefttab)] . table-backward-cell) ([(shift tab)] . table-backward-cell) ([backtab] . table-backward-cell) ([return] . *table--cell-newline) ([(control m)] . *table--cell-newline) ([(control j)] . *table--cell-newline-and-indent) ([mouse-3] . *table--present-cell-popup-menu) ([(control 62)] . table-widen-cell) ([(control 60)] . table-narrow-cell) ([(control 125)] . table-heighten-cell) ([(control 123)] . table-shorten-cell) ([(control 45)] . table-split-cell-vertically) ([(control 124)] . table-split-cell-horizontally) ([(control 42)] . table-span-cell) ([(control 43)] . table-insert-row-column) ([(control 33)] . table-fixed-width-mode) ([(control 35)] . table-query-dimension) ([(control 94)] . table-generate-source) ([(control 58)] . table-justify))))
                nil [44188 45402])
            ("table-command-remap-alist" variable (:default-value (quote ((self-insert-command . *table--cell-self-insert-command) (completion-separator-self-insert-autofilling . *table--cell-self-insert-command) (completion-separator-self-insert-command . *table--cell-self-insert-command) (delete-char . *table--cell-delete-char) (delete-backward-char . *table--cell-delete-backward-char) (backward-delete-char . *table--cell-delete-backward-char) (backward-delete-char-untabify . *table--cell-delete-backward-char) (newline . *table--cell-newline) (newline-and-indent . *table--cell-newline-and-indent) (open-line . *table--cell-open-line) (quoted-insert . *table--cell-quoted-insert) (describe-mode . *table--cell-describe-mode) (describe-bindings . *table--cell-describe-bindings) (dabbrev-expand . *table--cell-dabbrev-expand) (dabbrev-completion . *table--cell-dabbrev-completion)))) nil [45404 46401])
            ("table-command-list" variable (:default-value (mapcar (function cdr) table-command-remap-alist)) nil [46403 46589])
            ("table-global-menu" variable
               (:constant-flag t
                :default-value (quote ("Table" ("Insert" ["a Table..." table-insert :active (and (not buffer-read-only) (not (table--probe-cell))) :help "Insert a text based table at point"] ["Row" table-insert-row :active (table--row-column-insertion-point-p) :help "Insert row(s) of cells in table"] ["Column" table-insert-column :active (table--row-column-insertion-point-p (quote column)) :help "Insert column(s) of cells in table"]) "----" ("Recognize" ["in Buffer" table-recognize :active t :help "Recognize all tables in the current buffer"] ["in Region" table-recognize-region :active (and mark-active (not (eq (mark t) (point)))) :help "Recognize all tables in the current region"] ["a Table" table-recognize-table :active (table--probe-cell) :help "Recognize a table at point"] ["a Cell" table-recognize-cell :active (let ((cell (table--probe-cell))) (and cell (null (table--at-cell-p (car cell))))) :help "Recognize a cell at point"]) ("Unrecognize" ["in Buffer" table-unrecognize :active t :help "Unrecognize all tables in the current buffer"] ["in Region" table-unrecognize-region :active (and mark-active (not (eq (mark t) (point)))) :help "Unrecognize all tables in the current region"] ["a Table" table-unrecognize-table :active (table--probe-cell) :help "Unrecognize the current table"] ["a Cell" table-unrecognize-cell :active (let ((cell (table--probe-cell))) (and cell (table--at-cell-p (car cell)))) :help "Unrecognize the current cell"]) "----" ["Capture Region" table-capture :active (and (not buffer-read-only) mark-active (not (eq (mark t) (point))) (not (table--probe-cell))) :help "Capture text in the current region as a table"] ["Release" table-release :active (table--editable-cell-p) :help "Release the current table as plain text"])))
                nil [46591 48581])
            ("table-cell-menu" variable
               (:constant-flag t
                :default-value (quote ("Table" ("Insert" ["Row" table-insert-row :active (table--row-column-insertion-point-p) :help "Insert row(s) of cells in table"] ["Column" table-insert-column :active (table--row-column-insertion-point-p (quote column)) :help "Insert column(s) of cells in table"]) ("Delete" ["Row" table-delete-row :active (table--editable-cell-p) :help "Delete row(s) of cells in table"] ["Column" table-delete-column :active (table--editable-cell-p) :help "Delete column(s) of cells in table"]) "----" ("Split a Cell" ["Horizontally" table-split-cell-horizontally :active (table--cell-can-split-horizontally-p) :help "Split the current cell horizontally at point"] ["Vertically" table-split-cell-vertically :active (table--cell-can-split-vertically-p) :help "Split the current cell vertical at point"]) ("Span a Cell to" ["Right" (table-span-cell (quote right)) :active (table--cell-can-span-p (quote right)) :help "Span the current cell into the right cell"] ["Left" (table-span-cell (quote left)) :active (table--cell-can-span-p (quote left)) :help "Span the current cell into the left cell"] ["Above" (table-span-cell (quote above)) :active (table--cell-can-span-p (quote above)) :help "Span the current cell into the cell above"] ["Below" (table-span-cell (quote below)) :active (table--cell-can-span-p (quote below)) :help "Span the current cell into the cell below"]) "----" ("Shrink Cells" ["Horizontally" table-narrow-cell :active (table--editable-cell-p) :help "Shrink the current cell horizontally"] ["Vertically" table-shorten-cell :active (table--editable-cell-p) :help "Shrink the current cell vertically"]) ("Expand Cells" ["Horizontally" table-widen-cell :active (table--editable-cell-p) :help "Expand the current cell horizontally"] ["Vertically" table-heighten-cell :active (table--editable-cell-p) :help "Expand the current cell vertically"]) "----" ("Justify" ("a Cell" ["Left" (table-justify-cell (quote left)) :active (table--editable-cell-p) :help "Left justify the contents of the current cell"] ["Center" (table-justify-cell (quote center)) :active (table--editable-cell-p) :help "Center justify the contents of the current cell"] ["Right" (table-justify-cell (quote right)) :active (table--editable-cell-p) :help "Right justify the contents of the current cell"] "----" ["Top" (table-justify-cell (quote top)) :active (table--editable-cell-p) :help "Top align the contents of the current cell"] ["Middle" (table-justify-cell (quote middle)) :active (table--editable-cell-p) :help "Middle align the contents of the current cell"] ["Bottom" (table-justify-cell (quote bottom)) :active (table--editable-cell-p) :help "Bottom align the contents of the current cell"] ["None" (table-justify-cell (quote none)) :active (table--editable-cell-p) :help "Remove vertical alignment from the current cell"]) ("a Row" ["Left" (table-justify-row (quote left)) :active (table--editable-cell-p) :help "Left justify the contents of all cells in the current row"] ["Center" (table-justify-row (quote center)) :active (table--editable-cell-p) :help "Center justify the contents of all cells in the current row"] ["Right" (table-justify-row (quote right)) :active (table--editable-cell-p) :help "Right justify the contents of all cells in the current row"] "----" ["Top" (table-justify-row (quote top)) :active (table--editable-cell-p) :help "Top align the contents of all cells in the current row"] ["Middle" (table-justify-row (quote middle)) :active (table--editable-cell-p) :help "Middle align the contents of all cells in the current row"] ["Bottom" (table-justify-row (quote bottom)) :active (table--editable-cell-p) :help "Bottom align the contents of all cells in the current row"] ["None" (table-justify-cell (quote none)) :active (table--editable-cell-p) :help "Remove vertical alignment from all cells in the current row"]) ("a Column" ["Left" (table-justify-column (quote left)) :active (table--editable-cell-p) :help "Left justify the contents of all cells in the current column"] ["Center" (table-justify-column (quote center)) :active (table--editable-cell-p) :help "Center justify the contents of all cells in the current column"] ["Right" (table-justify-column (quote right)) :active (table--editable-cell-p) :help "Right justify the contents of all cells in the current column"] "----" ["Top" (table-justify-column (quote top)) :active (table--editable-cell-p) :help "Top align the contents of all cells in the current column"] ["Middle" (table-justify-column (quote middle)) :active (table--editable-cell-p) :help "Middle align the contents of all cells in the current column"] ["Bottom" (table-justify-column (quote bottom)) :active (table--editable-cell-p) :help "Bottom align the contents of all cells in the current column"] ["None" (table-justify-cell (quote none)) :active (table--editable-cell-p) :help "Remove vertical alignment from all cells in the current column"]) ("a Paragraph" ["Left" (table-justify-cell (quote left) t) :active (table--editable-cell-p) :help "Left justify the current paragraph"] ["Center" (table-justify-cell (quote center) t) :active (table--editable-cell-p) :help "Center justify the current paragraph"] ["Right" (table-justify-cell (quote right) t) :active (table--editable-cell-p) :help "Right justify the current paragraph"])) "----" ["Query Dimension" table-query-dimension :active (table--probe-cell) :help "Get the dimension of the current cell and the current table"] ["Generate Source" table-generate-source :active (table--probe-cell) :help "Generate source of the current table in the specified language"] ["Insert Sequence" table-insert-sequence :active (table--editable-cell-p) :help "Travel cells forward while inserting a specified sequence string in each cell"] ("Unrecognize" ["a Table" table-unrecognize-table :active (table--probe-cell) :help "Unrecognize the current table"] ["a Cell" table-unrecognize-cell :active (let ((cell (table--probe-cell))) (and cell (table--at-cell-p (car cell)))) :help "Unrecognize the current cell"]) ["Release" table-release :active (table--editable-cell-p) :help "Release the current table as plain text"] ("Configure Width to" ["Auto Expand Mode" (table-fixed-width-mode -1) :active t :style radio :selected (not table-fixed-width-mode) :help "A mode that allows automatic horizontal cell expansion"] ["Fixed Width Mode" (table-fixed-width-mode 1) :active t :style radio :selected table-fixed-width-mode :help "A mode that does not allow automatic horizontal cell expansion"]) ("Navigate" ["Forward Cell" table-forward-cell :active (table--probe-cell) :help "Move point forward by cell(s)"] ["Backward Cell" table-backward-cell :active (table--probe-cell) :help "Move point backward by cell(s)"]))))
                nil [48583 56080])
            ("when" code nil nil [56563 57032])
            ("unless" code nil nil [57081 57455])
            ("table-with-cache-buffer" function (:arguments ("body")) nil [57512 61485])
            ("if" code nil nil [61486 61673])
            ("table-put-source-info" function (:arguments ("prop" "value")) nil [61675 61811])
            ("table-get-source-info" function (:arguments ("prop")) nil [61813 61936])
            ("dolist" code nil nil [62053 63030])
            ("dolist" code nil nil [63052 64067])
            ("dolist" code nil nil [64086 64927])
            ("dolist" code nil nil [64949 65740])
            ("table-insert" function
               (:user-visible-flag t
                :arguments ("columns" "rows" "cell-width" "cell-height"))
                nil [65814 74725])
            ("table-insert-row" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [74742 78556])
            ("table-insert-column" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [78573 82916])
            ("table-insert-row-column" function
               (:user-visible-flag t
                :arguments ("row-column" "n"))
                nil [82933 83658])
            ("table-recognize" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83675 85448])
            ("table-unrecognize" function nil nil [85465 85532])
            ("table-recognize-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [85549 87215])
            ("table-unrecognize-region" function (:arguments ("beg" "end")) nil [87232 87332])
            ("table-recognize-table" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87349 88023])
            ("table-unrecognize-table" function nil nil [88040 88119])
            ("table-recognize-cell" function
               (:user-visible-flag t
                :arguments ("force" "no-copy" "arg"))
                nil [88136 91034])
            ("table-unrecognize-cell" function nil nil [91051 91136])
            ("table-heighten-cell" function
               (:user-visible-flag t
                :arguments ("n" "no-copy" "no-update"))
                nil [91153 93736])
            ("table-shorten-cell" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [93753 100366])
            ("table-widen-cell" function
               (:user-visible-flag t
                :arguments ("n" "no-copy" "no-update"))
                nil [100383 102934])
            ("table-narrow-cell" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [102951 107229])
            ("table-forward-cell" function
               (:user-visible-flag t
                :arguments ("arg" "no-recognize" "unrecognize"))
                nil [107246 112853])
            ("table-backward-cell" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [112912 113180])
            ("table-span-cell" function
               (:user-visible-flag t
                :arguments ("direction"))
                nil [113197 117420])
            ("table-split-cell-vertically" function (:user-visible-flag t) nil [117437 119070])
            ("table-split-cell-horizontally" function (:user-visible-flag t) nil [119087 122792])
            ("table-split-cell" function
               (:user-visible-flag t
                :arguments ("orientation"))
                nil [122809 123572])
            ("table-justify" function
               (:user-visible-flag t
                :arguments ("what" "justify"))
                nil [123589 124249])
            ("table-justify-cell" function
               (:user-visible-flag t
                :arguments ("justify" "paragraph"))
                nil [124266 124780])
            ("table-justify-row" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [124797 125344])
            ("table-justify-column" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [125361 125913])
            ("define-minor-mode" code nil nil [125930 126532])
            ("table-query-dimension" function
               (:user-visible-flag t
                :arguments ("where"))
                nil [126549 129203])
            ("table-generate-source" function
               (:user-visible-flag t
                :arguments ("language" "dest-buffer" "caption"))
                nil [129220 134007])
            ("table--generate-source-prologue" function (:arguments ("dest-buffer" "language" "caption" "col-list" "_row-list")) nil [134009 135467])
            ("table--generate-source-epilogue" function (:arguments ("dest-buffer" "language" "_col-list" "_row-list")) nil [135469 136218])
            ("table--generate-source-scan-rows" function (:arguments ("dest-buffer" "language" "_origin-cell" "col-list" "row-list")) nil [136220 137185])
            ("table--generate-source-cells-in-a-row" function (:arguments ("dest-buffer" "language" "col-list" "row-list")) nil [137187 140494])
            ("table--generate-source-cell-contents" function (:arguments ("dest-buffer" "language" "cell")) nil [140496 141877])
            ("table--cell-horizontal-char-p" function (:arguments ("c")) nil [141879 142036])
            ("table--generate-source-scan-lines" function (:arguments ("dest-buffer" "_language" "origin-cell" "tail-cell" "col-list" "row-list")) nil [142038 145147])
            ("table-insert-sequence" function
               (:user-visible-flag t
                :arguments ("str" "n" "increment" "interval" "justify"))
                nil [145164 149751])
            ("table-delete-row" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [149768 152807])
            ("table-delete-column" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [152824 155004])
            ("table-capture" function
               (:user-visible-flag t
                :arguments ("beg" "end" "col-delim-regexp" "row-delim-regexp" "justify" "min-cell-width" "columns"))
                nil [155021 165526])
            ("table-release" function (:user-visible-flag t) nil [165543 166991])
            ("table--make-cell-map" function nil nil [167080 168481])
            ("add-hook" code nil nil [168602 168653])
            ("*table--cell-self-insert-command" function (:user-visible-flag t) nil [168655 169269])
            ("*table--cell-delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [169271 169422])
            ("*table--cell-newline" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [169424 169960])
            ("*table--cell-open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [169962 170232])
            ("*table--cell-newline-and-indent" function (:user-visible-flag t) nil [170234 170367])
            ("*table--cell-delete-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [170369 172345])
            ("*table--cell-quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [172347 172576])
            ("*table--cell-describe-mode" function (:user-visible-flag t) nil [172578 173818])
            ("*table--cell-describe-bindings" function (:user-visible-flag t) nil [173820 174321])
            ("dabbrev-abbrev-char-regexp" variable nil nil [174323 174358])
            ("*table--cell-dabbrev-expand" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174360 174698])
            ("*table--cell-dabbrev-completion" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174700 175120])
            ("*table--present-cell-popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [175122 175641])
            ("table--update-cell" function (:arguments ("now")) nil [175715 177753])
            ("table--update-cell-widened" function (:arguments ("now")) nil [177755 179377])
            ("table--update-cell-heightened" function (:arguments ("now")) nil [179379 181061])
            ("table-goto-top-left-corner" function nil nil [181153 181468])
            ("table-goto-top-right-corner" function nil nil [181470 181784])
            ("table-goto-bottom-left-corner" function nil nil [181786 182109])
            ("table-goto-bottom-right-corner" function nil nil [182111 182433])
            ("table-function" function (:arguments ("function")) nil [182435 182856])
            ("table--read-from-minibuffer" function (:arguments ("prompt-history")) nil [182924 183522])
            ("table--buffer-substring-and-trim" function (:arguments ("beg" "end")) nil [183524 183981])
            ("table--valign" function nil nil [183983 185434])
            ("table--query-justification" function nil nil [185436 185804])
            ("table--spacify-frame" function nil nil [185806 186894])
            ("table--remove-blank-lines" function (:arguments ("n")) nil [186896 187538])
            ("table--uniform-list-p" function (:arguments ("l")) nil [187540 187785])
            ("table--detect-cell-alignment" function (:arguments ("cell")) nil [187787 189718])
            ("table--string-to-number-list" function (:arguments ("str")) nil [189720 189988])
            ("table--justify-cell-contents" function (:arguments ("justify" "paragraph")) nil [189990 191203])
            ("table--horizontally-shift-above-and-below" function (:arguments ("columns-to-extend" "top-to-bottom-coord-list")) nil [191205 193363])
            ("table--create-growing-space-below" function (:arguments ("lines-to-extend" "left-to-right-coord-list" "bottom-border-y")) nil [193365 194781])
            ("table--untabify-line" function (:arguments ("from")) nil [194783 195278])
            ("table--untabify" function (:arguments ("beg" "end")) nil [195280 195451])
            ("table--multiply-string" function (:arguments ("string" "multiplier")) nil [195453 195687])
            ("table--line-column-position" function (:arguments ("line" "column")) nil [195689 195872])
            ("table--row-column-insertion-point-p" function (:arguments ("columnp")) nil [195874 196605])
            ("table--find-row-column" function (:arguments ("columnp" "no-error")) nil [196607 198066])
            ("table--min-coord-list" function (:arguments ("coord-list")) nil [198068 199023])
            ("table--cell-can-split-horizontally-p" function nil nil [199025 199370])
            ("table--cell-can-split-vertically-p" function nil nil [199372 199708])
            ("table--cell-can-span-p" function (:arguments ("direction")) nil [199710 201582])
            ("table--cell-insert-char" function (:arguments ("char" "overwrite")) nil [201584 203710])
            ("table--finish-delayed-tasks" function nil nil [203712 203986])
            ("table--log" function (:arguments ("body")) nil [203988 204189])
            ("table--measure-max-width" function (:arguments ("unlimited")) nil [204191 204842])
            ("table--cell-to-coord" function (:arguments ("cell")) nil [204844 205046])
            ("table--cell-list-to-coord-list" function (:arguments ("cell-list")) nil [205048 205734])
            ("table--test-cell-list" function (:arguments ("horizontal" "reverse" "first-only" "pivot")) nil [205736 206618])
            ("table--vertical-cell-list" function (:arguments ("top-to-bottom" "first-only" "pivot" "internal-dir" "internal-list" "internal-px")) nil [206620 209018])
            ("table--horizontal-cell-list" function (:arguments ("left-to-right" "first-only" "pivot" "internal-dir" "internal-list" "internal-py")) nil [209020 211447])
            ("table--point-in-cell-p" function (:arguments ("location")) nil [211449 211813])
            ("table--region-in-cell-p" function (:arguments ("beg" "end")) nil [211815 212156])
            ("table--at-cell-p" function (:arguments ("position" "object" "at-column")) nil [212158 212554])
            ("table--probe-cell-left-up" function nil nil [212556 214098])
            ("table--probe-cell-right-bottom" function nil nil [214100 215870])
            ("table--editable-cell-p" function (:arguments ("_abort-on-error")) nil [215872 216008])
            ("table--probe-cell" function (:arguments ("abort-on-error")) nil [216010 217753])
            ("table--insert-rectangle" function (:arguments ("rectangle")) nil [217755 218215])
            ("table--put-cell-property" function (:arguments ("cell")) nil [218217 218996])
            ("table--put-cell-line-property" function (:arguments ("beg" "end" "object")) nil [218998 219581])
            ("table--put-cell-content-property" function (:arguments ("beg" "end" "object")) nil [219583 219905])
            ("table--put-cell-indicator-property" function (:arguments ("beg" "end" "object")) nil [219907 220177])
            ("table--put-cell-face-property" function (:arguments ("beg" "end" "object")) nil [220179 220326])
            ("table--put-cell-keymap-property" function (:arguments ("beg" "end" "object")) nil [220328 220485])
            ("table--put-cell-rear-nonsticky" function (:arguments ("beg" "end" "object")) nil [220487 220640])
            ("table--put-cell-point-entered/left-property" function (:arguments ("beg" "end" "object")) nil [220642 220883])
            ("table--remove-cell-properties" function (:arguments ("beg" "end" "object")) nil [220885 221519])
            ("table--update-cell-face" function nil nil [221521 221769])
            ("table--update-cell-face" code nil nil [221771 221796])
            ("table--get-property" function (:arguments ("cell" "property")) nil [221798 221964])
            ("table--get-cell-justify-property" function (:arguments ("cell")) nil [221966 222090])
            ("table--get-cell-valign-property" function (:arguments ("cell")) nil [222092 222225])
            ("table--put-property" function (:arguments ("cell" "property" "value")) nil [222227 222461])
            ("table--put-cell-justify-property" function (:arguments ("cell" "justify")) nil [222463 222603])
            ("table--put-cell-valign-property" function (:arguments ("cell" "valign")) nil [222605 222752])
            ("table--point-entered/left-cell-function" function (:arguments ("_window" "_oldpos" "dir")) nil [222754 223246])
            ("table--warn-incompatibility" function nil nil [223248 224586])
            ("table--cell-blank-str" function (:arguments ("n")) nil [224588 224788])
            ("table--remove-eol-spaces" function (:arguments ("beg" "end" "bol" "force")) nil [224790 225774])
            ("table--fill-region" function (:arguments ("beg" "end" "col" "justify")) nil [225776 226693])
            ("table--fill-region-strictly" function (:arguments ("beg" "end")) nil [226695 227900])
            ("table--goto-coordinate" function (:arguments ("coordinate" "no-extension" "no-tab-expansion")) nil [227902 229213])
            ("table--copy-coordinate" function (:arguments ("coord")) nil [229215 229326])
            ("table--get-coordinate" function (:arguments ("where")) nil [229328 229674])
            ("table--current-line" function (:arguments ("location")) nil [229676 229922])
            ("table--transcoord-table-to-cache" function (:arguments ("coordinate")) nil [229924 230270])
            ("table--transcoord-cache-to-table" function (:arguments ("coordinate")) nil [230272 230605])
            ("table--offset-coordinate" function (:arguments ("coordinate" "offset" "negative")) nil [230607 230970])
            ("table--char-in-str-at-column" function (:arguments ("str" "column")) nil [230972 231222])
            ("table--str-index-at-column" function (:arguments ("str" "column")) nil [231224 231613])
            ("table--set-timer" function (:arguments ("seconds" "func" "args")) nil [231615 232062])
            ("table--cancel-timer" function (:arguments ("timer")) nil [232064 232223])
            ("table--get-last-command" function nil nil [232225 232390])
            ("run-hooks" code nil nil [232392 232420])
            ("table" package nil nil [232422 232438]))          
      :file "table.el"
      :pointmax 232463
      :fsize 232462
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tildify" customgroup (:user-visible-flag t) nil [2054 2170])
            ("tildify-pattern" variable (:default-value "\\(?:[,:;(][ 	]*[a]\\|\\<[AIKOSUVZikosuvz]\\)\\([ 	]+\\|[ 	]*
[ 	]*\\)\\(?:\\w\\|[([{\\]\\|<[a-zA-Z]\\)") nil [2172 2786])
            ("tildify-pattern-alist" variable nil nil [2788 4039])
            ("make-obsolete-variable" code nil nil [4040 4111])
            ("tildify-space-string" variable (:default-value " ") nil [4113 4832])
            ("tildify-string-alist" variable nil nil [4834 5931])
            ("make-obsolete-variable" code nil nil [5932 6031])
            ("tildify-foreach-region-function" variable (:default-value (quote tildify--deprecated-ignore-evironments)) nil [6033 7067])
            ("tildify-ignored-environments-alist" variable nil nil [7069 8580])
            ("make-obsolete-variable" code nil nil [8581 8705])
            ("tildify-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "dont-ask"))
                nil [8758 9589])
            ("tildify-buffer" function
               (:user-visible-flag t
                :arguments ("dont-ask"))
                nil [9606 10097])
            ("tildify--pick-alist-entry" function (:arguments ("mode-alist" "mode")) nil [10133 10456])
            ("make-obsolete" code nil nil [10457 10558])
            ("tildify--deprecated-ignore-evironments" function (:arguments ("callback" "beg" "end")) nil [10560 11157])
            ("make-obsolete" code nil nil [11158 11272])
            ("tildify-foreach-ignore-environments" function (:arguments ("pairs" "callback" "_beg" "end")) nil [11274 13123])
            ("tildify--foreach-region" function (:arguments ("callback" "beg" "end")) nil [13125 13766])
            ("tildify--find-env" function (:arguments ("regexp" "pairs")) nil [13768 14475])
            ("tildify-tildify" function (:arguments ("beg" "end" "ask")) nil [14477 16436])
            ("tildify-space-pattern" variable (:default-value "[,:;(][ 	]*[a]\\|\\<[AIKOSUVWZikosuvwz]") nil [16465 16852])
            ("tildify-space-predicates" variable (:default-value (quote (tildify-space-region-predicate))) nil [16854 17051])
            ("tildify-double-space-undos" variable (:default-value t) nil [17053 17224])
            ("tildify-space" function (:user-visible-flag t) nil [17241 18907])
            ("tildify-space-region-predicate" function nil nil [18909 19270])
            ("define-minor-mode" code nil nil [19287 20470])
            ("tildify" package nil nil [20495 20513]))          
      :file "tildify.el"
      :pointmax 20540
      :fsize 20543
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("text-mode-hook" variable (:default-value (quote (text-mode-hook-identify))) nil [1155 1354])
            ("text-mode-variant" variable nil nil [1356 1497])
            ("text-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 ".   " st) (modify-syntax-entry 92 ".   " st) (modify-syntax-entry 39 "w p" st) (modify-syntax-entry 1523 "w   ") (modify-syntax-entry 1524 "w   ") (modify-syntax-entry 183 "w   ") (modify-syntax-entry 8231 "w   ") (modify-syntax-entry 65306 "w   ") st)) nil [1499 2783])
            ("text-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote ispell-complete-word)) (define-key map [menu-bar text] (cons "Text" (make-sparse-keymap "Text"))) (bindings--define-key map [menu-bar text toggle-text-mode-auto-fill] (quote (menu-item "Auto Fill" toggle-text-mode-auto-fill :button (:toggle memq (quote turn-on-auto-fill) text-mode-hook) :help "Automatically fill text while typing in text modes (Auto Fill mode)"))) (bindings--define-key map [menu-bar text paragraph-indent-minor-mode] (quote (menu-item "Paragraph Indent" paragraph-indent-minor-mode :button (:toggle bound-and-true-p paragraph-indent-minor-mode) :help "Toggle paragraph indent minor mode"))) (bindings--define-key map [menu-bar text sep] menu-bar-separator) (bindings--define-key map [menu-bar text center-region] (quote (menu-item "Center Region" center-region :help "Center the marked region" :enable (region-active-p)))) (bindings--define-key map [menu-bar text center-paragraph] (quote (menu-item "Center Paragraph" center-paragraph :help "Center the current paragraph"))) (bindings--define-key map [menu-bar text center-line] (quote (menu-item "Center Line" center-line :help "Center the current line"))) map)) nil [2785 4336])
            ("define-derived-mode" code nil nil [4340 4892])
            ("define-derived-mode" code nil nil [4894 5468])
            ("define-minor-mode" code nil nil [5470 6653])
            ("defalias" code nil nil [6655 6696])
            ("text-mode-hook-identify" function nil nil [6912 7123])
            ("toggle-text-mode-auto-fill" function (:user-visible-flag t) nil [7125 7832])
            ("define-key" code nil nil [7836 7888])
            ("center-paragraph" function (:user-visible-flag t) nil [7890 8190])
            ("center-region" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [8192 8616])
            ("define-key" code nil nil [8618 8665])
            ("center-line" function
               (:user-visible-flag t
                :arguments ("nlines"))
                nil [8667 9564])
            ("text-mode" package nil nil [9566 9586]))          
      :file "text-mode.el"
      :pointmax 9615
      :fsize 9614
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ispell" include nil nil [1434 1451])
            ("cl-lib" include nil nil [1471 1488])
            ("flyspell" customgroup (:user-visible-flag t) nil [1716 1847])
            ("flyspell-highlight-flag" variable (:default-value t) nil [2074 2262])
            ("flyspell-mark-duplications-flag" variable (:default-value t) nil [2264 2592])
            ("flyspell-mark-duplications-exceptions" variable (:default-value (quote ((nil "that" "had") ("\\`francais" "nous" "vous")))) nil [2594 3332])
            ("flyspell-sort-corrections" variable nil nil [3334 3607])
            ("flyspell-sort-corrections-function" variable (:default-value (quote flyspell-sort-corrections-alphabetically)) nil [3609 4002])
            ("flyspell-sort-corrections-alphabetically" function (:arguments ("corr1" "corr2" "_")) nil [4004 4092])
            ("flyspell-sort" function (:arguments ("corrs" "word")) nil [4094 4289])
            ("flyspell-duplicate-distance" variable (:default-value 400000) nil [4291 4891])
            ("flyspell-delay" variable (:default-value 3) nil [4893 5036])
            ("flyspell-persistent-highlight" variable (:default-value t) nil [5038 5423])
            ("flyspell-highlight-properties" variable (:default-value t) nil [5425 5589])
            ("flyspell-default-delayed-commands" variable (:default-value (quote (self-insert-command delete-backward-char backward-or-forward-delete-char delete-char scrollbar-vertical-drag backward-delete-char-untabify))) nil [5591 5953])
            ("flyspell-delayed-commands" variable nil nil [5955 6219])
            ("flyspell-default-deplacement-commands" variable (:default-value (quote (next-line previous-line handle-switch-frame handle-select-window scroll-up scroll-down))) nil [6221 6544])
            ("flyspell-deplacement-commands" variable nil nil [6546 6833])
            ("flyspell-issue-welcome-flag" variable (:default-value t) nil [6835 6991])
            ("flyspell-issue-message-flag" variable (:default-value t) nil [6993 7138])
            ("flyspell-incorrect-hook" variable nil nil [7140 7621])
            ("flyspell-default-dictionary" variable nil nil [7623 8205])
            ("flyspell-tex-command-regexp" variable (:default-value "\\(\\(begin\\|end\\)[ 	]*{\\|\\(cite[a-z*]*\\|label\\|ref\\|eqref\\|usepackage\\|documentclass\\)[ 	]*\\(\\[[^]]*\\]\\)?{[^{}]*\\)") nil [8207 8507])
            ("flyspell-check-tex-math-command" variable nil nil [8509 8810])
            ("flyspell-dictionaries-that-consider-dash-as-word-delimiter" variable (:default-value (quote ("francais" "deutsch8" "norsk"))) nil [8812 9047])
            ("flyspell-abbrev-p" variable nil nil [9049 9192])
            ("flyspell-use-global-abbrev-table-p" variable nil nil [9194 9366])
            ("flyspell-mode-line-string" variable (:default-value " Fly") nil [9368 9600])
            ("flyspell-large-region" variable (:default-value 1000) nil [9602 10149])
            ("flyspell-insert-function" variable (:default-value (function insert)) nil [10151 10303])
            ("flyspell-before-incorrect-word-string" variable nil nil [10305 10470])
            ("flyspell-after-incorrect-word-string" variable nil nil [10472 10634])
            ("flyspell-mode-map" variable nil nil [10636 10662])
            ("flyspell-use-meta-tab" variable (:default-value t) nil [10664 10962])
            ("flyspell-auto-correct-binding" variable (:default-value [(control 59)]) nil [10964 11114])
            ("flyspell-generic-check-word-predicate" variable nil nil [11927 12214])
            ("make-variable-buffer-local" code nil nil [12215 12282])
            ("define-obsolete-variable-alias" code nil nil [12283 12394])
            ("put" code nil nil [12471 12539])
            ("put" code nil nil [12540 12611])
            ("message-signature-separator" variable nil nil [12612 12648])
            ("mail-mode-flyspell-verify" function nil nil [12649 13712])
            ("put" code nil nil [13789 13863])
            ("texinfo-mode-flyspell-verify" function nil nil [13864 14059])
            ("put" code nil nil [14136 14202])
            ("tex-mode-flyspell-verify" function nil nil [14203 14639])
            ("put" code nil nil [14716 14784])
            ("put" code nil nil [14785 14853])
            ("put" code nil nil [14854 14922])
            ("sgml-lexical-context" function (:prototype-flag t) nil [14924 14968])
            ("sgml-mode-flyspell-verify" function nil nil [14970 15308])
            ("flyspell-prog-text-faces" variable (:default-value (quote (font-lock-string-face font-lock-comment-face font-lock-doc-face))) nil [15535 15698])
            ("flyspell-generic-progmode-verify" function nil nil [15700 15980])
            ("flyspell--prev-meta-tab-binding" variable nil nil [16055 16095])
            ("flyspell-prog-mode" function (:user-visible-flag t) nil [16112 16505])
            ("make-overlay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16732 16808])
            ("overlayp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16809 16885])
            ("overlays-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16886 16962])
            ("delete-overlay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16963 17039])
            ("overlays-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17040 17116])
            ("overlay-put" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17117 17193])
            ("overlay-get" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17194 17270])
            ("previous-overlay-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17271 17347])
            ("flyspell-mouse-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote flyspell-correct-word)) map)) nil [17574 17751])
            ("flyspell-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (if flyspell-use-meta-tab (define-key map "\211" (quote flyspell-auto-correct-word))) (define-key map flyspell-auto-correct-binding (quote flyspell-auto-correct-previous-word)) (define-key map [(control 44)] (quote flyspell-goto-next-error)) (define-key map [(control 46)] (quote flyspell-auto-correct-word)) (define-key map [3 36] (quote flyspell-correct-word-before-point)) map)) nil [17753 18261])
            ("flyspell-consider-dash-as-word-delimiter-flag" variable nil nil [18291 18420])
            ("make-variable-buffer-local" code nil nil [18421 18496])
            ("flyspell-dash-dictionary" variable nil nil [18497 18534])
            ("make-variable-buffer-local" code nil nil [18535 18589])
            ("flyspell-dash-local-dictionary" variable nil nil [18590 18633])
            ("make-variable-buffer-local" code nil nil [18634 18694])
            ("flyspell-incorrect" variable
               (:default-value (quote ((((supports :underline (:style wave))) :underline (:style wave :color "Red1")) (t :underline t :inherit error)))
                :type "face")
                nil [18921 19156])
            ("flyspell-duplicate" variable
               (:default-value (quote ((((supports :underline (:style wave))) :underline (:style wave :color "DarkOrange")) (t :underline t :inherit warning)))
                :type "face")
                nil [19158 19457])
            ("flyspell-overlay" variable nil nil [19459 19488])
            ("define-minor-mode" code nil nil [19810 21317])
            ("turn-on-flyspell" function nil nil [21334 21424])
            ("turn-off-flyspell" function nil nil [21441 21534])
            ("custom-add-option" code nil nil [21536 21589])
            ("flyspell-buffers" variable nil nil [21966 21995])
            ("flyspell-minibuffer-p" function (:arguments ("buffer")) nil [22222 22389])
            ("flyspell-last-buffer" variable nil nil [22616 22713])
            ("flyspell-accept-buffer-local-defs" function (:arguments ("force")) nil [22715 23983])
            ("flyspell-hack-local-variables-hook" function nil nil [23985 24161])
            ("flyspell-kill-ispell-hook" function nil nil [24163 24348])
            ("add-hook" code nil nil [24520 24582])
            ("flyspell-mode-on" function nil nil [24809 26897])
            ("flyspell-delay-commands" function nil nil [27124 27343])
            ("flyspell-delay-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [27570 27928])
            ("flyspell-deplacement-commands" function nil nil [28155 28404])
            ("flyspell-deplacement-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [28631 28959])
            ("flyspell-word-cache-start" variable nil nil [29186 29225])
            ("flyspell-word-cache-end" variable nil nil [29226 29265])
            ("flyspell-word-cache-word" variable nil nil [29266 29305])
            ("flyspell-word-cache-result" variable (:default-value (quote _)) nil [29306 29344])
            ("make-variable-buffer-local" code nil nil [29345 29400])
            ("make-variable-buffer-local" code nil nil [29401 29454])
            ("make-variable-buffer-local" code nil nil [29455 29509])
            ("make-variable-buffer-local" code nil nil [29510 29566])
            ("flyspell-pre-buffer" variable nil nil [29943 30019])
            ("flyspell-pre-point" variable nil nil [30020 30094])
            ("flyspell-pre-column" variable nil nil [30095 30170])
            ("flyspell-pre-pre-buffer" variable nil nil [30171 30207])
            ("flyspell-pre-pre-point" variable nil nil [30208 30244])
            ("make-variable-buffer-local" code nil nil [30245 30293])
            ("flyspell-previous-command" variable nil nil [30535 30627])
            ("flyspell-pre-command-hook" function (:user-visible-flag t) nil [30854 31107])
            ("flyspell-mode-off" function nil nil [31349 32001])
            ("flyspell-check-pre-word-p" function nil nil [32228 34085])
            ("flyspell-changes" variable nil nil [34462 34491])
            ("make-variable-buffer-local" code nil nil [34492 34538])
            ("flyspell-after-change-function" function (:arguments ("start" "stop" "_len")) nil [34765 34937])
            ("flyspell-check-changed-word-p" function (:arguments ("start" "stop")) nil [35164 35662])
            ("flyspell-check-word-p" function nil nil [35889 37009])
            ("flyspell-debug-signal-no-check" function (:arguments ("msg" "obj")) nil [37236 37465])
            ("flyspell-debug-signal-pre-word-checked" function nil nil [37692 38150])
            ("flyspell-debug-signal-word-checked" function nil nil [38377 40782])
            ("flyspell-debug-signal-changed-checked" function nil nil [41009 41287])
            ("flyspell-post-command-hook" function (:user-visible-flag t) nil [42339 44434])
            ("flyspell-notify-misspell" function (:arguments ("word" "poss")) nil [44661 44896])
            ("flyspell-word-search-backward" function (:arguments ("word" "bound" "ignore-case")) nil [45123 46120])
            ("flyspell-word-search-forward" function (:arguments ("word" "bound")) nil [46347 47212])
            ("flyspell-word" variable nil nil [47214 47236])
            ("flyspell-word" function
               (:user-visible-flag t
                :arguments ("following" "known-misspelling"))
                nil [47520 53931])
            ("flyspell-math-tex-command-p" function nil nil [54458 54646])
            ("flyspell-tex-command-p" function (:arguments ("word")) nil [54873 55233])
            ("defalias" code nil nil [55235 55291])
            ("defalias" code nil nil [55292 55356])
            ("flyspell-get-word" function (:arguments ("following" "extra-otherchars")) nil [55583 58019])
            ("flyspell-small-region" function (:arguments ("beg" "end")) nil [58246 59066])
            ("flyspell-external-ispell-process" variable (:default-value (quote nil)) nil [59293 59380])
            ("flyspell-external-ispell-buffer" variable (:default-value (quote nil)) nil [59607 59651])
            ("flyspell-large-region-buffer" variable (:default-value (quote nil)) nil [59652 59693])
            ("flyspell-large-region-beg" variable (:default-value (point-min)) nil [59694 59740])
            ("flyspell-large-region-end" variable (:default-value (point-max)) nil [59741 59787])
            ("flyspell-external-point-words" function nil nil [60014 65115])
            ("flyspell-process-localwords" function (:arguments ("misspellings-buffer")) nil [65567 67009])
            ("flyspell-check-region-doublons" function (:arguments ("beg" "end")) nil [67186 67601])
            ("flyspell-large-region" function (:arguments ("beg" "end")) nil [67828 70562])
            ("flyspell-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [71254 71821])
            ("flyspell-buffer" function (:user-visible-flag t) nil [72063 72176])
            ("flyspell-old-buffer-error" variable nil nil [72403 72441])
            ("flyspell-old-pos-error" variable nil nil [72442 72477])
            ("flyspell-goto-next-error" function (:user-visible-flag t) nil [72704 73729])
            ("flyspell-overlay-p" function (:arguments ("o")) nil [73956 74094])
            ("flyspell-delete-region-overlays" function (:arguments ("beg" "end")) nil [74471 74624])
            ("flyspell-delete-all-overlays" function nil nil [74626 74771])
            ("flyspell-unhighlight-at" function (:arguments ("pos")) nil [74998 75404])
            ("flyspell-properties-at-p" function (:arguments ("pos")) nil [75781 76291])
            ("make-flyspell-overlay" function (:arguments ("beg" "end" "face" "mouse-face")) nil [76518 77726])
            ("flyspell-highlight-incorrect-region" function (:arguments ("beg" "end" "poss")) nil [77953 79108])
            ("flyspell-highlight-duplicate-region" function (:arguments ("beg" "end" "poss")) nil [79335 80038])
            ("flyspell-auto-correct-pos" variable nil nil [80265 80303])
            ("flyspell-auto-correct-region" variable nil nil [80304 80345])
            ("flyspell-auto-correct-ring" variable nil nil [80346 80385])
            ("flyspell-auto-correct-word" variable nil nil [80386 80425])
            ("make-variable-buffer-local" code nil nil [80426 80481])
            ("make-variable-buffer-local" code nil nil [80482 80540])
            ("make-variable-buffer-local" code nil nil [80541 80597])
            ("make-variable-buffer-local" code nil nil [80598 80654])
            ("flyspell-check-previous-highlighted-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80881 81961])
            ("flyspell-display-next-corrections" function (:arguments ("corrections")) nil [82188 82811])
            ("flyspell-abbrev-table" function nil nil [83038 83186])
            ("flyspell-define-abbrev" function (:arguments ("name" "expansion")) nil [83413 83573])
            ("flyspell-auto-correct-word" function (:user-visible-flag t) nil [83800 90515])
            ("flyspell-auto-correct-previous-pos" variable nil nil [90742 90851])
            ("flyspell-auto-correct-previous-hook" function (:user-visible-flag t) nil [91078 91475])
            ("flyspell-auto-correct-previous-word" function
               (:user-visible-flag t
                :arguments ("position"))
                nil [91702 93382])
            ("flyspell-correct-word" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [93610 93889])
            ("flyspell-correct-word-before-point" function
               (:user-visible-flag t
                :arguments ("event" "opoint"))
                nil [93891 95556])
            ("flyspell-do-correct" function (:arguments ("replace" "poss" "word" "cursor-location" "start" "end" "save")) nil [95779 97315])
            ("flyspell-adjust-cursor-point" function (:arguments ("save" "cursor-location" "old-max")) nil [97543 97861])
            ("flyspell-emacs-popup" function (:arguments ("event" "poss" "word")) nil [98088 99390])
            ("flyspell-maybe-correct-transposition" function (:arguments ("beg" "end" "poss")) nil [99617 100558])
            ("flyspell-maybe-correct-doubling" function (:arguments ("beg" "end" "poss")) nil [100560 101399])
            ("flyspell-already-abbrevp" function (:arguments ("table" "word")) nil [101626 101742])
            ("flyspell-change-abbrev" function (:arguments ("table" "old" "new")) nil [101969 102053])
            ("flyspell" package nil nil [102055 102074]))          
      :file "flyspell.el"
      :pointmax 102102
      :fsize 102101
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1488 . 1489) (symbol 1453 . 1470) (open-paren 1452 . 1453)))
    (semanticdb-table "semanticdb-table"
      :file "ispell.el"
      :fsize 177326
      :lastmodtime '(23661 22986 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("paragraphs" customgroup (:user-visible-flag t) nil [1007 1086])
            ("put" code nil nil [1088 1131])
            ("define-minor-mode" code nil nil [1132 3126])
            ("paragraph-start" variable (:default-value "\\|[ 	]*$") nil [3128 3928])
            ("put" code nil nil [3929 3981])
            ("paragraph-separate" variable (:default-value "[ 	]*$") nil [4316 4786])
            ("put" code nil nil [4787 4842])
            ("sentence-end-double-space" variable (:default-value t) nil [4844 5274])
            ("put" code nil nil [5275 5338])
            ("sentence-end-without-period" variable nil nil [5340 5758])
            ("put" code nil nil [5759 5824])
            ("sentence-end-without-space" variable (:default-value "。．？！") nil [5826 6184])
            ("put" code nil nil [6185 6248])
            ("sentence-end" variable nil nil [6250 6682])
            ("put" code nil nil [6683 6741])
            ("sentence-end-base" variable (:default-value "[.?!…‽][]\"'”’)}]*") nil [6743 6928])
            ("put" code nil nil [6929 6983])
            ("sentence-end" function nil nil [6985 8002])
            ("page-delimiter" variable (:default-value "^") nil [8004 8134])
            ("put" code nil nil [8135 8186])
            ("paragraph-ignore-fill-prefix" variable nil nil [8188 8421])
            ("put" code nil nil [8422 8488])
            ("forward-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8490 13713])
            ("backward-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13715 14279])
            ("mark-paragraph" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [14281 15308])
            ("kill-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15310 15573])
            ("backward-kill-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15575 15843])
            ("transpose-paragraphs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15845 16316])
            ("start-of-paragraph-text" function nil nil [16318 16840])
            ("end-of-paragraph-text" function nil nil [16842 17101])
            ("forward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17103 18519])
            ("repunctuate-sentences" function (:user-visible-flag t) nil [18521 18770])
            ("backward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18773 19001])
            ("kill-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19003 19239])
            ("backward-kill-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19241 19495])
            ("mark-end-of-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19497 19874])
            ("transpose-sentences" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19876 20339]))          
      :file "paragraphs.el"
      :pointmax 20369
      :fsize 20384
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Tools!emacs-26.2!share!emacs!26.2!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
