;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1249 1266])
            ("custom-define-hook" variable nil nil [1268 1417])
            ("custom-dont-initialize" variable nil nil [1419 1602])
            ("custom-current-group-alist" variable nil nil [1604 1717])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1747 2210])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2212 2787])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2789 3556])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3558 4336])
            ("custom-delayed-init-variables" variable nil nil [4338 4435])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4437 5561])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5563 8228])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8230 14484])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14512 17452])
            ("custom-current-group" function nil nil [17481 17570])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17572 18617])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18619 19782])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19784 20130])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20132 20534])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20553 21143])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21145 21856])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21858 22611])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22613 23064])
            ("defalias" code nil nil [23065 23121])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23123 23359])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23361 23511])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23513 23687])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23689 23985])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23987 24273])
            ("custom-variable-p" function (:arguments ("variable")) nil [24275 24708])
            ("define-obsolete-function-alias" code nil nil [24710 24785])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24787 25082])
            ("custom-load-recursion" variable nil nil [25225 25301])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25303 26562])
            ("custom-local-buffer" variable nil nil [26565 26885])
            ("put" code nil nil [26886 26931])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26933 27314])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27316 27740])
            ("custom-quote" function (:arguments ("sexp")) nil [27742 28080])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28082 29245])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29247 30402])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30404 31586])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [33413 33801])
            ("custom-theme-p" function (:arguments ("theme")) nil [33803 33912])
            ("custom-check-theme" function (:arguments ("theme")) nil [33914 34092])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34094 36290])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36292 37062])
            ("custom-set-variables" function (:arguments ("args")) nil [37065 37676])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37678 40353])
            ("custom--sort-vars-table" variable nil nil [40355 40387])
            ("custom--sort-vars-result" variable nil nil [40388 40421])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40423 41955])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41957 42541])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [43137 43758])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [43760 44248])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44250 44755])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44779 45126])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [45128 45886])
            ("custom--inhibit-theme-enable" variable nil nil [45888 46174])
            ("provide-theme" function (:arguments ("theme")) nil [46176 46574])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [46576 47196])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47198 50122])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [50124 50874])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50876 51141])
            ("custom-available-themes" function nil nil [51143 52023])
            ("custom-theme--load-path" function nil nil [52025 52344])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52391 53627])
            ("custom-enabled-themes" variable nil nil [53629 54939])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54941 55059])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [55061 56660])
            ("declare-function" code nil nil [56702 56796])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56798 57158])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [57160 57553])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [57555 58010])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [58012 58432])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [58649 59020])
            ("custom-reset-variables" function (:arguments ("args")) nil [59022 59363])
            ("custom" package nil nil [59379 59396]))          
      :file "custom.el.gz"
      :pointmax 59422
      :fsize 17341
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function (:arguments ("form")) nil [2807 3011])
            ("1value" function (:arguments ("form")) nil [3013 3251])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3253 3713])
            ("lambda" function (:arguments ("cdr")) nil [3715 4902])
            ("setq-local" function (:arguments ("var" "val")) nil [4904 5151])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5153 5594])
            ("push" function (:arguments ("newelt" "place")) nil [5596 6190])
            ("pop" function (:arguments ("place")) nil [6192 7049])
            ("when" function (:arguments ("cond" "body")) nil [7051 7339])
            ("unless" function (:arguments ("cond" "body")) nil [7341 7627])
            ("dolist" function (:arguments ("spec" "body")) nil [7629 9089])
            ("dotimes" function (:arguments ("spec" "body")) nil [9091 10556])
            ("declare" function (:arguments ("_specs")) nil [10558 11133])
            ("ignore-errors" function (:arguments ("body")) nil [11135 11442])
            ("gensym-counter" variable nil nil [11473 11576])
            ("gensym" function (:arguments ("prefix")) nil [11578 11898])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11900 12048])
            ("error" function (:arguments ("args")) nil [12105 12621])
            ("user-error" function (:arguments ("format" "args")) nil [12623 13283])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [13285 14198])
            ("frame-configuration-p" function (:arguments ("object")) nil [14312 14567])
            ("apply-partially" function (:arguments ("fun" "args")) nil [14569 14946])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [15140 15720])
            ("caar" function (:arguments ("x")) nil [15722 15849])
            ("cadr" function (:arguments ("x")) nil [15851 15978])
            ("cdar" function (:arguments ("x")) nil [15980 16107])
            ("cddr" function (:arguments ("x")) nil [16109 16236])
            ("caaar" function (:arguments ("x")) nil [16238 16389])
            ("caadr" function (:arguments ("x")) nil [16391 16542])
            ("cadar" function (:arguments ("x")) nil [16544 16695])
            ("caddr" function (:arguments ("x")) nil [16697 16848])
            ("cdaar" function (:arguments ("x")) nil [16850 17001])
            ("cdadr" function (:arguments ("x")) nil [17003 17154])
            ("cddar" function (:arguments ("x")) nil [17156 17307])
            ("cdddr" function (:arguments ("x")) nil [17309 17460])
            ("caaaar" function (:arguments ("x")) nil [17462 17633])
            ("caaadr" function (:arguments ("x")) nil [17635 17806])
            ("caadar" function (:arguments ("x")) nil [17808 17979])
            ("caaddr" function (:arguments ("x")) nil [17981 18152])
            ("cadaar" function (:arguments ("x")) nil [18154 18325])
            ("cadadr" function (:arguments ("x")) nil [18327 18498])
            ("caddar" function (:arguments ("x")) nil [18500 18671])
            ("cadddr" function (:arguments ("x")) nil [18673 18844])
            ("cdaaar" function (:arguments ("x")) nil [18846 19017])
            ("cdaadr" function (:arguments ("x")) nil [19019 19190])
            ("cdadar" function (:arguments ("x")) nil [19192 19363])
            ("cdaddr" function (:arguments ("x")) nil [19365 19536])
            ("cddaar" function (:arguments ("x")) nil [19538 19709])
            ("cddadr" function (:arguments ("x")) nil [19711 19882])
            ("cdddar" function (:arguments ("x")) nil [19884 20055])
            ("cddddr" function (:arguments ("x")) nil [20057 20228])
            ("last" function (:arguments ("list" "n")) nil [20230 20647])
            ("butlast" function (:arguments ("list" "n")) nil [20649 20877])
            ("nbutlast" function (:arguments ("list" "n")) nil [20879 21156])
            ("zerop" function (:arguments ("number")) nil [21158 21388])
            ("delete-dups" function (:arguments ("list")) nil [21390 22177])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [22244 22702])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [22704 24711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [24713 25530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [25570 26370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [26372 26694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [26696 26964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [26966 27401])
            ("assoc-delete-all" function (:arguments ("key" "alist")) nil [27403 27897])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [27899 28383])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [28385 28878])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [28880 29493])
            ("remove" function (:arguments ("elt" "seq")) nil [29495 29848])
            ("remq" function (:arguments ("elt" "list")) nil [29850 30181])
            ("kbd" function (:arguments ("keys")) nil [30206 30646])
            ("put" code nil nil [30647 30665])
            ("undefined" function (:user-visible-flag t) nil [30667 31195])
            ("put" code nil nil [31290 31325])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [31327 31891])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [31893 32545])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [32547 34608])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [34610 35290])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [35292 35762])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [35816 36416])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [36418 36884])
            ("keymap-canonicalize" function (:arguments ("map")) nil [36886 38755])
            ("put" code nil nil [38757 38814])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [38816 39191])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [39222 40142])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [40144 40948])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40950 41146])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [41148 41377])
            ("key-substitution-in-progress" variable nil nil [41433 41526])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [41528 42910])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42912 44575])
            ("global-map" variable nil nil [44724 44898])
            ("esc-map" variable nil nil [44900 45040])
            ("ctl-x-map" variable nil nil [45042 45177])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [45179 45257])
            ("defalias" code nil nil [45258 45296])
            ("define-key" code nil nil [45297 45339])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [45341 45413])
            ("defalias" code nil nil [45414 45452])
            ("define-key" code nil nil [45453 45495])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [45535 45590])
            ("listify-key-sequence" function (:arguments ("key")) nil [45592 45830])
            ("eventp" function (:arguments ("obj")) nil [45832 46033])
            ("event-modifiers" function (:arguments ("event")) nil [46035 47329])
            ("event-basic-type" function (:arguments ("event")) nil [47331 48099])
            ("mouse-movement-p" function (:arguments ("object")) nil [48101 48234])
            ("mouse-event-p" function (:arguments ("object")) nil [48236 48454])
            ("event-start" function (:arguments ("event")) nil [48456 49616])
            ("event-end" function (:arguments ("event")) nil [49618 49936])
            ("event-click-count" function (:arguments ("event")) nil [49938 50148])
            ("event-line-count" function (:arguments ("event")) nil [50150 50349])
            ("posnp" function (:arguments ("obj")) nil [50406 51054])
            ("posn-window" function (:arguments ("position")) nil [51088 51270])
            ("posn-area" function (:arguments ("position")) nil [51272 51596])
            ("posn-point" function (:arguments ("position")) nil [51598 52064])
            ("posn-set-point" function (:arguments ("position")) nil [52066 52386])
            ("posn-x-y" function (:arguments ("position")) nil [52388 52641])
            ("declare-function" code nil nil [52643 52709])
            ("posn-col-row" function (:arguments ("position")) nil [52711 54529])
            ("posn-actual-col-row" function (:arguments ("position")) nil [54531 55119])
            ("posn-timestamp" function (:arguments ("position")) nil [55121 55309])
            ("posn-string" function (:arguments ("position")) nil [55311 55670])
            ("posn-image" function (:arguments ("position")) nil [55672 55912])
            ("posn-object" function (:arguments ("position")) nil [55914 56283])
            ("posn-object-x-y" function (:arguments ("position")) nil [56285 56572])
            ("posn-object-width-height" function (:arguments ("position")) nil [56574 56834])
            ("make-obsolete" code nil nil [56877 56943])
            ("make-obsolete" code nil nil [56944 56993])
            ("make-obsolete" code nil nil [57008 57081])
            ("make-obsolete" code nil nil [57082 57155])
            ("make-obsolete" code nil nil [57156 57231])
            ("make-obsolete" code nil nil [57232 57305])
            ("make-obsolete" code nil nil [57306 57379])
            ("make-obsolete" code nil nil [57380 57455])
            ("log10" function (:arguments ("x")) nil [57457 57566])
            ("defalias" code nil nil [57614 57648])
            ("make-obsolete" code nil nil [57649 57703])
            ("defalias" code nil nil [57704 57740])
            ("make-obsolete" code nil nil [57741 57797])
            ("set-advertised-calling-convention" code nil nil [57799 57900])
            ("set-advertised-calling-convention" code nil nil [57901 57969])
            ("set-advertised-calling-convention" code nil nil [57970 58041])
            ("set-advertised-calling-convention" code nil nil [58042 58127])
            ("make-obsolete-variable" code nil nil [58190 58254])
            ("make-obsolete-variable" code nil nil [58255 58338])
            ("make-obsolete-variable" code nil nil [58339 58411])
            ("make-obsolete-variable" code nil nil [58412 58488])
            ("make-obsolete-variable" code nil nil [58489 58546])
            ("make-obsolete" code nil nil [58547 58603])
            ("make-obsolete" code nil nil [58604 58664])
            ("make-obsolete" code nil nil [58666 58720])
            ("make-obsolete" code nil nil [58721 58777])
            ("make-obsolete-variable" code nil nil [58779 58903])
            ("define-obsolete-variable-alias" code nil nil [58942 59029])
            ("define-obsolete-variable-alias" code nil nil [59031 59124])
            ("define-obsolete-variable-alias" code nil nil [59125 59218])
            ("make-obsolete-variable" code nil nil [59464 59528])
            ("make-obsolete-variable" code nil nil [59530 59588])
            ("defvaralias" code nil nil [59590 59647])
            ("defalias" code nil nil [59720 59764])
            ("defalias" code nil nil [59765 59809])
            ("defalias" code nil nil [59810 59843])
            ("defalias" code nil nil [59844 59877])
            ("defalias" code nil nil [59878 59914])
            ("defalias" code nil nil [59915 59950])
            ("defalias" code nil nil [59951 59977])
            ("defalias" code nil nil [59978 60004])
            ("defalias" code nil nil [60005 60027])
            ("defalias" code nil nil [60053 60092])
            ("defalias" code nil nil [60093 60147])
            ("defalias" code nil nil [60148 60218])
            ("defalias" code nil nil [60219 60291])
            ("defalias" code nil nil [60292 60335])
            ("defalias" code nil nil [60336 60380])
            ("defalias" code nil nil [60381 60414])
            ("defalias" code nil nil [60415 60448])
            ("defalias" code nil nil [60480 60523])
            ("defalias" code nil nil [60524 60573])
            ("defalias" code nil nil [60575 60628])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [60667 62796])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [62798 64466])
            ("letrec" function (:arguments ("binders" "body")) nil [64468 65097])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [65099 66509])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [66511 68350])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [68352 71719])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [71722 73041])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [73043 74351])
            ("delay-mode-hooks" variable nil nil [74373 74467])
            ("delayed-mode-hooks" variable nil nil [74468 74549])
            ("make-variable-buffer-local" code nil nil [74550 74598])
            ("put" code nil nil [74599 74641])
            ("delayed-after-hook-functions" variable nil nil [74643 74786])
            ("make-variable-buffer-local" code nil nil [74787 74845])
            ("change-major-mode-after-body-hook" variable nil nil [74847 74961])
            ("after-change-major-mode-hook" variable nil nil [74963 75065])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [75067 76420])
            ("delay-mode-hooks" function (:arguments ("body")) nil [76422 76821])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [76882 77223])
            ("derived-mode-p" function (:arguments ("modes")) nil [77225 77456])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [77647 77840])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [77842 80527])
            ("autoloadp" function (:arguments ("object")) nil [80549 80651])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [81135 81898])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [81900 83396])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [83398 84804])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [84829 86154])
            ("process-lines" function (:arguments ("program" "args")) nil [86156 86761])
            ("process-live-p" function (:arguments ("process")) nil [86763 87076])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [87096 87566])
            ("process-kill-buffer-query-function" function nil nil [87568 87987])
            ("add-hook" code nil nil [87989 88064])
            ("process-get" function (:arguments ("process" "propname")) nil [88095 88307])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [88309 88548])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [88588 88638])
            ("read-key-delay" variable (:default-value 0.01) nil [88640 88668])
            ("read-key" function (:arguments ("prompt")) nil [88717 91941])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [91943 92280])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [92282 95018])
            ("read-number" function (:arguments ("prompt" "default")) nil [95020 96090])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [96092 97831])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [97833 101167])
            ("declare-function" code nil nil [101207 101286])
            ("y-or-n-p" function (:arguments ("prompt")) nil [101288 104849])
            ("atomic-change-group" function (:arguments ("body")) nil [104880 106086])
            ("prepare-change-group" function (:arguments ("buffer")) nil [106088 107564])
            ("activate-change-group" function (:arguments ("handle")) nil [107566 107804])
            ("accept-change-group" function (:arguments ("handle")) nil [107806 108097])
            ("cancel-change-group" function (:arguments ("handle")) nil [108099 109490])
            ("define-obsolete-function-alias" code nil nil [109548 109630])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [109632 111184])
            ("copy-overlay" function (:arguments ("o")) nil [111213 111787])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [111789 112797])
            ("suspend-hook" variable nil nil [112819 112903])
            ("suspend-resume-hook" variable nil nil [112905 113003])
            ("temp-buffer-show-hook" variable nil nil [113005 113221])
            ("temp-buffer-setup-hook" variable nil nil [113223 113454])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [113456 113831])
            ("buffer-narrowed-p" function nil nil [113864 113998])
            ("find-tag-default-bounds" function nil nil [114000 114254])
            ("find-tag-default" function nil nil [114256 114522])
            ("find-tag-default-as-regexp" function nil nil [114524 114959])
            ("find-tag-default-as-symbol-regexp" function nil nil [114961 115520])
            ("play-sound" function (:arguments ("sound")) nil [115522 116341])
            ("declare-function" code nil nil [116343 116399])
            ("shell-quote-argument" function (:arguments ("argument")) nil [116401 118735])
            ("string-to-list" function (:arguments ("string")) nil [118737 118836])
            ("string-to-vector" function (:arguments ("string")) nil [118838 118938])
            ("string-or-null-p" function (:arguments ("object")) nil [118940 119077])
            ("booleanp" function (:arguments ("object")) nil [119079 119237])
            ("special-form-p" function (:arguments ("object")) nil [119239 119482])
            ("macrop" function (:arguments ("object")) nil [119484 119714])
            ("field-at-pos" function (:arguments ("pos")) nil [119716 119986])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [119988 120351])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [120353 121163])
            ("yank-handled-properties" variable nil nil [121270 121302])
            ("yank-excluded-properties" variable nil nil [121303 121336])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [121338 122211])
            ("yank-undo-function" variable nil nil [122213 122240])
            ("insert-for-yank" function (:arguments ("string")) nil [122242 122723])
            ("insert-for-yank-1" function (:arguments ("string")) nil [122725 123757])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [123759 124244])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [124246 124932])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [124934 125246])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [125375 125813])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [125851 126835])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [126837 127329])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [127331 128972])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [128974 129523])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [129525 130715])
            ("track-mouse" function (:arguments ("body")) nil [130770 131076])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [131078 131466])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [131468 131988])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [131990 132550])
            ("with-selected-window" function (:arguments ("window" "body")) nil [132552 133690])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [133692 134433])
            ("save-window-excursion" function (:arguments ("body")) nil [134435 135254])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [135256 136651])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [136704 139157])
            ("with-temp-file" function (:arguments ("file" "body")) nil [139159 139854])
            ("with-temp-message" function (:arguments ("message" "body")) nil [139856 140783])
            ("with-temp-buffer" function (:arguments ("body")) nil [140785 141344])
            ("with-silent-modifications" function (:arguments ("body")) nil [141346 142336])
            ("with-output-to-string" function (:arguments ("body")) nil [142338 142783])
            ("with-local-quit" function (:arguments ("body")) nil [142785 143540])
            ("setq" code nil nil [143602 143748])
            ("while-no-input" function (:arguments ("body")) nil [143750 144250])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [144252 144805])
            ("define-obsolete-function-alias" code nil nil [144807 144902])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [144904 145841])
            ("combine-after-change-calls" function (:arguments ("body")) nil [145843 146538])
            ("with-case-table" function (:arguments ("table" "body")) nil [146540 147061])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [147063 147488])
            ("save-match-data-internal" variable nil nil [147522 147555])
            ("save-match-data" function (:arguments ("body")) nil [147813 148493])
            ("match-string" function (:arguments ("num" "string")) nil [148495 149140])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [149142 149866])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [149869 150518])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [150521 151792])
            ("looking-at-p" function (:arguments ("regexp")) nil [151794 151972])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [151974 152194])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [152196 154106])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [154128 154481])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [154743 157859])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [157861 158541])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [158543 159179])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [159213 159617])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [159619 162300])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [162303 162698])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [162700 163109])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [163111 163894])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [163896 164131])
            ("load-history-regexp" function (:arguments ("file")) nil [164172 164808])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [164810 165246])
            ("put" code nil nil [165248 165294])
            ("eval-after-load" function (:arguments ("file" "form")) nil [165295 169177])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [169179 169554])
            ("after-load-functions" variable nil nil [169556 169729])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [169731 171298])
            ("eval-next-after-load" function (:arguments ("file")) nil [171300 171600])
            ("display-delayed-warnings" function nil nil [171604 171871])
            ("collapse-delayed-warnings" function nil nil [171873 172552])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [172672 173012])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [173014 173269])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [173298 173641])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [173643 173888])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [173912 174548])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [174550 174870])
            ("syntax-after" function (:arguments ("pos")) nil [174872 175245])
            ("syntax-class" function (:arguments ("syntax")) nil [175247 175599])
            ("word-move-empty-char-table" variable nil nil [175630 175800])
            ("forward-word-strictly" function (:arguments ("arg")) nil [175802 176540])
            ("backward-word-strictly" function (:arguments ("arg")) nil [176542 177124])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177142 177725])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177740 178289])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [178310 178792])
            ("text-clone--maintaining" variable nil nil [178814 178850])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [178852 180918])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [180920 183168])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [183276 184854])
            ("backtrace--print-frame" function (:arguments ("evald" "func" "args" "flags")) nil [184858 185254])
            ("backtrace" function nil nil [185256 185527])
            ("backtrace-frames" function (:arguments ("base")) nil [185529 185882])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [185884 186684])
            ("called-interactively-p-functions" variable nil nil [186688 187105])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [187107 187192])
            ("called-interactively-p" function (:arguments ("kind")) nil [187194 191375])
            ("interactive-p" function nil nil [191377 192460])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [192462 192807])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [192809 193117])
            ("define-obsolete-function-alias" code nil nil [193119 193206])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [193208 195984])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [196567 197334])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [197336 199075])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [199077 199576])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [199578 199695])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [199697 201373])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [201375 201530])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [201532 202636])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [202673 202832])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [202835 204369])
            ("version-to-list" function (:arguments ("ver")) nil [204372 207155])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [207157 207988])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [207991 208790])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [208793 209578])
            ("version-list-not-zero" function (:arguments ("lst")) nil [209580 209890])
            ("version<" function (:arguments ("v1" "v2")) nil [209893 210397])
            ("version<=" function (:arguments ("v1" "v2")) nil [210399 210917])
            ("version=" function (:arguments ("v1" "v2")) nil [210919 211413])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [211415 211792])
            ("package--description-file" function (:arguments ("dir")) nil [211794 212125])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [212150 212500])
            ("definition-prefixes" variable (:default-value (make-hash-table :test (quote equal))) nil [212515 213216])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [213218 213440])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [213442 213504])
            ("when" code nil nil [213656 213781])
            ("unmsys--file-name" function (:arguments ("file")) nil [213914 214401]))          
      :file "subr.el.gz"
      :pointmax 214426
      :fsize 62889
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1520])
            ("cl-defmethod" code nil nil [1522 1921])
            ("window-system-default-frame-alist" variable nil nil [1923 2370])
            ("display-format-alist" variable nil nil [2372 2624])
            ("initial-frame-alist" variable nil nil [2816 4049])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4051 4756])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4758 5505])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5507 5803])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5805 6065])
            ("handle-move-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6067 6317])
            ("frame-initial-frame" variable nil nil [6813 6845])
            ("frame-initial-frame-alist" variable nil nil [6924 6958])
            ("frame-initial-geometry-arguments" variable nil nil [6960 7005])
            ("frame-initialize" function nil nil [7194 8726])
            ("frame-notice-user-settings" variable (:default-value t) nil [8728 8837])
            ("declare-function" code nil nil [8839 8898])
            ("declare-function" code nil nil [8899 8971])
            ("defalias" code nil nil [8973 9023])
            ("frame-notice-user-settings" function nil nil [9220 20335])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [20337 20538])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20605 21780])
            ("get-other-frame" function nil nil [21782 22040])
            ("next-multiframe-window" function (:user-visible-flag t) nil [22042 22300])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [22302 22566])
            ("window-system-for-display" function (:arguments ("display")) nil [22568 23063])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [23065 23334])
            ("declare-function" code nil nil [23336 23393])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [23395 24747])
            ("make-frame-command" function (:user-visible-flag t) nil [24749 25059])
            ("before-make-frame-hook" variable nil nil [25061 25158])
            ("after-make-frame-functions" variable nil nil [25160 25326])
            ("after-setting-font-hook" variable nil nil [25328 25424])
            ("define-obsolete-function-alias" code nil nil [25454 25516])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [25518 25628])
            ("x-display-name" variable nil nil [25630 25653])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25655 29566])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29568 29867])
            ("minibuffer-frame-list" function nil nil [29869 30062])
            ("get-device-terminal" function (:arguments ("device")) nil [30114 30867])
            ("frames-on-display-list" function (:arguments ("device")) nil [30869 31311])
            ("framep-on-display" function (:arguments ("terminal")) nil [31313 31752])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31754 32615])
            ("declare-function" code nil nil [32617 32688])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32690 33800])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33802 34912])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34914 35144])
            ("suspend-frame" function (:user-visible-flag t) nil [35146 35623])
            ("make-frame-names-alist" function nil nil [35625 36031])
            ("frame-name-history" variable nil nil [36033 36064])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36065 36910])
            ("frame-background-mode" variable nil nil [36937 37613])
            ("declare-function" code nil nil [37615 37709])
            ("declare-function" code nil nil [37754 37824])
            ("inhibit-frame-set-background-mode" variable nil nil [37826 37872])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37874 40772])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [40774 41290])
            ("current-frame-configuration" function nil nil [41321 41917])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41919 43914])
            ("frame-height" function (:arguments ("frame")) nil [44009 44675])
            ("frame-width" function (:arguments ("frame")) nil [44677 44882])
            ("defalias" code nil nil [44884 44943])
            ("defalias" code nil nil [44944 44993])
            ("defalias" code nil nil [44994 45045])
            ("frame-inner-width" function (:arguments ("frame")) nil [45047 45297])
            ("frame-inner-height" function (:arguments ("frame")) nil [45299 45552])
            ("frame-outer-width" function (:arguments ("frame")) nil [45554 45811])
            ("frame-outer-height" function (:arguments ("frame")) nil [45813 46072])
            ("declare-function" code nil nil [46074 46179])
            ("define-obsolete-function-alias" code nil nil [46181 46254])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [46256 49572])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [49574 49825])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49827 50572])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50574 51319])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51321 51807])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51809 52275])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [52277 52659])
            ("define-minor-mode" code nil nil [52661 53541])
            ("define-minor-mode" code nil nil [53543 54384])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [54386 54762])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [54764 55486])
            ("declare-function" code nil nil [55488 55550])
            ("declare-function" code nil nil [55551 55617])
            ("declare-function" code nil nil [55618 55682])
            ("frame-geometry" function (:arguments ("frame")) nil [55684 58163])
            ("frame--size-history" function (:arguments ("frame")) nil [58165 58993])
            ("declare-function" code nil nil [58995 59059])
            ("declare-function" code nil nil [59060 59128])
            ("declare-function" code nil nil [59129 59195])
            ("frame-edges" function (:arguments ("frame" "type")) nil [59197 60183])
            ("declare-function" code nil nil [60185 60248])
            ("declare-function" code nil nil [60249 60308])
            ("declare-function" code nil nil [60309 60370])
            ("mouse-absolute-pixel-position" function nil nil [60372 60922])
            ("declare-function" code nil nil [60924 60995])
            ("declare-function" code nil nil [60996 61069])
            ("declare-function" code nil nil [61070 61139])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [61141 61642])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [61644 62334])
            ("frame-monitor-attribute" function (:arguments ("attribute" "frame" "x" "y")) nil [62336 63678])
            ("frame-monitor-geometry" function (:arguments ("frame" "x" "y")) nil [63680 64491])
            ("frame-monitor-workarea" function (:arguments ("frame" "x" "y")) nil [64493 65298])
            ("declare-function" code nil nil [65300 65368])
            ("declare-function" code nil nil [65369 65441])
            ("declare-function" code nil nil [65442 65512])
            ("frame-list-z-order" function (:arguments ("display")) nil [65514 66306])
            ("declare-function" code nil nil [66308 66383])
            ("declare-function" code nil nil [66384 66463])
            ("declare-function" code nil nil [66464 66541])
            ("frame-restack" function (:arguments ("frame1" "frame2" "above")) nil [66543 67904])
            ("frame-size-changed-p" function (:arguments ("frame")) nil [67906 69068])
            ("declare-function" code nil nil [69555 69598])
            ("display-mouse-p" function (:arguments ("display")) nil [69600 70391])
            ("display-popup-menus-p" function (:arguments ("display")) nil [70393 70679])
            ("display-graphic-p" function (:arguments ("display")) nil [70681 71138])
            ("display-images-p" function (:arguments ("display")) nil [71140 71418])
            ("defalias" code nil nil [71420 71472])
            ("defalias" code nil nil [71473 71524])
            ("display-selections-p" function (:arguments ("display")) nil [71526 72154])
            ("declare-function" code nil nil [72156 72222])
            ("display-screens" function (:arguments ("display")) nil [72224 72613])
            ("declare-function" code nil nil [72615 72686])
            ("display-pixel-height" function (:arguments ("display")) nil [72688 73421])
            ("declare-function" code nil nil [73423 73493])
            ("display-pixel-width" function (:arguments ("display")) nil [73495 74223])
            ("display-mm-dimensions-alist" variable nil nil [74225 74843])
            ("declare-function" code nil nil [74845 74913])
            ("display-mm-height" function (:arguments ("display")) nil [74915 75794])
            ("declare-function" code nil nil [75796 75863])
            ("display-mm-width" function (:arguments ("display")) nil [75865 76740])
            ("declare-function" code nil nil [76742 76814])
            ("display-backing-store" function (:arguments ("display")) nil [76919 77437])
            ("declare-function" code nil nil [77439 77508])
            ("display-save-under" function (:arguments ("display")) nil [77510 77907])
            ("declare-function" code nil nil [77909 77974])
            ("display-planes" function (:arguments ("display")) nil [77976 78417])
            ("declare-function" code nil nil [78419 78489])
            ("display-color-cells" function (:arguments ("display")) nil [78491 78936])
            ("declare-function" code nil nil [78938 79009])
            ("display-visual-class" function (:arguments ("display")) nil [79011 79601])
            ("declare-function" code nil nil [79603 79689])
            ("declare-function" code nil nil [79690 79779])
            ("declare-function" code nil nil [79780 79868])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [79870 82395])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [82427 84297])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [84299 85555])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [85558 87187])
            ("define-obsolete-variable-alias" code nil nil [87232 87318])
            ("window-divider" customgroup (:user-visible-flag t) nil [87343 87446])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [87448 88312])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [88314 88444])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [88446 89096])
            ("window-divider-default-right-width" variable (:default-value 6) nil [89098 89739])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [89741 91033])
            ("define-minor-mode" code nil nil [91035 91615])
            ("blink-cursor-idle-timer" variable nil nil [91638 91813])
            ("blink-cursor-timer" variable nil nil [91815 91977])
            ("cursor" customgroup (:user-visible-flag t) nil [91979 92064])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [92066 92388])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [92390 92638])
            ("blink-cursor-blinks" variable (:default-value 10) nil [92640 92850])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [92852 92965])
            ("blink-cursor--start-idle-timer" function nil nil [92967 93515])
            ("blink-cursor--start-timer" function nil nil [93517 93802])
            ("blink-cursor-start" function nil nil [93804 94407])
            ("blink-cursor-timer-function" function nil nil [94409 95065])
            ("blink-cursor-end" function nil nil [95068 95463])
            ("blink-cursor-suspend" function nil nil [95465 95820])
            ("blink-cursor-check" function nil nil [95822 96157])
            ("define-obsolete-variable-alias" code nil nil [96159 96231])
            ("define-minor-mode" code nil nil [96233 97349])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [97388 98390])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [98392 99827])
            ("define-key" code nil nil [99849 99897])
            ("define-key" code nil nil [99898 99947])
            ("define-key" code nil nil [99948 99990])
            ("define-key" code nil nil [99991 100032])
            ("define-key" code nil nil [100033 100087])
            ("define-key" code nil nil [100088 100148])
            ("define-key" code nil nil [100149 100209])
            ("define-obsolete-variable-alias" code nil nil [100259 100341])
            ("make-variable-buffer-local" code nil nil [100343 100397])
            ("make-obsolete-variable" code nil nil [100424 100518])
            ("mapc" code nil nil [100919 101506])
            ("frame" package nil nil [101508 101524]))          
      :file "frame.el.gz"
      :pointmax 101549
      :fsize 25540
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [942 973])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [998 1434])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [1458 8955])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [8957 9592])
            ("custom-set-faces" function (:arguments ("args")) nil [9613 10035])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [10037 12340])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [12502 12858])
            ("custom-reset-faces" function (:arguments ("args")) nil [12860 13176])
            ("cus-face" package nil nil [13192 13211]))          
      :file "cus-face.el.gz"
      :pointmax 13239
      :fsize 3966
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [2861 2959])
            ("defvar-local" code nil nil [2961 3073])
            ("global-hl-line-overlays" variable nil nil [3075 3277])
            ("hl-line" customgroup (:user-visible-flag t) nil [3279 3373])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3375 3524])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3526 3955])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3957 4393])
            ("global-hl-line-sticky-flag" variable nil nil [4395 4764])
            ("hl-line-range-function" variable nil nil [4766 5153])
            ("hl-line-overlay-buffer" variable nil nil [5155 5257])
            ("define-minor-mode" code nil nil [5274 6700])
            ("hl-line-make-overlay" function nil nil [6702 6884])
            ("hl-line-highlight" function nil nil [6886 7324])
            ("hl-line-unhighlight" function nil nil [7326 7474])
            ("hl-line-maybe-unhighlight" function nil nil [7476 8181])
            ("define-minor-mode" code nil nil [8198 9352])
            ("global-hl-line-highlight" function nil nil [9354 9954])
            ("global-hl-line-highlight-all" function nil nil [9956 10204])
            ("global-hl-line-unhighlight" function nil nil [10206 10382])
            ("global-hl-line-maybe-unhighlight" function nil nil [10384 11051])
            ("global-hl-line-unhighlight-all" function nil nil [11053 11347])
            ("hl-line-move" function (:arguments ("overlay")) nil [11349 11891])
            ("hl-line-unload-function" function nil nil [11893 12155])
            ("hl-line" package nil nil [12157 12175]))          
      :file "hl-line.el.gz"
      :pointmax 12202
      :fsize 3439
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("paren-showing" customgroup (:user-visible-flag t) nil [1054 1183])
            ("show-paren-style" variable (:default-value (quote parenthesis)) nil [1185 1575])
            ("show-paren-delay" variable (:default-value 0.125) nil [1577 2034])
            ("show-paren-priority" variable (:default-value 1000) nil [2036 2152])
            ("show-paren-ring-bell-on-mismatch" variable nil nil [2154 2291])
            ("show-paren-when-point-inside-paren" variable nil nil [2293 2504])
            ("show-paren-when-point-in-periphery" variable nil nil [2506 2737])
            ("show-paren-highlight-openparen" variable (:default-value t) nil [2739 3011])
            ("show-paren--idle-timer" variable nil nil [3013 3048])
            ("show-paren--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (delete-overlay ol) ol)) nil [3049 3202])
            ("show-paren--overlay-1" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (delete-overlay ol) ol)) nil [3203 3358])
            ("define-minor-mode" code nil nil [3376 4302])
            ("show-paren--unescaped-p" function (:arguments ("pos")) nil [4304 4486])
            ("show-paren--categorize-paren" function (:arguments ("pos")) nil [4488 5045])
            ("show-paren--locate-near-paren" function nil nil [5047 6275])
            ("show-paren-data-function" variable (:default-value (function show-paren--default)) nil [6277 6637])
            ("show-paren--default" function nil nil [6639 8733])
            ("show-paren-function" function nil nil [8735 11708])
            ("paren" package nil nil [11710 11726]))          
      :file "paren.el.gz"
      :pointmax 11751
      :fsize 3789
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [902 1354])
            ("term-file-aliases" variable (:default-value (quote (("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))) nil [1356 1940])
            ("declare-function" code nil nil [1942 2014])
            ("help-xref-stack-item" variable nil nil [2016 2045])
            ("face-name-history" variable nil nil [2047 2228])
            ("font-selection" customgroup (:user-visible-flag t) nil [2399 2481])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [2484 3266])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [3440 5433])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [5479 6543])
            ("face-list" function nil nil [6718 6819])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6821 7522])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7524 7786])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [7788 9039])
            ("facep" function (:arguments ("face")) nil [9219 9368])
            ("check-face" function (:arguments ("face")) nil [9371 9525])
            ("face-id" function (:arguments ("face" "_frame")) nil [9706 10048])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [10050 10467])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [10470 11183])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [11186 11530])
            ("face-list-p" function (:arguments ("face-or-list")) nil [11533 11962])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [12160 14052])
            ("declare-function" code nil nil [14055 14150])
            ("declare-function" code nil nil [14152 14266])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [14268 14977])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [14980 15343])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [15346 15942])
            ("face-name" function (:arguments ("face")) nil [16126 16218])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [16221 16687])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [16689 18503])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [18505 19093])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [19096 19377])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [19379 20435])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [20437 21493])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [21495 22515])
            ("defalias" code nil nil [22518 22566])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [22569 23022])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [23025 23459])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [23462 23981])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [23984 24488])
            ("face-documentation" function (:arguments ("face")) nil [24664 25086])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [25089 25277])
            ("defalias" code nil nil [25280 25327])
            ("defalias" code nil nil [25328 25383])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [25564 33275])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33277 33728])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33731 34131])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34134 34591])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34594 34999])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [35002 35499])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35502 35928])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36134 36603])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36606 37075])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [37078 37683])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37686 38455])
            ("define-obsolete-function-alias" code nil nil [38457 38570])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38573 39146])
            ("define-obsolete-function-alias" code nil nil [39148 39269])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [39271 39687])
            ("define-obsolete-function-alias" code nil nil [39689 39760])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [39763 40199])
            ("define-obsolete-function-alias" code nil nil [40201 40276])
            ("defalias" code nil nil [40279 40335])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [40338 41138])
            ("crm-separator" variable nil nil [41324 41346])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [41362 44220])
            ("x-bitmap-file-path" variable nil nil [44279 44306])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [44308 46997])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [47000 47770])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [47773 47920])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [47923 48938])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [48941 49558])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [49719 52060])
            ("declare-function" code nil nil [52062 52108])
            ("declare-function" code nil nil [52109 52200])
            ("read-face-font" function (:arguments ("face" "frame")) nil [52202 52574])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [52577 53005])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [53007 53952])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [53954 54743])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54914 55077])
            ("help-xref-stack" variable nil nil [55206 55230])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [55231 58266])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [58269 62402])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [62680 63270])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [63273 65075])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [65078 66573])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply (quote append) (mapcar (lambda (x) (list (car x) (quote unspecified))) face-attribute-name-alist)))
                nil [66753 66912])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [66914 67987])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [67989 70092])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [70094 71807])
            ("face-spec-set-2" function (:arguments ("face" "frame" "face-attrs")) nil [71809 72263])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [72265 73339])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [73341 73536])
            ("face-default-spec" function (:arguments ("face")) nil [73538 73726])
            ("face-user-default-spec" function (:arguments ("face")) nil [73728 74011])
            ("defined-colors" function (:arguments ("frame")) nil [74269 74727])
            ("defalias" code nil nil [74728 74772])
            ("defined-colors-with-face-attributes" function (:arguments ("frame")) nil [74774 75399])
            ("readable-foreground-color" function (:arguments ("color")) nil [75401 75828])
            ("declare-function" code nil nil [75830 75900])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [75902 76569])
            ("defalias" code nil nil [76570 76616])
            ("declare-function" code nil nil [76618 76685])
            ("color-values" function (:arguments ("color" "frame")) nil [76687 77606])
            ("defalias" code nil nil [77608 77648])
            ("declare-function" code nil nil [77650 77717])
            ("display-color-p" function (:arguments ("display")) nil [77719 78121])
            ("defalias" code nil nil [78122 78168])
            ("declare-function" code nil nil [78170 78240])
            ("display-grayscale-p" function (:arguments ("display")) nil [78242 78675])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [78677 81542])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [81544 82550])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [82552 84085])
            ("foreground-color-at-point" function nil nil [84087 84245])
            ("background-color-at-point" function nil nil [84247 84405])
            ("declare-function" code nil nil [84576 84621])
            ("declare-function" code nil nil [84622 84715])
            ("declare-function" code nil nil [84716 84810])
            ("declare-function" code nil nil [84811 84865])
            ("x-display-name" variable nil nil [84866 84889])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [84891 85786])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [85789 86795])
            ("declare-function" code nil nil [86797 86847])
            ("declare-function" code nil nil [86848 86914])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [86916 88117])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [88119 89516])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [89518 90194])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [90197 90956])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [90958 91523])
            ("tty-setup-hook" variable nil nil [91525 91757])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [91759 93332])
            ("tty-set-up-initial-frame-faces" function nil nil [93438 93595])
            ("basic-faces" customgroup (:user-visible-flag t) nil [93766 93841])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [93843 93975])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [93977 94056])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [94058 94423])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [94425 94532])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [94534 94724])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [94726 94830])
            ("fixed-pitch-serif" variable
               (:default-value (quote ((t :family "Monospace Serif")))
                :type "face")
                nil [94832 94960])
            ("variable-pitch" variable
               (:default-value (quote ((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif")))
                :type "face")
                nil [94962 95442])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [95444 95882])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [95884 96351])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [96353 96603])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [96605 97147])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [97309 98235])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [98237 98785])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [98787 99064])
            ("line-number" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [99102 99513])
            ("line-number-current-line" variable
               (:default-value (quote ((t :inherit line-number)))
                :type "face")
                nil [99515 100064])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100066 100496])
            ("homoglyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100498 100706])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [100708 100968])
            ("nobreak-hyphen" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100970 101189])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [101191 101308])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [101310 101606])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [101608 102146])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [102148 102422])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102424 102667])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102669 102852])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [102854 104190])
            ("header-line-highlight" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [104192 104334])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [104336 104501])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [104503 104971])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [104973 105390])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [105392 105805])
            ("internal-border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [105807 105944])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [105946 106441])
            ("setq" code nil nil [106443 106554])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [106556 106868])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [106870 107008])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107010 107139])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [107141 107591])
            ("put" code nil nil [107593 107625])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107627 107753])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [107755 108045])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [108047 108291])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [108293 108415])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [108417 108691])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [108693 109223])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [109225 109459])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [109461 109880])
            ("read-multiple-choice-face" variable
               (:default-value (quote ((t (:inherit underline :weight bold))))
                :type "face")
                nil [109882 110071])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [110097 110269])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [110271 110517])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [110519 110666])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [110668 110803])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline)))
                :type "face")
                nil [110805 111271])
            ("show-paren-match-expression" variable
               (:default-value (quote ((t :inherit show-paren-match)))
                :type "face")
                nil [111273 111508])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [111510 111701])
            ("x-font-regexp" variable nil nil [112077 112103])
            ("x-font-regexp-head" variable nil nil [112104 112135])
            ("x-font-regexp-weight" variable nil nil [112136 112169])
            ("x-font-regexp-slant" variable nil nil [112170 112202])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [112204 112244])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [112245 112284])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [112285 112325])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [112326 112367])
            ("let" code nil nil [112450 113668])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [113671 114758])
            ("font-list-limit" variable (:default-value 100) nil [114760 114875])
            ("make-obsolete-variable" code nil nil [114876 114928])
            ("faces" package nil nil [114930 114946]))          
      :file "faces.el.gz"
      :pointmax 114971
      :fsize 29145
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("shell-command-dont-erase-buffer" variable nil nil [1268 1938])
            ("shell-command-saved-pos" variable nil nil [1940 2294])
            ("idle-update-delay" variable (:default-value 0.5) nil [2296 2593])
            ("killing" customgroup (:user-visible-flag t) nil [2595 2669])
            ("paren-matching" customgroup (:user-visible-flag t) nil [2671 2773])
            ("next-error" customgroup (:user-visible-flag t) nil [2810 2911])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [2913 3044])
            ("next-error-highlight" variable (:default-value 0.5) nil [3046 3801])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [3803 4496])
            ("next-error-recenter" variable nil nil [4498 4860])
            ("next-error-hook" variable nil nil [4862 5003])
            ("next-error-highlight-timer" variable nil nil [5005 5044])
            ("next-error-overlay-arrow-position" variable nil nil [5046 5092])
            ("put" code nil nil [5093 5171])
            ("add-to-list" code nil nil [5172 5249])
            ("next-error-last-buffer" variable nil nil [5251 5478])
            ("next-error-function" variable nil nil [5480 5938])
            ("make-variable-buffer-local" code nil nil [5939 5988])
            ("next-error-move-function" variable nil nil [5990 6303])
            ("make-variable-buffer-local" code nil nil [6304 6358])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6360 7442])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [7444 9726])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [9728 11497])
            ("next-error-internal" function nil nil [11499 11920])
            ("defalias" code nil nil [11922 11961])
            ("defalias" code nil nil [11962 11996])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11998 12315])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12317 12585])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12587 13039])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [13041 13419])
            ("next-error-follow-last-line" variable nil nil [13490 13530])
            ("define-minor-mode" code nil nil [13532 14240])
            ("next-error-follow-mode-post-command-hook" function nil nil [14356 14689])
            ("fundamental-mode" function (:user-visible-flag t) nil [14698 14907])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [14985 15469])
            ("put" code nil nil [15471 15511])
            ("define-derived-mode" code nil nil [15512 15657])
            ("self-insert-uses-region-functions" variable nil nil [15690 16550])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [16552 16685])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [16687 19491])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [19493 19841])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19843 20620])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20622 21423])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21425 22138])
            ("defalias" code nil nil [22140 22182])
            ("delete-blank-lines" function (:user-visible-flag t) nil [22201 23628])
            ("delete-trailing-lines" variable (:default-value t) nil [23630 23916])
            ("region-modifiable-p" function (:arguments ("start" "end")) nil [23918 24140])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [24142 26114])
            ("newline-and-indent" function (:user-visible-flag t) nil [26116 26549])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [26551 27777])
            ("read-quoted-char-radix" variable (:default-value 8) nil [27779 28000])
            ("read-quoted-char" function (:arguments ("prompt")) nil [28002 30851])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30853 32882])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32884 33077])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33079 33278])
            ("back-to-indentation" function (:user-visible-flag t) nil [33280 33570])
            ("fixup-whitespace" function (:user-visible-flag t) nil [33572 33915])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [33917 34355])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [34357 34617])
            ("cycle-spacing--context" variable nil nil [34619 34874])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [34876 37325])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [37328 38251])
            ("end-of-buffer" function (:arguments ("arg")) nil [38253 39500])
            ("delete-active-region" variable (:default-value t) nil [39502 40039])
            ("region-extract-function" variable (:default-value (lambda (method) (when (region-beginning) (cond ((eq method (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq method (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) method)))))) nil [40041 41007])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [41009 41355])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [41357 42994])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [42996 44139])
            ("mark-whole-buffer" function nil nil [44141 44700])
            ("goto-line" function (:arguments ("line" "buffer")) nil [44744 47021])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [47023 47705])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [47707 48500])
            ("count-words--buffer-message" function nil nil [48502 48655])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [48657 48982])
            ("define-obsolete-function-alias" code nil nil [48984 49063])
            ("what-line" function (:user-visible-flag t) nil [49065 49416])
            ("count-lines" function (:arguments ("start" "end")) nil [49418 50255])
            ("line-number-at-pos" function (:arguments ("pos" "absolute")) nil [50257 50924])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [50926 55437])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [55502 55817])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [55819 56342])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [56344 56801])
            ("minibuffer-completing-symbol" variable nil nil [56803 56906])
            ("make-obsolete-variable" code nil nil [56907 56977])
            ("minibuffer-default" variable nil nil [56979 57172])
            ("eval-expression-print-level" variable (:default-value 4) nil [57174 57404])
            ("eval-expression-print-length" variable (:default-value 12) nil [57406 57639])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [57641 57850])
            ("eval-expression-print-maximum-character" variable (:default-value 127) nil [57852 58101])
            ("eval-expression-print-format" function (:arguments ("value")) nil [58103 58785])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [58787 58901])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [58903 59587])
            ("eval-expression-get-print-arguments" function (:arguments ("prefix-argument")) nil [59589 60206])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [60336 62864])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [62866 63793])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63795 65463])
            ("extended-command-history" variable nil nil [65466 65503])
            ("execute-extended-command--last-typed" variable nil nil [65504 65553])
            ("read-extended-command" function nil nil [65555 67739])
            ("suggest-key-bindings" variable (:default-value t) nil [67741 68107])
            ("extended-command-suggest-shorter" variable (:default-value t) nil [68109 68274])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [68276 68738])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [68740 69650])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [69652 73455])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [73457 76066])
            ("minibuffer-history" variable nil nil [76069 76322])
            ("minibuffer-history-sexp-flag" variable nil nil [76323 76638])
            ("setq" code nil nil [76639 76693])
            ("setq" code nil nil [76694 76732])
            ("minibuffer-history-search-history" variable nil nil [76758 76804])
            ("minibuffer-text-before-history" variable nil nil [76806 77006])
            ("add-hook" code nil nil [77008 77072])
            ("minibuffer-history-initialize" function nil nil [77074 77158])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [77160 77375])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [77377 77767])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77769 80613])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [80615 81669])
            ("minibuffer-temporary-goal-position" variable nil nil [81671 81718])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [81720 82360])
            ("minibuffer-default-add-done" variable nil nil [82362 82685])
            ("make-variable-buffer-local" code nil nil [82687 82744])
            ("minibuffer-default-add-completions" function nil nil [82746 83200])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [83202 85490])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85492 85743])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85745 86003])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86005 87733])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87735 89917])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [89919 90575])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [90577 90862])
            ("minibuffer-prompt-width" function nil nil [90921 91210])
            ("add-hook" code nil nil [91243 91310])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [91312 91363])
            ("make-variable-buffer-local" code nil nil [91364 91436])
            ("minibuffer-history-isearch-setup" function nil nil [91438 92078])
            ("minibuffer-history-isearch-end" function nil nil [92080 92310])
            ("minibuffer-history-isearch-search" function nil nil [92312 94217])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [94219 95616])
            ("minibuffer-history-isearch-wrap" function nil nil [95618 96235])
            ("minibuffer-history-isearch-push-state" function nil nil [96237 96568])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [96570 96782])
            ("define-obsolete-function-alias" code nil nil [96860 96922])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [96924 97167])
            ("undo-in-region" variable nil nil [97169 97273])
            ("undo-no-redo" variable nil nil [97275 97350])
            ("pending-undo-list" variable nil nil [97352 97503])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97505 102126])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [102128 102409])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [102411 102673])
            ("undo-in-progress" variable nil nil [102675 102806])
            ("undo-more" function (:arguments ("n")) nil [102808 103503])
            ("primitive-undo" function (:arguments ("n" "list")) nil [103505 110139])
            ("undo-copy-list" function (:arguments ("list")) nil [110164 110262])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [110264 110373])
            ("undo-start" function (:arguments ("beg" "end")) nil [110375 110963])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [113961 116247])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [116249 117288])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [117290 117832])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [117834 118599])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [119490 119795])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [119797 120269])
            ("undo-delta" function (:arguments ("undo-elt")) nil [120440 120773])
            ("defvar-local" code nil nil [120969 121690])
            ("undo-auto-current-boundary-timer" variable nil nil [121692 121867])
            ("undo-auto--this-command-amalgamating" variable nil nil [121869 122065])
            ("undo-auto--needs-boundary-p" function nil nil [122067 122207])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [122209 122513])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [122515 123143])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [123145 123814])
            ("undo-auto--boundary-timer" function nil nil [123816 123993])
            ("undo-auto--boundary-ensure-timer" function nil nil [123995 124248])
            ("undo-auto--undoably-changed-buffers" variable nil nil [124250 124487])
            ("undo-auto--add-boundary" function nil nil [124489 124768])
            ("undo-auto-amalgamate" function nil nil [124770 126099])
            ("undo-auto--undoable-change" function nil nil [126101 126292])
            ("undo-amalgamate-change-group" function (:arguments ("handle")) nil [126323 127912])
            ("undo-ask-before-discard" variable nil nil [127915 128681])
            ("undo-extra-outer-limit" variable nil nil [128683 128959])
            ("make-variable-buffer-local" code nil nil [128960 129012])
            ("setq" code nil nil [129297 129356])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [129357 131148])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [131151 132540])
            ("shell-command-history" variable nil nil [132542 132732])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [132734 132848])
            ("shell-command-default-error-buffer" variable nil nil [132850 133165])
            ("declare-function" code nil nil [133167 133233])
            ("declare-function" code nil nil [133234 133320])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [133322 134026])
            ("declare-function" code nil nil [134028 134079])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [134081 134326])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [134328 134957])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [134959 136212])
            ("async-shell-command-display-buffer" variable (:default-value t) nil [136214 136540])
            ("shell-command--save-pos-or-erase" function nil nil [136542 137273])
            ("shell-command--set-point-after-cmd" function (:arguments ("buffer")) nil [137275 138520])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [138522 139823])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [139825 148653])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [148655 151051])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [151236 151523])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [151525 161100])
            ("shell-command-to-string" function (:arguments ("command")) nil [161102 161362])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [161364 162947])
            ("process-file-side-effects" variable (:default-value t) nil [162949 163371])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [163373 164419])
            ("tabulated-list-format" variable nil nil [164441 164471])
            ("tabulated-list-entries" variable nil nil [164472 164503])
            ("tabulated-list-sort-key" variable nil nil [164504 164536])
            ("declare-function" code nil nil [164537 164603])
            ("declare-function" code nil nil [164604 164710])
            ("process-menu-query-only" variable nil nil [164712 164748])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [164750 164880])
            ("define-derived-mode" code nil nil [164882 165374])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [165376 165681])
            ("list-processes--refresh" function nil nil [165683 167430])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [167432 167529])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [167531 168494])
            ("setq" code nil nil [168519 168558])
            ("setq" code nil nil [168559 168595])
            ("internal-echo-keystrokes-prefix" function nil nil [168597 169202])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [169204 169410])
            ("prefix-command-update" function nil nil [169412 169579])
            ("prefix-command-preserve-state-hook" variable nil nil [169581 169693])
            ("prefix-command-preserve-state" function nil nil [169695 170188])
            ("reset-this-command-lengths" function nil nil [170190 170293])
            ("add-hook" code nil nil [170389 170485])
            ("universal-argument--description" function nil nil [170486 170945])
            ("add-hook" code nil nil [170947 171034])
            ("universal-argument--preserve" function nil nil [171035 171113])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [171115 172731])
            ("universal-argument--mode" function nil nil [172733 172843])
            ("universal-argument" function (:user-visible-flag t) nil [172845 173588])
            ("universal-argument-more" function (:arguments ("arg")) nil [173590 174062])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174064 174438])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174440 175208])
            ("filter-buffer-substring-functions" variable nil nil [175212 175389])
            ("make-obsolete-variable" code nil nil [175390 175514])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [175516 175922])
            ("buffer-substring-filters" variable nil nil [175924 176405])
            ("make-obsolete-variable" code nil nil [176406 176521])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [176523 177384])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [177386 178305])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [178349 178900])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [178902 180341])
            ("kill-ring" variable nil nil [180382 180837])
            ("kill-ring-max" variable (:default-value 60) nil [180839 180974])
            ("kill-ring-yank-pointer" variable nil nil [180976 181077])
            ("save-interprogram-paste-before-kill" variable nil nil [181079 181475])
            ("kill-do-not-save-duplicates" variable nil nil [181477 181706])
            ("kill-new" function (:arguments ("string" "replace")) nil [181708 183733])
            ("kill-append-merge-undo" variable nil nil [183914 184184])
            ("kill-append" function (:arguments ("string" "before-p")) nil [184186 185050])
            ("yank-pop-change-selection" variable nil nil [185052 185400])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [185402 187060])
            ("kill-read-only-ok" variable nil nil [187111 187247])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [187249 190125])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [190319 191452])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [191454 192743])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [192745 194327])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [194329 195149])
            ("bidi-directional-controls-chars" variable (:default-value "‪-‮⁦-⁩") nil [195151 195296])
            ("bidi-directional-non-controls-chars" variable (:default-value "^‪-‮⁦-⁩") nil [195298 195448])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [195450 196556])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [196558 197659])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [197661 199587])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [199589 200892])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [200908 201733])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [201806 202269])
            ("yank-window-start" variable nil nil [202271 202301])
            ("yank-undo-function" variable nil nil [202302 202633])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [202635 204351])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [204353 207093])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207095 207285])
            ("kill-forward-chars" function (:arguments ("arg")) nil [207350 207495])
            ("kill-backward-chars" function (:arguments ("arg")) nil [207544 207690])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [207692 208167])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [208169 209521])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [209523 210140])
            ("kill-whole-line" variable nil nil [210177 210322])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [210324 212538])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [212540 214169])
            ("forward-visible-line" function (:arguments ("arg")) nil [214171 216661])
            ("end-of-visible-line" function nil nil [216663 217429])
            ("kill-current-buffer" function (:user-visible-flag t) nil [217431 217936])
            ("insert-buffer" function (:arguments ("buffer")) nil [217940 218493])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [218495 219395])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219397 219939])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219941 220510])
            ("define-error" code nil nil [220513 220582])
            ("activate-mark-hook" variable nil nil [220584 220773])
            ("deactivate-mark-hook" variable nil nil [220775 220853])
            ("mark" function (:arguments ("force")) nil [220855 221479])
            ("deactivate-mark" function (:arguments ("force")) nil [221514 223604])
            ("activate-mark" function (:arguments ("no-tmm")) nil [223606 223997])
            ("set-mark" function (:arguments ("pos")) nil [223999 225223])
            ("save-mark-and-excursion--save" function nil nil [225225 225374])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [225376 226326])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [226328 226783])
            ("use-empty-active-region" variable nil nil [226785 227284])
            ("use-region-p" function nil nil [227286 227892])
            ("region-active-p" function nil nil [227894 228583])
            ("region-bounds" function nil nil [228585 228896])
            ("region-noncontiguous-p" function nil nil [228898 229121])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [229123 229229])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [229231 230102])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [230104 230940])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [230942 231258])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [231260 231725])
            ("add-function" code nil nil [231727 231823])
            ("defvar-local" code nil nil [231826 231925])
            ("put" code nil nil [231926 231961])
            ("mark-ring-max" variable (:default-value 16) nil [231963 232108])
            ("global-mark-ring" variable nil nil [232110 232194])
            ("global-mark-ring-max" variable (:default-value 16) nil [232196 232357])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [232359 232672])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [232674 233085])
            ("set-mark-command-repeat-pop" variable nil nil [233087 233546])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [233548 235867])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [235869 237423])
            ("pop-mark" function nil nil [237425 237844])
            ("define-obsolete-function-alias" code nil nil [237846 237935])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237936 238831])
            ("shift-select-mode" variable (:default-value t) nil [238833 239405])
            ("handle-shift-selection" function nil nil [239407 240732])
            ("define-minor-mode" code nil nil [240734 242108])
            ("widen-automatically" variable (:default-value t) nil [242110 242444])
            ("non-essential" variable nil nil [242446 242844])
            ("pop-global-mark" function (:user-visible-flag t) nil [242846 243661])
            ("next-line-add-newlines" variable nil nil [243664 243838])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [243840 246037])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [246039 247745])
            ("track-eol" variable nil nil [247747 248085])
            ("goal-column" variable nil nil [248087 248354])
            ("make-variable-buffer-local" code nil nil [248355 248396])
            ("temporary-goal-column" variable nil nil [248398 248915])
            ("line-move-ignore-invisible" variable (:default-value t) nil [248917 249568])
            ("line-move-visual" variable (:default-value t) nil [249570 250145])
            ("declare-function" code nil nil [250182 250242])
            ("default-font-height" function nil nil [250244 250878])
            ("default-font-width" function nil nil [250880 251601])
            ("default-line-height" function nil nil [251603 252065])
            ("window-screen-lines" function nil nil [252067 252637])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [252684 256458])
            ("line-move" function (:arguments ("arg" "noerror" "_to-end" "try-vscroll")) nil [256782 258739])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [258887 261890])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [262044 266717])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [266719 270220])
            ("line-move-to-column" function (:arguments ("col")) nil [270222 271804])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271806 273161])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [273163 274786])
            ("put" code nil nil [274916 274950])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274952 275985])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276053 276617])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276619 277308])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277310 278732])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [278734 279103])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [279105 279484])
            ("visual-line" customgroup (:user-visible-flag t) nil [279486 279587])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [279589 280077])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [280079 281266])
            ("visual-line--saved-state" variable nil nil [281268 281305])
            ("define-minor-mode" code nil nil [281307 283133])
            ("turn-on-visual-line-mode" function nil nil [283135 283193])
            ("define-globalized-minor-mode" code nil nil [283195 283293])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283297 283811])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283813 284257])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284259 286013])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [286015 286622])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [286773 288030])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [288032 289036])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289039 289695])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [289697 290449])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290451 290663])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290665 290856])
            ("current-word" function (:arguments ("strict" "really-word")) nil [290858 292466])
            ("fill-prefix" variable nil nil [292469 292635])
            ("make-variable-buffer-local" code nil nil [292636 292677])
            ("put" code nil nil [292678 292735])
            ("auto-fill-inhibit-regexp" variable nil nil [292737 292903])
            ("do-auto-fill" function nil nil [292905 296261])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [296263 296589])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [296591 297698])
            ("internal-auto-fill" function nil nil [297700 297954])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [297956 298112])
            ("put" code nil nil [298114 298176])
            ("put" code nil nil [298350 298402])
            ("define-minor-mode" code nil nil [298404 299310])
            ("auto-fill-function" function nil nil [299377 299484])
            ("turn-on-auto-fill" function nil nil [299486 299579])
            ("turn-off-auto-fill" function nil nil [299581 299677])
            ("custom-add-option" code nil nil [299679 299733])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299735 300573])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300576 301366])
            ("defvaralias" code nil nil [301368 301426])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301428 302208])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302210 302754])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [302756 302873])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [302874 303001])
            ("define-minor-mode" code nil nil [303003 303736])
            ("define-minor-mode" code nil nil [303738 304666])
            ("define-minor-mode" code nil nil [304668 305144])
            ("define-minor-mode" code nil nil [305146 305450])
            ("define-minor-mode" code nil nil [305452 305760])
            ("define-minor-mode" code nil nil [305762 306758])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [306761 306892])
            ("blink-matching-paren" variable (:default-value t) nil [306894 307492])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [307494 307910])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [307912 308237])
            ("blink-matching-delay" variable (:default-value 1) nil [308239 308375])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [308377 308645])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [308647 309632])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [309634 310000])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [310002 310212])
            ("blink-matching-open" function (:user-visible-flag t) nil [310214 314778])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [314780 314969])
            ("blink-paren-post-self-insert-function" function nil nil [314971 315618])
            ("put" code nil nil [315620 315678])
            ("add-hook" code nil nil [315680 316059])
            ("keyboard-quit" function (:user-visible-flag t) nil [316246 316964])
            ("buffer-quit-function" variable nil nil [316966 317216])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [317218 318044])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [318046 318441])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [318445 318962])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [318964 320508])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [320510 320835])
            ("rfc822-goto-eoh" function nil nil [320837 321253])
            ("mail-encode-mml" variable nil nil [321295 321434])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [321436 324130])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324132 324523])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324525 324913])
            ("set-variable-value-history" variable nil nil [324917 325102])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [325104 328202])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-current-buffer)) map)) nil [328257 328893])
            ("put" code nil nil [328961 329009])
            ("completion-reference-buffer" variable nil nil [329011 329240])
            ("completion-no-auto-exit" variable nil nil [329242 329423])
            ("completion-base-position" variable nil nil [329425 329795])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [329797 330096])
            ("completion-base-size" variable nil nil [330098 330553])
            ("make-obsolete-variable" code nil nil [330554 330633])
            ("delete-completion-window" function (:user-visible-flag t) nil [330635 331009])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331011 331142])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331144 332394])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [332396 334355])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [334439 335277])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [335279 335471])
            ("choose-completion-string-functions" variable nil nil [335473 336218])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [336220 339630])
            ("define-derived-mode" code nil nil [339632 340004])
            ("completion-list-mode-finish" function nil nil [340006 340202])
            ("add-hook" code nil nil [340204 340266])
            ("completion-show-help" variable (:default-value t) nil [340330 340481])
            ("completion-setup-function" function nil nil [340612 342594])
            ("add-hook" code nil nil [342596 342656])
            ("define-key" code nil nil [342658 342733])
            ("define-key" code nil nil [342734 342809])
            ("switch-to-completions" function (:user-visible-flag t) nil [342811 343352])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [343514 343757])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [343758 344011])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [344012 344265])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [344266 344519])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [344520 344777])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [344778 345026])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [345028 346092])
            ("define-key" code nil nil [346094 346165])
            ("define-key" code nil nil [346166 346237])
            ("define-key" code nil nil [346238 346308])
            ("define-key" code nil nil [346309 346378])
            ("define-key" code nil nil [346379 346450])
            ("define-key" code nil nil [346451 346524])
            ("mapc" code nil nil [346814 347409])
            ("clone-buffer-hook" variable nil nil [347461 347562])
            ("clone-indirect-buffer-hook" variable nil nil [347564 347683])
            ("clone-process" function (:arguments ("process" "newname")) nil [347685 349194])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [349297 352260])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [352263 353903])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [353906 354389])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [354437 355978])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [355980 357055])
            ("define-minor-mode" code nil nil [357057 360552])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [360555 360678])
            ("define-minor-mode" code nil nil [360680 361833])
            ("define-minor-mode" code nil nil [361835 362605])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [362608 362791])
            ("define-derived-mode" code nil nil [362793 362909])
            ("messages-buffer" function nil nil [362911 363198])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [364147 365573])
            ("bad-package-check" function (:arguments ("package")) nil [365575 366080])
            ("dolist" code nil nil [366082 366204])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [366857 369481])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369547 369916])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369918 370305])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370307 370708])
            ("simple" package nil nil [370713 370730]))          
      :file "simple.el.gz"
      :pointmax 370756
      :fsize 100834
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("delete-auto-save-files" variable (:default-value t) nil [1373 1623])
            ("directory-abbrev-alist" variable nil nil [1625 2637])
            ("make-backup-files" variable (:default-value t) nil [2639 3562])
            ("backup-inhibited" variable nil nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable nil nil [3900 4078])
            ("backup-by-copying-when-linked" variable nil nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4923 5546])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5548 5767])
            ("buffer-offer-save" variable nil nil [5769 6390])
            ("make-variable-buffer-local" code nil nil [6391 6438])
            ("put" code nil nil [6439 6482])
            ("find-file-existing-other-name" variable (:default-value t) nil [6484 6777])
            ("find-file-visit-truename" variable nil nil [6779 7151])
            ("put" code nil nil [7152 7214])
            ("revert-without-query" variable nil nil [7216 7581])
            ("buffer-file-number" variable nil nil [7583 7852])
            ("make-variable-buffer-local" code nil nil [7853 7901])
            ("put" code nil nil [7902 7946])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7948 8093])
            ("buffer-file-read-only" variable nil nil [8095 8185])
            ("make-variable-buffer-local" code nil nil [8186 8237])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [8239 8683])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8751 8820])
            ("declare-function" code nil nil [8822 8872])
            ("declare-function" code nil nil [8873 8922])
            ("declare-function" code nil nil [8923 9009])
            ("declare-function" code nil nil [9010 9077])
            ("declare-function" code nil nil [9078 9150])
            ("declare-function" code nil nil [9151 9207])
            ("declare-function" code nil nil [9208 9267])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [9269 9942])
            ("file-precious-flag" variable nil nil [9944 10784])
            ("break-hardlink-on-save" variable nil nil [10786 11541])
            ("version-control" variable nil nil [11543 11900])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [11902 12046])
            ("put" code nil nil [12048 12127])
            ("dired-kept-versions" variable (:default-value 2) nil [12129 12269])
            ("delete-old-versions" variable nil nil [12271 12537])
            ("kept-old-versions" variable (:default-value 2) nil [12539 12678])
            ("put" code nil nil [12679 12734])
            ("kept-new-versions" variable (:default-value 2) nil [12736 12925])
            ("put" code nil nil [12926 12981])
            ("require-final-newline" variable nil nil [12983 13754])
            ("mode-require-final-newline" variable (:default-value t) nil [13756 14891])
            ("auto-save-default" variable (:default-value t) nil [14893 15035])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [15037 16465])
            ("auto-save--timer" variable nil nil [16467 16534])
            ("auto-save-visited-interval" variable (:default-value 5) nil [16536 17017])
            ("define-minor-mode" code nil nil [17019 17991])
            ("make-obsolete-variable" code nil nil [18186 18305])
            ("save-abbrevs" variable (:default-value t) nil [18307 18518])
            ("find-file-run-dired" variable (:default-value t) nil [18520 18717])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [18719 19047])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [19108 19436])
            ("define-obsolete-variable-alias" code nil nil [19544 19645])
            ("find-file-not-found-functions" variable nil nil [19646 19947])
            ("define-obsolete-variable-alias" code nil nil [20045 20117])
            ("find-file-hook" variable nil nil [20118 20471])
            ("define-obsolete-variable-alias" code nil nil [20473 20552])
            ("write-file-functions" variable nil nil [20553 21357])
            ("put" code nil nil [21358 21404])
            ("local-write-file-hooks" variable nil nil [21406 21441])
            ("make-variable-buffer-local" code nil nil [21442 21494])
            ("put" code nil nil [21495 21543])
            ("make-obsolete-variable" code nil nil [21544 21621])
            ("define-obsolete-variable-alias" code nil nil [21623 21714])
            ("write-contents-functions" variable nil nil [21715 22602])
            ("make-variable-buffer-local" code nil nil [22603 22657])
            ("enable-local-variables" variable (:default-value t) nil [22659 23911])
            ("enable-dir-local-variables" variable (:default-value t) nil [23913 24134])
            ("local-enable-local-variables" variable (:default-value t) nil [25497 25974])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [25976 26367])
            ("view-read-only" variable nil nil [26369 26719])
            ("file-name-history" variable nil nil [26721 26904])
            ("save-silently" variable nil nil [26906 27061])
            ("put" code nil nil [27065 27119])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [27120 27726])
            ("declare-function" code nil nil [27728 27800])
            ("declare-function" code nil nil [27801 27873])
            ("convert-standard-filename" function (:arguments ("filename")) nil [27875 29031])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [29033 30154])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [30158 30426])
            ("cd-path" variable nil nil [30428 30558])
            ("parse-colon-path" function (:arguments ("search-path")) nil [30560 31179])
            ("cd-absolute" function (:arguments ("dir")) nil [31181 32086])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [32088 34163])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [34165 35560])
            ("module-file-suffix" variable nil nil [35562 35589])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [35591 36059])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [36061 37438])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [37440 40402])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [40404 40812])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [40814 41418])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [41420 42778])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42780 42982])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42984 44670])
            ("executable-find" function (:arguments ("command")) nil [44673 44981])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44983 45678])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45680 47432])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47731 48450])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48452 49671])
            ("file-local-name" function (:arguments ("file")) nil [49673 50089])
            ("file-local-copy" function (:arguments ("file")) nil [50091 50480])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [50482 50763])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [50765 51544])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [51546 56382])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [56384 57805])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [57937 59054])
            ("mounted-file-systems" variable (:default-value (if (memq system-type (quote (windows-nt cygwin))) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [59056 59487])
            ("temporary-file-directory" function nil nil [59489 60265])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [60267 61320])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [61322 62262])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [62264 63101])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [63103 65340])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [65343 65956])
            ("confirm-nonexistent-file-or-buffer" function nil nil [65958 66399])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [66401 67644])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [67646 67760])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67762 69476])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69478 70860])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [70862 72238])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [72240 72675])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [72677 73102])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73104 73485])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73487 73938])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73940 74386])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74388 75337])
            ("kill-buffer-hook" variable nil nil [75398 75638])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [75640 78693])
            ("create-file-buffer" function (:arguments ("filename")) nil [78818 79498])
            ("generate-new-buffer" function (:arguments ("name")) nil [79500 79705])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [79707 79859])
            ("make-obsolete-variable" code nil nil [79860 79937])
            ("abbreviated-home-dir" variable nil nil [79939 80113])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [80115 84173])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [84175 86102])
            ("find-file-wildcards" variable (:default-value t) nil [86105 86352])
            ("find-file-suppress-same-file-warnings" variable nil nil [86354 86680])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [86682 86961])
            ("out-of-memory-warning-percentage" variable nil nil [86963 87346])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [87348 87840])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [87842 88680])
            ("files--message" function (:arguments ("format" "args")) nil [88682 88949])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [88951 96019])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [96021 98515])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [98518 99539])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [99541 100233])
            ("insert-file-literally" function (:arguments ("filename")) nil [100235 100718])
            ("find-file-literally" variable nil nil [100720 100927])
            ("put" code nil nil [100928 100973])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [100975 102304])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [102307 105672])
            ("define-obsolete-function-alias" code nil nil [105674 105749])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [105751 107743])
            ("auto-mode-case-fold" variable (:default-value t) nil [107745 108183])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [108185 119709])
            ("put" code nil nil [119710 119756])
            ("conf-mode-maybe" function nil nil [119758 120008])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [120010 121405])
            ("define-obsolete-variable-alias" code nil nil [121407 121520])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [121719 122579])
            ("define-obsolete-variable-alias" code nil nil [122581 122691])
            ("inhibit-local-variables-suffixes" variable nil nil [122693 122969])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [123041 123147])
            ("inhibit-local-variables-p" function nil nil [123149 123959])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [123961 124479])
            ("magic-mode-alist" variable nil nil [124481 125015])
            ("put" code nil nil [125016 125063])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [125065 126608])
            ("put" code nil nil [126609 126665])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [126667 126809])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [126811 134182])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [134435 134842])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [134844 135110])
            ("set-auto-mode-1" function nil nil [135112 136617])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [136655 136861])
            ("put" code nil nil [136862 136916])
            ("hack-local-variables-hook" variable nil nil [136918 137151])
            ("safe-local-variable-values" variable nil nil [137153 137413])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [137415 138077])
            ("mapc" code nil nil [138105 138722])
            ("dolist" code nil nil [139364 140052])
            ("put" code nil nil [140054 140168])
            ("put" code nil nil [140170 140216])
            ("file-local-variables-alist" variable nil nil [140218 140573])
            ("make-variable-buffer-local" code nil nil [140574 140630])
            ("put" code nil nil [140631 140683])
            ("dir-local-variables-alist" variable nil nil [140685 141067])
            ("make-variable-buffer-local" code nil nil [141068 141123])
            ("before-hack-local-variables-hook" variable nil nil [141125 141543])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [141545 144415])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [144417 144504])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [144506 147784])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [147786 150272])
            ("hack-local-variables--warned-lexical" variable nil nil [150333 150382])
            ("hack-local-variables" function (:arguments ("handle-mode")) nil [150384 157004])
            ("hack-local-variables-apply" function nil nil [157006 157807])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [157809 158497])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [158499 159402])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [159404 159508])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [159510 159698])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [159700 161520])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [161522 161954])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [161956 162869])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [162935 163050])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [163052 163628])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [163630 163763])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [163765 164410])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [164412 166583])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [166585 167349])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [167351 168726])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [168728 169426])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [169428 170358])
            ("dir-locals-find-file" function (:arguments ("file")) nil [170360 173487])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [173489 174793])
            ("define-obsolete-function-alias" code nil nil [174795 174889])
            ("enable-remote-dir-locals" variable nil nil [174891 175057])
            ("hack-dir-local-variables--warned-coding" variable nil nil [175059 175111])
            ("hack-dir-local-variables" function nil nil [175113 176730])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [176732 177038])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [177042 177477])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [177479 182568])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [182570 184710])
            ("file-extended-attributes" function (:arguments ("filename")) nil [184713 185027])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [185029 185631])
            ("backup-buffer" function nil nil [185634 189257])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [189259 190360])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [190362 190655])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [190657 191356])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [191358 193165])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [193167 193892])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [193894 194823])
            ("file-name-base" function (:arguments ("filename")) nil [194825 195069])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [195071 195819])
            ("backup-directory-alist" variable nil nil [195821 196858])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [196860 198156])
            ("make-backup-file-name" function (:arguments ("file")) nil [198158 198471])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [198473 199223])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [199225 201825])
            ("backup-file-name-p" function (:arguments ("file")) nil [201827 202088])
            ("backup-extract-version-start" variable nil nil [202090 202127])
            ("backup-extract-version" function (:arguments ("fn")) nil [202302 202754])
            ("find-backup-file-name" function (:arguments ("fn")) nil [202756 204895])
            ("file-nlinks" function (:arguments ("filename")) nil [204897 205014])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [205016 207771])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207774 210592])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [210594 211165])
            ("auto-save-hook" variable nil nil [211167 211239])
            ("before-save-hook" variable nil nil [211241 211439])
            ("after-save-hook" variable nil nil [211441 211660])
            ("save-buffer-coding-system" variable nil nil [211662 212034])
            ("make-variable-buffer-local" code nil nil [212036 212091])
            ("put" code nil nil [212092 212143])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [212145 216989])
            ("basic-save-buffer-1" function nil nil [217271 217574])
            ("basic-save-buffer-2" function nil nil [217663 221824])
            ("declare-function" code nil nil [221826 221912])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [221914 223080])
            ("put" code nil nil [223081 223142])
            ("buffer-save-without-query" variable nil nil [223144 223260])
            ("make-variable-buffer-local" code nil nil [223261 223316])
            ("save-some-buffers-default-predicate" variable nil nil [223318 223730])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [223732 227471])
            ("clear-visited-file-modtime" function nil nil [227474 227655])
            ("not-modified" function (:arguments ("arg")) nil [227657 228180])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [228182 228468])
            ("insert-file" function (:arguments ("filename")) nil [228470 228918])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [228920 229578])
            ("file-newest-backup" function (:arguments ("filename")) nil [229580 230503])
            ("rename-uniquely" function (:user-visible-flag t) nil [230505 231521])
            ("files--ensure-directory" function (:arguments ("dir")) nil [231523 231774])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [231776 233323])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [233325 233471])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [233473 233821])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [233823 236586])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [236588 237148])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [237150 238268])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [238270 241390])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [241438 242000])
            ("put" code nil nil [242004 242052])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [242053 242505])
            ("put" code nil nil [242507 242576])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [242577 243049])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [243051 243613])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [243615 244530])
            ("before-revert-hook" variable nil nil [244532 244735])
            ("after-revert-hook" variable nil nil [244737 245092])
            ("revert-buffer-in-progress-p" variable nil nil [245094 245208])
            ("revert-buffer-internal-hook" variable nil nil [245210 245246])
            ("revert-buffer-preserve-modes" variable nil nil [245436 245473])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [245475 247687])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [247689 251044])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [251046 253246])
            ("recover-this-file" function (:user-visible-flag t) nil [253248 253479])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [253481 255564])
            ("recover-session" function (:user-visible-flag t) nil [255566 257298])
            ("recover-session-finish" function (:user-visible-flag t) nil [257300 259703])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [259705 259956])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [259958 260561])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [260563 261220])
            ("rename-auto-save-file" function nil nil [261224 261788])
            ("make-auto-save-file-name" function nil nil [261790 265961])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [265963 266191])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [266194 268377])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [268380 268541])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [268543 268709])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [268711 270317])
            ("files" package nil nil [270391 270427])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [270429 271775])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [271777 273615])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [273618 273745])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [273747 274284])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [274286 274473])
            ("get-free-disk-space" function (:arguments ("dir")) nil [274475 276245])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [276317 278706])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [278708 278753])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [278755 279570])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [279572 281583])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [282657 291413])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [291415 291981])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [291983 292467])
            ("kill-emacs-query-functions" variable nil nil [292469 292832])
            ("confirm-kill-emacs" variable nil nil [292834 293274])
            ("confirm-kill-processes" variable (:default-value t) nil [293276 293639])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [293641 295932])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [295934 296454])
            ("setq" code nil nil [296564 296685])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [296886 300573])
            ("file-name-quoted-p" function (:arguments ("name")) nil [300575 300767])
            ("file-name-quote" function (:arguments ("name")) nil [300769 301090])
            ("file-name-unquote" function (:arguments ("name")) nil [301092 301472])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [301515 301982])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [301984 302833])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [302835 303989])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [303991 305074])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [305076 306143])
            ("define-obsolete-variable-alias" code nil nil [306145 306227])
            ("trash-directory" variable nil nil [306251 306654])
            ("trash--hexify-table" variable nil nil [306656 306684])
            ("declare-function" code nil nil [306686 306752])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [306754 311748])
            ("file-attribute-type" function (:arguments ("attributes")) nil [311750 311966])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [311968 312115])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [312117 312384])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [312386 312654])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [312656 312879])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [312881 313173])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [313175 313513])
            ("file-attribute-size" function (:arguments ("attributes")) nil [313515 313721])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [313723 313907])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [313909 314350])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [314352 314807])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [314809 315664])
            ("define-key" code nil nil [315667 315707])
            ("define-key" code nil nil [315708 315758])
            ("define-key" code nil nil [315759 315809])
            ("define-key" code nil nil [315810 315852])
            ("define-key" code nil nil [315853 315898])
            ("define-key" code nil nil [315899 315940])
            ("define-key" code nil nil [315941 315980])
            ("define-key" code nil nil [315981 316019])
            ("define-key" code nil nil [316020 316065])
            ("define-key" code nil nil [316066 316123])
            ("define-key" code nil nil [316124 316169])
            ("define-key" code nil nil [316171 316223])
            ("define-key" code nil nil [316224 316286])
            ("define-key" code nil nil [316287 316342])
            ("define-key" code nil nil [316343 316402])
            ("define-key" code nil nil [316403 316450])
            ("define-key" code nil nil [316452 316510])
            ("define-key" code nil nil [316511 316562])
            ("define-key" code nil nil [316563 316617])
            ("define-key" code nil nil [316618 316679])
            ("define-key" code nil nil [316680 316739]))          
      :file "files.el.gz"
      :pointmax 316764
      :fsize 90691
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("fringe" customgroup (:user-visible-flag t) nil [1310 1386])
            ("when" code nil nil [1454 2745])
            ("fringe-bitmap-p" function (:arguments ("symbol")) nil [2748 2852])
            ("fringe-mode" variable nil nil [2887 2907])
            ("fringe-mode-explicit" variable nil nil [2909 3062])
            ("set-fringe-mode-1" function (:arguments ("_ignore" "value")) nil [3064 3289])
            ("set-fringe-mode" function (:arguments ("value")) nil [3291 3755])
            ("fringe--check-style" function (:arguments ("style")) nil [3757 4011])
            ("fringe-mode-initialize" function (:arguments ("symbol" "value")) nil [4118 4796])
            ("fringe-styles" variable
               (:constant-flag t
                :default-value (quote (("default") ("no-fringes" . 0) ("right-only" 0) ("left-only" nil . 0) ("half-width" 4 . 4) ("minimal" 1 . 1))))
                nil [4798 5435])
            ("fringe-mode" variable nil nil [5437 7090])
            ("setq" code nil nil [7187 7216])
            ("fringe-query-style" function (:arguments ("all-frames")) nil [7218 8037])
            ("fringe-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [8039 9201])
            ("set-fringe-style" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [9203 10434])
            ("fringe-columns" function (:arguments ("side" "real")) nil [10436 10860])
            ("fringe" package nil nil [10862 10879]))          
      :file "fringe.el.gz"
      :pointmax 10905
      :fsize 3538
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1239 2285])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2287 2983])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2985 3105])
            ("make-obsolete" code nil nil [3106 3168])
            ("copy-case-table" function (:arguments ("case-table")) nil [3170 3585])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3587 4421])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4423 5201])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5203 5804])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5806 6411])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6413 7061])
            ("case-table" package nil nil [7063 7084]))          
      :file "case-table.el.gz"
      :pointmax 7114
      :fsize 2027
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1132 1168])
            ("command-line-processed" variable nil nil [1170 1255])
            ("initialization" customgroup (:user-visible-flag t) nil [1257 1338])
            ("initial-buffer-choice" variable nil nil [1340 2311])
            ("inhibit-startup-screen" variable nil nil [2313 2566])
            ("defvaralias" code nil nil [2568 2628])
            ("defvaralias" code nil nil [2629 2691])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2693 2743])
            ("inhibit-startup-echo-area-message" variable nil nil [3043 4097])
            ("inhibit-default-init" variable nil nil [4099 4229])
            ("inhibit-startup-buffer-menu" variable nil nil [4231 4395])
            ("command-switch-alist" variable nil nil [4397 4665])
            ("command-line-args-left" variable nil nil [4667 4751])
            ("defvaralias" code nil nil [4753 4988])
            ("internal-make-var-non-special" code nil nil [4989 5026])
            ("argi" variable nil nil [5028 5080])
            ("internal-make-var-non-special" code nil nil [5081 5118])
            ("command-line-functions" variable nil nil [5120 5574])
            ("command-line-default-directory" variable nil nil [5576 5744])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5852 9036])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [9038 11990])
            ("before-init-hook" variable nil nil [11993 12103])
            ("after-init-hook" variable nil nil [12105 12521])
            ("emacs-startup-hook" variable nil nil [12523 12630])
            ("term-setup-hook" variable nil nil [12632 12947])
            ("make-obsolete-variable" code nil nil [12949 13065])
            ("inhibit-startup-hooks" variable nil nil [13067 13266])
            ("keyboard-type" variable nil nil [13268 13489])
            ("window-setup-hook" variable nil nil [13491 13938])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13940 14109])
            ("init-file-user" variable nil nil [14111 14758])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14760 16031])
            ("make-obsolete-variable" code nil nil [16033 16105])
            ("mail-host-address" variable nil nil [16107 16305])
            ("user-mail-address" variable (:default-value (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name))))) nil [16307 16729])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16731 17484])
            ("emacs-basic-display" variable nil nil [17486 17518])
            ("init-file-debug" variable nil nil [17520 17548])
            ("init-file-had-error" variable nil nil [17550 17646])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17648 17700])
            ("no-blinking-cursor" variable nil nil [17702 17733])
            ("pure-space-overflow" variable nil nil [17735 17820])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17822 17998])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18000 18236])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18238 19990])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [19992 20761])
            ("normal-top-level" function nil nil [20763 31121])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [31229 31455])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [31457 31547])
            ("cl-defgeneric" code nil nil [31549 31890])
            ("cl-defmethod" code nil nil [31891 31987])
            ("cl-defgeneric" code nil nil [31989 32327])
            ("tty-handle-args" function (:arguments ("args")) nil [32329 35076])
            ("declare-function" code nil nil [35078 35172])
            ("declare-function" code nil nil [35173 35232])
            ("declare-function" code nil nil [35233 35277])
            ("server-name" variable nil nil [35279 35299])
            ("server-process" variable nil nil [35300 35323])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [35325 38300])
            ("command-line" function nil nil [38302 59821])
            ("x-apply-session-resources" function nil nil [59823 60902])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [60904 61312])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/thegnuproject.html"))) "Browse https://www.gnu.org/gnu/thegnuproject.html"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [61487 64271])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (info "(emacs)Contributing")))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [64273 67431])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [67434 67553])
            ("fancy-splash-image" variable nil nil [67555 67752])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [67755 68127])
            ("fancy-splash-insert" function (:arguments ("args")) nil [68198 69594])
            ("declare-function" code nil nil [69596 69665])
            ("fancy-splash-image-file" function nil nil [69667 70146])
            ("fancy-splash-head" function nil nil [70148 71166])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [71168 74307])
            ("exit-splash-screen" function (:user-visible-flag t) nil [74309 74418])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [74420 75851])
            ("fancy-about-screen" function nil nil [75853 76611])
            ("fancy-splash-frame" function nil nil [76613 77209])
            ("use-fancy-splash-screens-p" function nil nil [77211 78026])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [78029 80535])
            ("normal-mouse-startup-screen" function nil nil [80537 82343])
            ("normal-no-mouse-startup-screen" function nil nil [82345 86474])
            ("normal-about-screen" function nil nil [86476 87937])
            ("startup-echo-area-message" function nil nil [87939 88136])
            ("display-startup-echo-area-message" function nil nil [88138 89402])
            ("display-startup-screen" function (:arguments ("concise")) nil [89404 89856])
            ("display-about-screen" function (:user-visible-flag t) nil [89858 90104])
            ("defalias" code nil nil [90106 90151])
            ("defalias" code nil nil [90152 90209])
            ("command-line-1" function (:arguments ("args-left")) nil [90211 107383])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [107385 108117]))          
      :file "startup.el.gz"
      :pointmax 108144
      :fsize 29453
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.2!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
