;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [4415 4431])
            ("locate-current-filter" variable nil nil [4447 4481])
            ("locate-local-filter" variable nil nil [4482 4514])
            ("locate-local-search" variable nil nil [4515 4547])
            ("locate-local-prompt" variable nil nil [4548 4580])
            ("locate" customgroup (:user-visible-flag t) nil [4582 4679])
            ("locate-command" variable (:default-value "locate") nil [4681 5803])
            ("locate-post-command-hook" variable nil nil [5805 5942])
            ("locate-history-list" variable nil nil [5944 6029])
            ("locate-grep-history-list" variable nil nil [6031 6133])
            ("locate-make-command-line" variable (:default-value (quote locate-default-make-command-line)) nil [6135 6637])
            ("locate-buffer-name" variable (:default-value "*Locate*") nil [6639 6781])
            ("locate-fcodes-file" variable nil nil [6783 7321])
            ("locate-header-face" variable nil nil [7323 7467])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [7484 7737])
            ("locate-update-when-revert" variable nil nil [7739 8128])
            ("locate-update-command" variable (:default-value "updatedb") nil [8130 8270])
            ("locate-update-path" variable (:default-value "/") nil [8272 8707])
            ("locate-prompt-for-command" variable nil nil [8709 9043])
            ("locate-mode-hook" variable nil nil [9045 9181])
            ("locate-default-make-command-line" function (:arguments ("search-string")) nil [9197 9291])
            ("locate-word-at-point" function nil nil [9293 9579])
            ("locate-prompt-for-search-string" function nil nil [9630 10399])
            ("locate" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [10416 12821])
            ("locate-with-filter" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [12838 13778])
            ("locate-filter-output" function (:arguments ("filter")) nil [13780 13908])
            ("locate-mode-map" variable (:default-value (let ((map (copy-keymap dired-mode-map))) (define-key map [menu-bar Dired] (quote undefined)) (define-key map [menu-bar subdir] (quote undefined)) (define-key map [menu-bar mark executables] (quote undefined)) (define-key map [menu-bar mark directory] (quote undefined)) (define-key map [menu-bar mark directories] (quote undefined)) (define-key map [menu-bar mark symlinks] (quote undefined)) (define-key map [M-mouse-2] (quote locate-mouse-view-file)) (define-key map "" (quote locate-tags)) (define-key map "l" (quote locate-do-redisplay)) (define-key map "U" (quote dired-unmark-all-files)) (define-key map "V" (quote locate-find-directory)) map)) nil [13910 14675])
            ("locate-filename-indentation" variable
               (:constant-flag t
                :default-value 4)
                nil [14762 14847])
            ("locate-get-file-positions" function nil nil [14849 15504])
            ("locate-current-line-number" function nil nil [15523 15698])
            ("locate-get-filename" function nil nil [16067 16280])
            ("locate-main-listing-line-p" function nil nil [16282 16640])
            ("locate-mouse-view-file" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [16642 16955])
            ("define-derived-mode" code nil nil [17096 18915])
            ("put" code nil nil [18916 18967])
            ("locate-do-setup" function (:arguments ("search-string")) nil [18969 19575])
            ("locate-set-properties" function nil nil [19577 19734])
            ("locate-insert-header" function (:arguments ("search-string")) nil [19736 21556])
            ("locate-tags" function (:user-visible-flag t) nil [21558 21883])
            ("locate-update" function (:arguments ("_ignore1" "_ignore2")) nil [21930 22635])
            ("locate-find-directory" function (:user-visible-flag t) nil [22777 23287])
            ("locate-find-directory-other-window" function (:user-visible-flag t) nil [23289 23571])
            ("locate-get-dirname" function nil nil [23940 24902])
            ("locate-in-alternate-database" function
               (:user-visible-flag t
                :arguments ("search-string" "database"))
                nil [24927 25776])
            ("locate-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [25778 26144])
            ("locate" package nil nil [26146 26163]))          
      :file "locate.el"
      :pointmax 26189
      :fsize 26188
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "dired.el"
      :fsize 167676
      :lastmodtime '(23624 29140 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function (:arguments ("form")) nil [2807 3011])
            ("1value" function (:arguments ("form")) nil [3013 3251])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3253 3713])
            ("lambda" function (:arguments ("cdr")) nil [3715 4902])
            ("setq-local" function (:arguments ("var" "val")) nil [4904 5151])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5153 5594])
            ("push" function (:arguments ("newelt" "place")) nil [5596 6190])
            ("pop" function (:arguments ("place")) nil [6192 7049])
            ("when" function (:arguments ("cond" "body")) nil [7051 7339])
            ("unless" function (:arguments ("cond" "body")) nil [7341 7627])
            ("dolist" function (:arguments ("spec" "body")) nil [7629 9089])
            ("dotimes" function (:arguments ("spec" "body")) nil [9091 10556])
            ("declare" function (:arguments ("_specs")) nil [10558 11133])
            ("ignore-errors" function (:arguments ("body")) nil [11135 11442])
            ("gensym-counter" variable nil nil [11473 11576])
            ("gensym" function (:arguments ("prefix")) nil [11578 11898])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11900 12048])
            ("error" function (:arguments ("args")) nil [12105 12621])
            ("user-error" function (:arguments ("format" "args")) nil [12623 13283])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [13285 14198])
            ("frame-configuration-p" function (:arguments ("object")) nil [14312 14567])
            ("apply-partially" function (:arguments ("fun" "args")) nil [14569 14946])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [15140 15720])
            ("caar" function (:arguments ("x")) nil [15722 15849])
            ("cadr" function (:arguments ("x")) nil [15851 15978])
            ("cdar" function (:arguments ("x")) nil [15980 16107])
            ("cddr" function (:arguments ("x")) nil [16109 16236])
            ("caaar" function (:arguments ("x")) nil [16238 16389])
            ("caadr" function (:arguments ("x")) nil [16391 16542])
            ("cadar" function (:arguments ("x")) nil [16544 16695])
            ("caddr" function (:arguments ("x")) nil [16697 16848])
            ("cdaar" function (:arguments ("x")) nil [16850 17001])
            ("cdadr" function (:arguments ("x")) nil [17003 17154])
            ("cddar" function (:arguments ("x")) nil [17156 17307])
            ("cdddr" function (:arguments ("x")) nil [17309 17460])
            ("caaaar" function (:arguments ("x")) nil [17462 17633])
            ("caaadr" function (:arguments ("x")) nil [17635 17806])
            ("caadar" function (:arguments ("x")) nil [17808 17979])
            ("caaddr" function (:arguments ("x")) nil [17981 18152])
            ("cadaar" function (:arguments ("x")) nil [18154 18325])
            ("cadadr" function (:arguments ("x")) nil [18327 18498])
            ("caddar" function (:arguments ("x")) nil [18500 18671])
            ("cadddr" function (:arguments ("x")) nil [18673 18844])
            ("cdaaar" function (:arguments ("x")) nil [18846 19017])
            ("cdaadr" function (:arguments ("x")) nil [19019 19190])
            ("cdadar" function (:arguments ("x")) nil [19192 19363])
            ("cdaddr" function (:arguments ("x")) nil [19365 19536])
            ("cddaar" function (:arguments ("x")) nil [19538 19709])
            ("cddadr" function (:arguments ("x")) nil [19711 19882])
            ("cdddar" function (:arguments ("x")) nil [19884 20055])
            ("cddddr" function (:arguments ("x")) nil [20057 20228])
            ("last" function (:arguments ("list" "n")) nil [20230 20647])
            ("butlast" function (:arguments ("list" "n")) nil [20649 20877])
            ("nbutlast" function (:arguments ("list" "n")) nil [20879 21156])
            ("zerop" function (:arguments ("number")) nil [21158 21388])
            ("delete-dups" function (:arguments ("list")) nil [21390 22177])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [22244 22702])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [22704 24711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [24713 25530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [25570 26370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [26372 26694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [26696 26964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [26966 27401])
            ("assoc-delete-all" function (:arguments ("key" "alist")) nil [27403 27897])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [27899 28383])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [28385 28878])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [28880 29493])
            ("remove" function (:arguments ("elt" "seq")) nil [29495 29848])
            ("remq" function (:arguments ("elt" "list")) nil [29850 30181])
            ("kbd" function (:arguments ("keys")) nil [30206 30646])
            ("put" code nil nil [30647 30665])
            ("undefined" function (:user-visible-flag t) nil [30667 31195])
            ("put" code nil nil [31290 31325])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [31327 31891])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [31893 32545])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [32547 34608])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [34610 35290])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [35292 35762])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [35816 36416])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [36418 36884])
            ("keymap-canonicalize" function (:arguments ("map")) nil [36886 38755])
            ("put" code nil nil [38757 38814])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [38816 39191])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [39222 40142])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [40144 40948])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40950 41146])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [41148 41377])
            ("key-substitution-in-progress" variable nil nil [41433 41526])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [41528 42910])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42912 44575])
            ("global-map" variable nil nil [44724 44898])
            ("esc-map" variable nil nil [44900 45040])
            ("ctl-x-map" variable nil nil [45042 45177])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [45179 45257])
            ("defalias" code nil nil [45258 45296])
            ("define-key" code nil nil [45297 45339])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [45341 45413])
            ("defalias" code nil nil [45414 45452])
            ("define-key" code nil nil [45453 45495])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [45535 45590])
            ("listify-key-sequence" function (:arguments ("key")) nil [45592 45830])
            ("eventp" function (:arguments ("obj")) nil [45832 46033])
            ("event-modifiers" function (:arguments ("event")) nil [46035 47329])
            ("event-basic-type" function (:arguments ("event")) nil [47331 48099])
            ("mouse-movement-p" function (:arguments ("object")) nil [48101 48234])
            ("mouse-event-p" function (:arguments ("object")) nil [48236 48454])
            ("event-start" function (:arguments ("event")) nil [48456 49616])
            ("event-end" function (:arguments ("event")) nil [49618 49936])
            ("event-click-count" function (:arguments ("event")) nil [49938 50148])
            ("event-line-count" function (:arguments ("event")) nil [50150 50349])
            ("posnp" function (:arguments ("obj")) nil [50406 51054])
            ("posn-window" function (:arguments ("position")) nil [51088 51270])
            ("posn-area" function (:arguments ("position")) nil [51272 51596])
            ("posn-point" function (:arguments ("position")) nil [51598 52064])
            ("posn-set-point" function (:arguments ("position")) nil [52066 52386])
            ("posn-x-y" function (:arguments ("position")) nil [52388 52641])
            ("declare-function" code nil nil [52643 52709])
            ("posn-col-row" function (:arguments ("position")) nil [52711 54529])
            ("posn-actual-col-row" function (:arguments ("position")) nil [54531 55119])
            ("posn-timestamp" function (:arguments ("position")) nil [55121 55309])
            ("posn-string" function (:arguments ("position")) nil [55311 55670])
            ("posn-image" function (:arguments ("position")) nil [55672 55912])
            ("posn-object" function (:arguments ("position")) nil [55914 56283])
            ("posn-object-x-y" function (:arguments ("position")) nil [56285 56572])
            ("posn-object-width-height" function (:arguments ("position")) nil [56574 56834])
            ("make-obsolete" code nil nil [56877 56943])
            ("make-obsolete" code nil nil [56944 56993])
            ("make-obsolete" code nil nil [57008 57081])
            ("make-obsolete" code nil nil [57082 57155])
            ("make-obsolete" code nil nil [57156 57231])
            ("make-obsolete" code nil nil [57232 57305])
            ("make-obsolete" code nil nil [57306 57379])
            ("make-obsolete" code nil nil [57380 57455])
            ("log10" function (:arguments ("x")) nil [57457 57566])
            ("defalias" code nil nil [57614 57648])
            ("make-obsolete" code nil nil [57649 57703])
            ("defalias" code nil nil [57704 57740])
            ("make-obsolete" code nil nil [57741 57797])
            ("set-advertised-calling-convention" code nil nil [57799 57900])
            ("set-advertised-calling-convention" code nil nil [57901 57969])
            ("set-advertised-calling-convention" code nil nil [57970 58041])
            ("set-advertised-calling-convention" code nil nil [58042 58127])
            ("make-obsolete-variable" code nil nil [58190 58254])
            ("make-obsolete-variable" code nil nil [58255 58338])
            ("make-obsolete-variable" code nil nil [58339 58411])
            ("make-obsolete-variable" code nil nil [58412 58488])
            ("make-obsolete-variable" code nil nil [58489 58546])
            ("make-obsolete" code nil nil [58547 58603])
            ("make-obsolete" code nil nil [58604 58664])
            ("make-obsolete" code nil nil [58666 58720])
            ("make-obsolete" code nil nil [58721 58777])
            ("make-obsolete-variable" code nil nil [58779 58903])
            ("define-obsolete-variable-alias" code nil nil [58942 59029])
            ("define-obsolete-variable-alias" code nil nil [59031 59124])
            ("define-obsolete-variable-alias" code nil nil [59125 59218])
            ("make-obsolete-variable" code nil nil [59464 59528])
            ("make-obsolete-variable" code nil nil [59530 59588])
            ("defvaralias" code nil nil [59590 59647])
            ("defalias" code nil nil [59720 59764])
            ("defalias" code nil nil [59765 59809])
            ("defalias" code nil nil [59810 59843])
            ("defalias" code nil nil [59844 59877])
            ("defalias" code nil nil [59878 59914])
            ("defalias" code nil nil [59915 59950])
            ("defalias" code nil nil [59951 59977])
            ("defalias" code nil nil [59978 60004])
            ("defalias" code nil nil [60005 60027])
            ("defalias" code nil nil [60053 60092])
            ("defalias" code nil nil [60093 60147])
            ("defalias" code nil nil [60148 60218])
            ("defalias" code nil nil [60219 60291])
            ("defalias" code nil nil [60292 60335])
            ("defalias" code nil nil [60336 60380])
            ("defalias" code nil nil [60381 60414])
            ("defalias" code nil nil [60415 60448])
            ("defalias" code nil nil [60480 60523])
            ("defalias" code nil nil [60524 60573])
            ("defalias" code nil nil [60575 60628])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [60667 62796])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [62798 64466])
            ("letrec" function (:arguments ("binders" "body")) nil [64468 65097])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [65099 66509])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [66511 68350])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [68352 71719])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [71722 73041])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [73043 74351])
            ("delay-mode-hooks" variable nil nil [74373 74467])
            ("delayed-mode-hooks" variable nil nil [74468 74549])
            ("make-variable-buffer-local" code nil nil [74550 74598])
            ("put" code nil nil [74599 74641])
            ("delayed-after-hook-functions" variable nil nil [74643 74786])
            ("make-variable-buffer-local" code nil nil [74787 74845])
            ("change-major-mode-after-body-hook" variable nil nil [74847 74961])
            ("after-change-major-mode-hook" variable nil nil [74963 75065])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [75067 76420])
            ("delay-mode-hooks" function (:arguments ("body")) nil [76422 76821])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [76882 77223])
            ("derived-mode-p" function (:arguments ("modes")) nil [77225 77456])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [77647 77840])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [77842 80527])
            ("autoloadp" function (:arguments ("object")) nil [80549 80651])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [81135 81898])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [81900 83396])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [83398 84804])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [84829 86154])
            ("process-lines" function (:arguments ("program" "args")) nil [86156 86761])
            ("process-live-p" function (:arguments ("process")) nil [86763 87076])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [87096 87566])
            ("process-kill-buffer-query-function" function nil nil [87568 87987])
            ("add-hook" code nil nil [87989 88064])
            ("process-get" function (:arguments ("process" "propname")) nil [88095 88307])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [88309 88548])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [88588 88638])
            ("read-key-delay" variable (:default-value 0.01) nil [88640 88668])
            ("read-key" function (:arguments ("prompt")) nil [88717 91941])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [91943 92280])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [92282 95018])
            ("read-number" function (:arguments ("prompt" "default")) nil [95020 96090])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [96092 97831])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [97833 101167])
            ("declare-function" code nil nil [101207 101286])
            ("y-or-n-p" function (:arguments ("prompt")) nil [101288 104849])
            ("atomic-change-group" function (:arguments ("body")) nil [104880 106086])
            ("prepare-change-group" function (:arguments ("buffer")) nil [106088 107564])
            ("activate-change-group" function (:arguments ("handle")) nil [107566 107804])
            ("accept-change-group" function (:arguments ("handle")) nil [107806 108097])
            ("cancel-change-group" function (:arguments ("handle")) nil [108099 109490])
            ("define-obsolete-function-alias" code nil nil [109548 109630])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [109632 111184])
            ("copy-overlay" function (:arguments ("o")) nil [111213 111787])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [111789 112797])
            ("suspend-hook" variable nil nil [112819 112903])
            ("suspend-resume-hook" variable nil nil [112905 113003])
            ("temp-buffer-show-hook" variable nil nil [113005 113221])
            ("temp-buffer-setup-hook" variable nil nil [113223 113454])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [113456 113831])
            ("buffer-narrowed-p" function nil nil [113864 113998])
            ("find-tag-default-bounds" function nil nil [114000 114254])
            ("find-tag-default" function nil nil [114256 114522])
            ("find-tag-default-as-regexp" function nil nil [114524 114959])
            ("find-tag-default-as-symbol-regexp" function nil nil [114961 115520])
            ("play-sound" function (:arguments ("sound")) nil [115522 116341])
            ("declare-function" code nil nil [116343 116399])
            ("shell-quote-argument" function (:arguments ("argument")) nil [116401 118735])
            ("string-to-list" function (:arguments ("string")) nil [118737 118836])
            ("string-to-vector" function (:arguments ("string")) nil [118838 118938])
            ("string-or-null-p" function (:arguments ("object")) nil [118940 119077])
            ("booleanp" function (:arguments ("object")) nil [119079 119237])
            ("special-form-p" function (:arguments ("object")) nil [119239 119482])
            ("macrop" function (:arguments ("object")) nil [119484 119714])
            ("field-at-pos" function (:arguments ("pos")) nil [119716 119986])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [119988 120351])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [120353 121163])
            ("yank-handled-properties" variable nil nil [121270 121302])
            ("yank-excluded-properties" variable nil nil [121303 121336])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [121338 122211])
            ("yank-undo-function" variable nil nil [122213 122240])
            ("insert-for-yank" function (:arguments ("string")) nil [122242 122723])
            ("insert-for-yank-1" function (:arguments ("string")) nil [122725 123757])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [123759 124244])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [124246 124932])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [124934 125246])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [125375 125813])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [125851 126835])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [126837 127329])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [127331 128972])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [128974 129523])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [129525 130715])
            ("track-mouse" function (:arguments ("body")) nil [130770 131076])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [131078 131466])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [131468 131988])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [131990 132550])
            ("with-selected-window" function (:arguments ("window" "body")) nil [132552 133690])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [133692 134433])
            ("save-window-excursion" function (:arguments ("body")) nil [134435 135254])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [135256 136651])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [136704 139157])
            ("with-temp-file" function (:arguments ("file" "body")) nil [139159 139854])
            ("with-temp-message" function (:arguments ("message" "body")) nil [139856 140783])
            ("with-temp-buffer" function (:arguments ("body")) nil [140785 141344])
            ("with-silent-modifications" function (:arguments ("body")) nil [141346 142336])
            ("with-output-to-string" function (:arguments ("body")) nil [142338 142783])
            ("with-local-quit" function (:arguments ("body")) nil [142785 143540])
            ("setq" code nil nil [143602 143748])
            ("while-no-input" function (:arguments ("body")) nil [143750 144250])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [144252 144805])
            ("define-obsolete-function-alias" code nil nil [144807 144902])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [144904 145841])
            ("combine-after-change-calls" function (:arguments ("body")) nil [145843 146538])
            ("with-case-table" function (:arguments ("table" "body")) nil [146540 147061])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [147063 147488])
            ("save-match-data-internal" variable nil nil [147522 147555])
            ("save-match-data" function (:arguments ("body")) nil [147813 148493])
            ("match-string" function (:arguments ("num" "string")) nil [148495 149140])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [149142 149866])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [149869 150518])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [150521 151792])
            ("looking-at-p" function (:arguments ("regexp")) nil [151794 151972])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [151974 152194])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [152196 154106])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [154128 154481])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [154743 157859])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [157861 158541])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [158543 159179])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [159213 159617])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [159619 162300])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [162303 162698])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [162700 163109])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [163111 163894])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [163896 164131])
            ("load-history-regexp" function (:arguments ("file")) nil [164172 164808])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [164810 165246])
            ("put" code nil nil [165248 165294])
            ("eval-after-load" function (:arguments ("file" "form")) nil [165295 169177])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [169179 169554])
            ("after-load-functions" variable nil nil [169556 169729])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [169731 171298])
            ("eval-next-after-load" function (:arguments ("file")) nil [171300 171600])
            ("display-delayed-warnings" function nil nil [171604 171871])
            ("collapse-delayed-warnings" function nil nil [171873 172552])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [172672 173012])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [173014 173269])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [173298 173641])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [173643 173888])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [173912 174548])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [174550 174870])
            ("syntax-after" function (:arguments ("pos")) nil [174872 175245])
            ("syntax-class" function (:arguments ("syntax")) nil [175247 175599])
            ("word-move-empty-char-table" variable nil nil [175630 175800])
            ("forward-word-strictly" function (:arguments ("arg")) nil [175802 176540])
            ("backward-word-strictly" function (:arguments ("arg")) nil [176542 177124])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177142 177725])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177740 178289])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [178310 178792])
            ("text-clone--maintaining" variable nil nil [178814 178850])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [178852 180918])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [180920 183168])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [183276 184854])
            ("backtrace--print-frame" function (:arguments ("evald" "func" "args" "flags")) nil [184858 185254])
            ("backtrace" function nil nil [185256 185527])
            ("backtrace-frames" function (:arguments ("base")) nil [185529 185882])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [185884 186684])
            ("called-interactively-p-functions" variable nil nil [186688 187105])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [187107 187192])
            ("called-interactively-p" function (:arguments ("kind")) nil [187194 191375])
            ("interactive-p" function nil nil [191377 192460])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [192462 192807])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [192809 193117])
            ("define-obsolete-function-alias" code nil nil [193119 193206])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [193208 195984])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [196567 197334])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [197336 199075])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [199077 199576])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [199578 199695])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [199697 201373])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [201375 201530])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [201532 202636])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [202673 202832])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [202835 204369])
            ("version-to-list" function (:arguments ("ver")) nil [204372 207155])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [207157 207988])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [207991 208790])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [208793 209578])
            ("version-list-not-zero" function (:arguments ("lst")) nil [209580 209890])
            ("version<" function (:arguments ("v1" "v2")) nil [209893 210397])
            ("version<=" function (:arguments ("v1" "v2")) nil [210399 210917])
            ("version=" function (:arguments ("v1" "v2")) nil [210919 211413])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [211415 211792])
            ("package--description-file" function (:arguments ("dir")) nil [211794 212125])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [212150 212500])
            ("definition-prefixes" variable (:default-value (make-hash-table :test (quote equal))) nil [212515 213216])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [213218 213440])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [213442 213504])
            ("when" code nil nil [213656 213781])
            ("unmsys--file-name" function (:arguments ("file")) nil [213914 214401]))          
      :file "subr.el"
      :pointmax 214426
      :fsize 214426
      :lastmodtime '(23727 39260 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("delete-auto-save-files" variable (:default-value t) nil [1373 1623])
            ("directory-abbrev-alist" variable nil nil [1625 2637])
            ("make-backup-files" variable (:default-value t) nil [2639 3562])
            ("backup-inhibited" variable nil nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable nil nil [3900 4078])
            ("backup-by-copying-when-linked" variable nil nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4923 5546])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5548 5767])
            ("buffer-offer-save" variable nil nil [5769 6390])
            ("make-variable-buffer-local" code nil nil [6391 6438])
            ("put" code nil nil [6439 6482])
            ("find-file-existing-other-name" variable (:default-value t) nil [6484 6777])
            ("find-file-visit-truename" variable nil nil [6779 7151])
            ("put" code nil nil [7152 7214])
            ("revert-without-query" variable nil nil [7216 7581])
            ("buffer-file-number" variable nil nil [7583 7852])
            ("make-variable-buffer-local" code nil nil [7853 7901])
            ("put" code nil nil [7902 7946])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7948 8093])
            ("buffer-file-read-only" variable nil nil [8095 8185])
            ("make-variable-buffer-local" code nil nil [8186 8237])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [8239 8683])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8751 8820])
            ("declare-function" code nil nil [8822 8872])
            ("declare-function" code nil nil [8873 8922])
            ("declare-function" code nil nil [8923 9009])
            ("declare-function" code nil nil [9010 9077])
            ("declare-function" code nil nil [9078 9150])
            ("declare-function" code nil nil [9151 9207])
            ("declare-function" code nil nil [9208 9267])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [9269 9942])
            ("file-precious-flag" variable nil nil [9944 10784])
            ("break-hardlink-on-save" variable nil nil [10786 11541])
            ("version-control" variable nil nil [11543 11900])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [11902 12046])
            ("put" code nil nil [12048 12127])
            ("dired-kept-versions" variable (:default-value 2) nil [12129 12269])
            ("delete-old-versions" variable nil nil [12271 12537])
            ("kept-old-versions" variable (:default-value 2) nil [12539 12678])
            ("put" code nil nil [12679 12734])
            ("kept-new-versions" variable (:default-value 2) nil [12736 12925])
            ("put" code nil nil [12926 12981])
            ("require-final-newline" variable nil nil [12983 13754])
            ("mode-require-final-newline" variable (:default-value t) nil [13756 14891])
            ("auto-save-default" variable (:default-value t) nil [14893 15035])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [15037 16465])
            ("auto-save--timer" variable nil nil [16467 16534])
            ("auto-save-visited-interval" variable (:default-value 5) nil [16536 17017])
            ("define-minor-mode" code nil nil [17019 17991])
            ("make-obsolete-variable" code nil nil [18186 18305])
            ("save-abbrevs" variable (:default-value t) nil [18307 18518])
            ("find-file-run-dired" variable (:default-value t) nil [18520 18717])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [18719 19047])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [19108 19436])
            ("define-obsolete-variable-alias" code nil nil [19544 19645])
            ("find-file-not-found-functions" variable nil nil [19646 19947])
            ("define-obsolete-variable-alias" code nil nil [20045 20117])
            ("find-file-hook" variable nil nil [20118 20471])
            ("define-obsolete-variable-alias" code nil nil [20473 20552])
            ("write-file-functions" variable nil nil [20553 21357])
            ("put" code nil nil [21358 21404])
            ("local-write-file-hooks" variable nil nil [21406 21441])
            ("make-variable-buffer-local" code nil nil [21442 21494])
            ("put" code nil nil [21495 21543])
            ("make-obsolete-variable" code nil nil [21544 21621])
            ("define-obsolete-variable-alias" code nil nil [21623 21714])
            ("write-contents-functions" variable nil nil [21715 22602])
            ("make-variable-buffer-local" code nil nil [22603 22657])
            ("enable-local-variables" variable (:default-value t) nil [22659 23911])
            ("enable-dir-local-variables" variable (:default-value t) nil [23913 24134])
            ("local-enable-local-variables" variable (:default-value t) nil [25497 25974])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [25976 26367])
            ("view-read-only" variable nil nil [26369 26719])
            ("file-name-history" variable nil nil [26721 26904])
            ("save-silently" variable nil nil [26906 27061])
            ("put" code nil nil [27065 27119])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [27120 27726])
            ("declare-function" code nil nil [27728 27800])
            ("declare-function" code nil nil [27801 27873])
            ("convert-standard-filename" function (:arguments ("filename")) nil [27875 29031])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [29033 30154])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [30158 30426])
            ("cd-path" variable nil nil [30428 30558])
            ("parse-colon-path" function (:arguments ("search-path")) nil [30560 31179])
            ("cd-absolute" function (:arguments ("dir")) nil [31181 32086])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [32088 34163])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [34165 35560])
            ("module-file-suffix" variable nil nil [35562 35589])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [35591 36059])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [36061 37438])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [37440 40402])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [40404 40812])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [40814 41418])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [41420 42778])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42780 42982])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42984 44670])
            ("executable-find" function (:arguments ("command")) nil [44673 44981])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44983 45678])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45680 47432])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47731 48450])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48452 49671])
            ("file-local-name" function (:arguments ("file")) nil [49673 50089])
            ("file-local-copy" function (:arguments ("file")) nil [50091 50480])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [50482 50763])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [50765 51544])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [51546 56382])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [56384 57805])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [57937 59054])
            ("mounted-file-systems" variable (:default-value (if (memq system-type (quote (windows-nt cygwin))) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [59056 59487])
            ("temporary-file-directory" function nil nil [59489 60265])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [60267 61320])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [61322 62262])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [62264 63101])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [63103 65340])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [65343 65956])
            ("confirm-nonexistent-file-or-buffer" function nil nil [65958 66399])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [66401 67644])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [67646 67760])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67762 69476])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69478 70860])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [70862 72238])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [72240 72675])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [72677 73102])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73104 73485])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73487 73938])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73940 74386])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74388 75337])
            ("kill-buffer-hook" variable nil nil [75398 75638])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [75640 78693])
            ("create-file-buffer" function (:arguments ("filename")) nil [78818 79498])
            ("generate-new-buffer" function (:arguments ("name")) nil [79500 79705])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [79707 79859])
            ("make-obsolete-variable" code nil nil [79860 79937])
            ("abbreviated-home-dir" variable nil nil [79939 80113])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [80115 84173])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [84175 86102])
            ("find-file-wildcards" variable (:default-value t) nil [86105 86352])
            ("find-file-suppress-same-file-warnings" variable nil nil [86354 86680])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [86682 86961])
            ("out-of-memory-warning-percentage" variable nil nil [86963 87346])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [87348 87840])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [87842 88680])
            ("files--message" function (:arguments ("format" "args")) nil [88682 88949])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [88951 96019])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [96021 98515])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [98518 99539])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [99541 100233])
            ("insert-file-literally" function (:arguments ("filename")) nil [100235 100718])
            ("find-file-literally" variable nil nil [100720 100927])
            ("put" code nil nil [100928 100973])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [100975 102304])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [102307 105672])
            ("define-obsolete-function-alias" code nil nil [105674 105749])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [105751 107743])
            ("auto-mode-case-fold" variable (:default-value t) nil [107745 108183])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [108185 119709])
            ("put" code nil nil [119710 119756])
            ("conf-mode-maybe" function nil nil [119758 120008])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [120010 121405])
            ("define-obsolete-variable-alias" code nil nil [121407 121520])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [121719 122579])
            ("define-obsolete-variable-alias" code nil nil [122581 122691])
            ("inhibit-local-variables-suffixes" variable nil nil [122693 122969])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [123041 123147])
            ("inhibit-local-variables-p" function nil nil [123149 123959])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [123961 124479])
            ("magic-mode-alist" variable nil nil [124481 125015])
            ("put" code nil nil [125016 125063])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [125065 126608])
            ("put" code nil nil [126609 126665])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [126667 126809])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [126811 134182])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [134435 134842])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [134844 135110])
            ("set-auto-mode-1" function nil nil [135112 136617])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [136655 136861])
            ("put" code nil nil [136862 136916])
            ("hack-local-variables-hook" variable nil nil [136918 137151])
            ("safe-local-variable-values" variable nil nil [137153 137413])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [137415 138077])
            ("mapc" code nil nil [138105 138722])
            ("dolist" code nil nil [139364 140052])
            ("put" code nil nil [140054 140168])
            ("put" code nil nil [140170 140216])
            ("file-local-variables-alist" variable nil nil [140218 140573])
            ("make-variable-buffer-local" code nil nil [140574 140630])
            ("put" code nil nil [140631 140683])
            ("dir-local-variables-alist" variable nil nil [140685 141067])
            ("make-variable-buffer-local" code nil nil [141068 141123])
            ("before-hack-local-variables-hook" variable nil nil [141125 141543])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [141545 144415])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [144417 144504])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [144506 147784])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [147786 150272])
            ("hack-local-variables--warned-lexical" variable nil nil [150333 150382])
            ("hack-local-variables" function (:arguments ("handle-mode")) nil [150384 157004])
            ("hack-local-variables-apply" function nil nil [157006 157807])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [157809 158497])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [158499 159402])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [159404 159508])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [159510 159698])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [159700 161520])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [161522 161954])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [161956 162869])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [162935 163050])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [163052 163628])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [163630 163763])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [163765 164410])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [164412 166583])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [166585 167349])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [167351 168726])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [168728 169426])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [169428 170358])
            ("dir-locals-find-file" function (:arguments ("file")) nil [170360 173487])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [173489 174793])
            ("define-obsolete-function-alias" code nil nil [174795 174889])
            ("enable-remote-dir-locals" variable nil nil [174891 175057])
            ("hack-dir-local-variables--warned-coding" variable nil nil [175059 175111])
            ("hack-dir-local-variables" function nil nil [175113 176730])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [176732 177038])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [177042 177477])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [177479 182568])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [182570 184710])
            ("file-extended-attributes" function (:arguments ("filename")) nil [184713 185027])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [185029 185631])
            ("backup-buffer" function nil nil [185634 189257])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [189259 190360])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [190362 190655])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [190657 191356])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [191358 193165])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [193167 193892])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [193894 194823])
            ("file-name-base" function (:arguments ("filename")) nil [194825 195069])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [195071 195819])
            ("backup-directory-alist" variable nil nil [195821 196858])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [196860 198156])
            ("make-backup-file-name" function (:arguments ("file")) nil [198158 198471])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [198473 199223])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [199225 201825])
            ("backup-file-name-p" function (:arguments ("file")) nil [201827 202088])
            ("backup-extract-version-start" variable nil nil [202090 202127])
            ("backup-extract-version" function (:arguments ("fn")) nil [202302 202754])
            ("find-backup-file-name" function (:arguments ("fn")) nil [202756 204895])
            ("file-nlinks" function (:arguments ("filename")) nil [204897 205014])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [205016 207771])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207774 210592])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [210594 211165])
            ("auto-save-hook" variable nil nil [211167 211239])
            ("before-save-hook" variable nil nil [211241 211439])
            ("after-save-hook" variable nil nil [211441 211660])
            ("save-buffer-coding-system" variable nil nil [211662 212034])
            ("make-variable-buffer-local" code nil nil [212036 212091])
            ("put" code nil nil [212092 212143])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [212145 216989])
            ("basic-save-buffer-1" function nil nil [217271 217574])
            ("basic-save-buffer-2" function nil nil [217663 221824])
            ("declare-function" code nil nil [221826 221912])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [221914 223080])
            ("put" code nil nil [223081 223142])
            ("buffer-save-without-query" variable nil nil [223144 223260])
            ("make-variable-buffer-local" code nil nil [223261 223316])
            ("save-some-buffers-default-predicate" variable nil nil [223318 223730])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [223732 227471])
            ("clear-visited-file-modtime" function nil nil [227474 227655])
            ("not-modified" function (:arguments ("arg")) nil [227657 228180])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [228182 228468])
            ("insert-file" function (:arguments ("filename")) nil [228470 228918])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [228920 229578])
            ("file-newest-backup" function (:arguments ("filename")) nil [229580 230503])
            ("rename-uniquely" function (:user-visible-flag t) nil [230505 231521])
            ("files--ensure-directory" function (:arguments ("dir")) nil [231523 231774])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [231776 233323])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [233325 233471])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [233473 233821])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [233823 236586])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [236588 237148])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [237150 238268])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [238270 241390])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [241438 242000])
            ("put" code nil nil [242004 242052])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [242053 242505])
            ("put" code nil nil [242507 242576])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [242577 243049])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [243051 243613])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [243615 244530])
            ("before-revert-hook" variable nil nil [244532 244735])
            ("after-revert-hook" variable nil nil [244737 245092])
            ("revert-buffer-in-progress-p" variable nil nil [245094 245208])
            ("revert-buffer-internal-hook" variable nil nil [245210 245246])
            ("revert-buffer-preserve-modes" variable nil nil [245436 245473])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [245475 247687])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [247689 251044])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [251046 253246])
            ("recover-this-file" function (:user-visible-flag t) nil [253248 253479])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [253481 255564])
            ("recover-session" function (:user-visible-flag t) nil [255566 257298])
            ("recover-session-finish" function (:user-visible-flag t) nil [257300 259703])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [259705 259956])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [259958 260561])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [260563 261220])
            ("rename-auto-save-file" function nil nil [261224 261788])
            ("make-auto-save-file-name" function nil nil [261790 265961])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [265963 266191])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [266194 268377])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [268380 268541])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [268543 268709])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [268711 270317])
            ("files" package nil nil [270391 270427])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [270429 271775])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [271777 273615])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [273618 273745])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [273747 274284])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [274286 274473])
            ("get-free-disk-space" function (:arguments ("dir")) nil [274475 276245])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [276317 278706])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [278708 278753])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [278755 279570])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [279572 281583])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [282657 291413])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [291415 291981])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [291983 292467])
            ("kill-emacs-query-functions" variable nil nil [292469 292832])
            ("confirm-kill-emacs" variable nil nil [292834 293274])
            ("confirm-kill-processes" variable (:default-value t) nil [293276 293639])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [293641 295932])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [295934 296454])
            ("setq" code nil nil [296564 296685])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [296886 300573])
            ("file-name-quoted-p" function (:arguments ("name")) nil [300575 300767])
            ("file-name-quote" function (:arguments ("name")) nil [300769 301090])
            ("file-name-unquote" function (:arguments ("name")) nil [301092 301472])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [301515 301982])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [301984 302833])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [302835 303989])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [303991 305074])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [305076 306143])
            ("define-obsolete-variable-alias" code nil nil [306145 306227])
            ("trash-directory" variable nil nil [306251 306654])
            ("trash--hexify-table" variable nil nil [306656 306684])
            ("declare-function" code nil nil [306686 306752])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [306754 311748])
            ("file-attribute-type" function (:arguments ("attributes")) nil [311750 311966])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [311968 312115])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [312117 312384])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [312386 312654])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [312656 312879])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [312881 313173])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [313175 313513])
            ("file-attribute-size" function (:arguments ("attributes")) nil [313515 313721])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [313723 313907])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [313909 314350])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [314352 314807])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [314809 315664])
            ("define-key" code nil nil [315667 315707])
            ("define-key" code nil nil [315708 315758])
            ("define-key" code nil nil [315759 315809])
            ("define-key" code nil nil [315810 315852])
            ("define-key" code nil nil [315853 315898])
            ("define-key" code nil nil [315899 315940])
            ("define-key" code nil nil [315941 315980])
            ("define-key" code nil nil [315981 316019])
            ("define-key" code nil nil [316020 316065])
            ("define-key" code nil nil [316066 316123])
            ("define-key" code nil nil [316124 316169])
            ("define-key" code nil nil [316171 316223])
            ("define-key" code nil nil [316224 316286])
            ("define-key" code nil nil [316287 316342])
            ("define-key" code nil nil [316343 316402])
            ("define-key" code nil nil [316403 316450])
            ("define-key" code nil nil [316452 316510])
            ("define-key" code nil nil [316511 316562])
            ("define-key" code nil nil [316563 316617])
            ("define-key" code nil nil [316618 316679])
            ("define-key" code nil nil [316680 316739]))          
      :file "files.el"
      :pointmax 316764
      :fsize 316763
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1249 1266])
            ("custom-define-hook" variable nil nil [1268 1417])
            ("custom-dont-initialize" variable nil nil [1419 1602])
            ("custom-current-group-alist" variable nil nil [1604 1717])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1747 2210])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2212 2787])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2789 3556])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3558 4336])
            ("custom-delayed-init-variables" variable nil nil [4338 4435])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4437 5561])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5563 8228])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8230 14484])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14512 17452])
            ("custom-current-group" function nil nil [17481 17570])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17572 18617])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18619 19782])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19784 20130])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20132 20534])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20553 21143])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21145 21856])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21858 22611])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22613 23064])
            ("defalias" code nil nil [23065 23121])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23123 23359])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23361 23511])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23513 23687])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23689 23985])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23987 24273])
            ("custom-variable-p" function (:arguments ("variable")) nil [24275 24708])
            ("define-obsolete-function-alias" code nil nil [24710 24785])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24787 25082])
            ("custom-load-recursion" variable nil nil [25225 25301])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25303 26562])
            ("custom-local-buffer" variable nil nil [26565 26885])
            ("put" code nil nil [26886 26931])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26933 27314])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27316 27740])
            ("custom-quote" function (:arguments ("sexp")) nil [27742 28080])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28082 29245])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29247 30402])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30404 31586])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [33413 33801])
            ("custom-theme-p" function (:arguments ("theme")) nil [33803 33912])
            ("custom-check-theme" function (:arguments ("theme")) nil [33914 34092])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34094 36290])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36292 37062])
            ("custom-set-variables" function (:arguments ("args")) nil [37065 37676])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37678 40353])
            ("custom--sort-vars-table" variable nil nil [40355 40387])
            ("custom--sort-vars-result" variable nil nil [40388 40421])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40423 41955])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41957 42541])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [43137 43758])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [43760 44248])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44250 44755])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44779 45126])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [45128 45886])
            ("custom--inhibit-theme-enable" variable nil nil [45888 46174])
            ("provide-theme" function (:arguments ("theme")) nil [46176 46574])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [46576 47196])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47198 50122])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [50124 50874])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50876 51141])
            ("custom-available-themes" function nil nil [51143 52023])
            ("custom-theme--load-path" function nil nil [52025 52344])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52391 53627])
            ("custom-enabled-themes" variable nil nil [53629 54939])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54941 55059])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [55061 56660])
            ("declare-function" code nil nil [56702 56796])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56798 57158])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [57160 57553])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [57555 58010])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [58012 58432])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [58649 59020])
            ("custom-reset-variables" function (:arguments ("args")) nil [59022 59363])
            ("custom" package nil nil [59379 59396]))          
      :file "custom.el"
      :pointmax 59422
      :fsize 59421
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "widget.el"
      :fsize 3916
      :lastmodtime '(23603 24960 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1015 1031])
            ("find-dired" customgroup (:user-visible-flag t) nil [1033 1139])
            ("find-exec-terminator" variable (:default-value (if (eq 0 (ignore-errors (process-file find-program nil nil nil null-device "-exec" "echo" "{}" "+"))) "+" (shell-quote-argument ";"))) nil [1250 1698])
            ("find-ls-option" variable (:default-value (if (eq 0 (ignore-errors (process-file find-program nil nil nil null-device "-ls"))) (cons "-ls" (if (eq system-type (quote berkeley-unix)) "-gilsb" "-dilsb")) (cons (format "-exec ls -ld {} %s" find-exec-terminator) "-ld"))) nil [1807 2913])
            ("find-ls-subdir-switches" variable (:default-value (if (string-match "-[a-z]*b" (cdr find-ls-option)) "-alb" "-al")) nil [2915 3294])
            ("find-grep-options" variable (:default-value (if (or (eq system-type (quote berkeley-unix)) (string-match "solaris2" system-configuration)) "-s" "-q")) nil [3296 3657])
            ("find-name-arg" variable (:default-value (if read-file-name-completion-ignore-case "-iname" "-name")) nil [3705 4034])
            ("find-args" variable nil nil [4036 4112])
            ("find-args-history" variable nil nil [4172 4202])
            ("dired-sort-inhibit" variable nil nil [4204 4231])
            ("find-dired" function
               (:user-visible-flag t
                :arguments ("dir" "args"))
                nil [4248 8008])
            ("kill-find" function (:user-visible-flag t) nil [8010 8332])
            ("find-name-dired" function
               (:user-visible-flag t
                :arguments ("dir" "pattern"))
                nil [8349 8863])
            ("defalias" code nil nil [9063 9105])
            ("find-grep-dired" function
               (:user-visible-flag t
                :arguments ("dir" "regexp"))
                nil [9121 10307])
            ("find-dired-filter" function (:arguments ("proc" "string")) nil [10309 12116])
            ("find-dired-sentinel" function (:arguments ("proc" "state")) nil [12118 13011])
            ("find-dired" package nil nil [13015 13036]))          
      :file "find-dired.el"
      :pointmax 13066
      :fsize 13065
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1150 1171])
            ("add-hook" code nil nil [1242 1293])
            ("add-hook" code nil nil [1294 1345])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1766 1876])
            ("help-window-old-frame" variable nil nil [1878 1974])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "o" (quote describe-symbol)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1976 4265])
            ("define-key" code nil nil [4267 4331])
            ("define-key" code nil nil [4332 4376])
            ("define-key" code nil nil [4377 4419])
            ("fset" code nil nil [4420 4449])
            ("help-button-cache" variable nil nil [4518 4548])
            ("help-quit" function (:user-visible-flag t) nil [4552 4646])
            ("help-return-method" variable nil nil [4648 5017])
            ("define-obsolete-function-alias" code nil nil [5019 5112])
            ("help-print-return-message" function (:arguments ("function")) nil [5113 7408])
            ("fset" code nil nil [7468 7529])
            ("defalias" code nil nil [7531 7571])
            ("defalias" code nil nil [7604 7653])
            ("make-help-screen" code nil nil [7699 10813])
            ("function-called-at-point" function nil nil [10818 12550])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12581 12736])
            ("describe-distribution" function (:user-visible-flag t) nil [12738 12882])
            ("describe-copying" function (:user-visible-flag t) nil [12884 13022])
            ("describe-gnu-project" function (:user-visible-flag t) nil [13070 13227])
            ("define-obsolete-function-alias" code nil nil [13229 13308])
            ("describe-no-warranty" function (:user-visible-flag t) nil [13310 13556])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13558 14064])
            ("setq" code nil nil [14155 14207])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [14209 16619])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16621 16740])
            ("define-obsolete-function-alias" code nil nil [16742 16809])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16812 17137])
            ("view-order-manuals" function (:user-visible-flag t) nil [17139 17317])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [17319 17506])
            ("view-emacs-problems" function (:user-visible-flag t) nil [17508 17656])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17658 17781])
            ("view-external-packages" function (:user-visible-flag t) nil [17850 18007])
            ("view-lossage" function (:user-visible-flag t) nil [18009 18978])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18999 19835])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [19878 20612])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20614 22776])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22778 23138])
            ("help--analyze-key" function (:arguments ("key" "untranslated")) nil [23140 24670])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [24672 25532])
            ("help--key-binding-keymap" function (:arguments ("key" "accept-default" "no-remap" "position")) nil [25534 26596])
            ("help--binding-locus" function (:arguments ("key" "position")) nil [26598 28303])
            ("help-read-key-sequence" function (:arguments ("no-mouse-movement")) nil [28305 32689])
            ("help-downify-mouse-event-type" function (:arguments ("base")) nil [32691 33409])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [33411 38329])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [38332 42253])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [42256 43143])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [43155 43369])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [43371 43715])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [43730 44047])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [44049 44598])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [44600 45390])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [45438 46207])
            ("temp-buffer-max-width" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [46209 46973])
            ("define-minor-mode" code nil nil [46975 48131])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [48133 49890])
            ("help-window-select" variable nil nil [49910 50878])
            ("help-enable-auto-load" variable (:default-value t) nil [50880 51267])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [51269 52187])
            ("help-window-setup" function (:arguments ("window" "value")) nil [52189 54990])
            ("with-help-window" function (:arguments ("buffer-or-name" "body")) nil [55562 56601])
            ("help-form-show" function nil nil [56729 56919])
            ("help--docstring-quote" function (:arguments ("string")) nil [56923 57145])
            ("help-split-fundoc" function (:arguments ("docstring" "def")) nil [57370 58383])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [58385 59235])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [59237 61626])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [61628 62066])
            ("define-obsolete-function-alias" code nil nil [62068 62142])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [62144 62299])
            ("help" package nil nil [62303 62318]))          
      :file "help.el"
      :pointmax 62342
      :fsize 62345
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1171 . 1172) (symbol 1132 . 1149) (open-paren 1131 . 1132)))
    (semanticdb-table "semanticdb-table"
      :file "help-macro.el"
      :fsize 8263
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1057 1092])
            ("cua-enable-cua-keys" variable nil nil [1136 1164])
            ("or" code nil nil [1278 1388])
            ("setq" code nil nil [1542 1582])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1710 1773])
            ("define-obsolete-variable-alias" code nil nil [1841 1923])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1924 8904])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8906 9236])
            ("menu-bar-last-search-type" variable nil nil [9268 9376])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9378 9771])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9773 10170])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10172 10767])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10769 10989])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10991 11330])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11332 11683])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11730 12547])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12549 15013])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15045 16036])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16082 18004])
            ("menu-bar-goto-uses-etags-p" function nil nil [18006 18150])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18152 18206])
            ("fset" code nil nil [18207 18249])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18251 22275])
            ("define-obsolete-function-alias" code nil nil [22277 22359])
            ("put" code nil nil [22503 22591])
            ("put" code nil nil [22592 22649])
            ("put" code nil nil [22650 22905])
            ("clipboard-yank" function (:user-visible-flag t) nil [22907 23072])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23074 23409])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23411 23734])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23736 24359])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24391 26656])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26729 27180])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27182 28390])
            ("menu-set-font" function (:user-visible-flag t) nil [28438 28737])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28739 30913])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [31022 31176])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31178 31392])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31394 31601])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31603 31813])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31815 31931])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32215 34657])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34659 34839])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34841 35066])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [35068 35279])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35281 35466])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35468 35650])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35652 35822])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35824 38236])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38238 38389])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38391 38577])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38579 38776])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38778 38973])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38975 39146])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39148 41172])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41174 41330])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41332 41485])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41487 41610])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote right)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote left)))))) (bindings--define-key menu [none] (quote (menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil)))) menu)) nil [41612 43164])
            ("menu-bar-frame-for-menubar" function nil nil [43166 43349])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [43351 43471])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [43473 43621])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [43622 43774])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [43775 43936])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [43937 44101])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44102 44260])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44261 44428])
            ("when" code nil nil [44430 47204])
            ("display-line-numbers-type" variable nil nil [47206 47240])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [47241 47443])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] (\` (menu-item "Visual Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote visual)) (message "Visual line numbers enabled"))) :help "Enable visual line numbers" :button (:radio eq display-line-numbers (quote visual)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [relative] (\` (menu-item "Relative Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote relative)) (message "Relative line numbers enabled"))) :help "Enable relative line numbers" :button (:radio eq display-line-numbers (quote relative)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [absolute] (\` (menu-item "Absolute Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode t) (setq display-line-numbers t) (message "Absolute line numbers enabled"))) :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [none] (\` (menu-item "No Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode nil) (message "Line numbers disabled"))) :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [47445 49678])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] (\` (menu-item "Line Numbers for All Lines" (\, menu-bar-showhide-line-numbers-menu)))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll Bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool Bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [49680 53691])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [53693 55790])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [55792 57738])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place-mode "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place-mode) (not (symbol-value (quote save-place-mode)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [57740 63074])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [63105 65044])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [65046 67387])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [67389 67516])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Servers" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [67518 71580])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [71609 74449])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [74451 74574])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [74576 74712])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [74714 74853])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [74855 75026])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [75028 75209])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [75211 77432])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [77434 78708])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [78710 78858])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [78860 82608])
            ("bindings--define-key" code nil nil [82610 82697])
            ("bindings--define-key" code nil nil [82698 82792])
            ("bindings--define-key" code nil nil [82793 82886])
            ("bindings--define-key" code nil nil [82887 82971])
            ("bindings--define-key" code nil nil [82972 83056])
            ("bindings--define-key" code nil nil [83057 83157])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [83159 83463])
            ("menu-bar-non-minibuffer-window-p" function nil nil [83465 83911])
            ("kill-this-buffer" function (:user-visible-flag t) nil [83913 84457])
            ("kill-this-buffer-enabled-p" function nil nil [84459 84927])
            ("put" code nil nil [84929 84990])
            ("delete-frame-enabled-p" function nil nil [85065 85350])
            ("yank-menu-length" variable (:default-value 20) nil [85352 85463])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [85465 86456])
            ("put" code nil nil [86458 86504])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [86505 86737])
            ("buffers-menu-max-size" variable (:default-value 10) nil [86759 87103])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [87105 87454])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [87456 88200])
            ("buffers-menu-show-status" variable (:default-value t) nil [88202 88575])
            ("list-buffers-directory" variable nil nil [88577 88686])
            ("make-variable-buffer-local" code nil nil [88687 88739])
            ("menu-bar-select-buffer" function nil nil [88741 88830])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [88832 88943])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [88945 89815])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [89884 89934])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [89936 90124])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [90126 90554])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [90556 94442])
            ("add-hook" code nil nil [94444 94501])
            ("menu-bar-update-buffers" code nil nil [94503 94528])
            ("dolist" code nil nil [95151 95447])
            ("let" code nil nil [95449 95938])
            ("let" code nil nil [95940 97009])
            ("define-minor-mode" code nil nil [97012 98376])
            ("put" code nil nil [98820 98861])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98863 99269])
            ("declare-function" code nil nil [99271 99336])
            ("declare-function" code nil nil [99337 99406])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [99408 99622])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [99624 102634])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [102636 103384])
            ("tty-menu-open-use-tmm" variable nil nil [103386 103847])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [103849 104000])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [104002 105570])
            ("global-set-key" code nil nil [105572 105609])
            ("buffer-menu-open" function (:user-visible-flag t) nil [105611 105836])
            ("global-set-key" code nil nil [105838 105880])
            ("mouse-buffer-menu-keymap" function nil nil [105882 106209])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [106211 109756])
            ("menu-bar" package nil nil [109758 109777]))          
      :file "menu-bar.el"
      :pointmax 109805
      :fsize 109804
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil))
  :file "!drive_c!Tools!emacs-26.2!share!emacs!26.2!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
