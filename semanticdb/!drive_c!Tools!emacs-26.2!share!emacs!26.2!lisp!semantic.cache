;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [4415 4431])
            ("locate-current-filter" variable nil nil [4447 4481])
            ("locate-local-filter" variable nil nil [4482 4514])
            ("locate-local-search" variable nil nil [4515 4547])
            ("locate-local-prompt" variable nil nil [4548 4580])
            ("locate" customgroup (:user-visible-flag t) nil [4582 4679])
            ("locate-command" variable (:default-value "locate") nil [4681 5803])
            ("locate-post-command-hook" variable nil nil [5805 5942])
            ("locate-history-list" variable nil nil [5944 6029])
            ("locate-grep-history-list" variable nil nil [6031 6133])
            ("locate-make-command-line" variable (:default-value (quote locate-default-make-command-line)) nil [6135 6637])
            ("locate-buffer-name" variable (:default-value "*Locate*") nil [6639 6781])
            ("locate-fcodes-file" variable nil nil [6783 7321])
            ("locate-header-face" variable nil nil [7323 7467])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [7484 7737])
            ("locate-update-when-revert" variable nil nil [7739 8128])
            ("locate-update-command" variable (:default-value "updatedb") nil [8130 8270])
            ("locate-update-path" variable (:default-value "/") nil [8272 8707])
            ("locate-prompt-for-command" variable nil nil [8709 9043])
            ("locate-mode-hook" variable nil nil [9045 9181])
            ("locate-default-make-command-line" function (:arguments ("search-string")) nil [9197 9291])
            ("locate-word-at-point" function nil nil [9293 9579])
            ("locate-prompt-for-search-string" function nil nil [9630 10399])
            ("locate" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [10416 12821])
            ("locate-with-filter" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [12838 13778])
            ("locate-filter-output" function (:arguments ("filter")) nil [13780 13908])
            ("locate-mode-map" variable (:default-value (let ((map (copy-keymap dired-mode-map))) (define-key map [menu-bar Dired] (quote undefined)) (define-key map [menu-bar subdir] (quote undefined)) (define-key map [menu-bar mark executables] (quote undefined)) (define-key map [menu-bar mark directory] (quote undefined)) (define-key map [menu-bar mark directories] (quote undefined)) (define-key map [menu-bar mark symlinks] (quote undefined)) (define-key map [M-mouse-2] (quote locate-mouse-view-file)) (define-key map "" (quote locate-tags)) (define-key map "l" (quote locate-do-redisplay)) (define-key map "U" (quote dired-unmark-all-files)) (define-key map "V" (quote locate-find-directory)) map)) nil [13910 14675])
            ("locate-filename-indentation" variable
               (:constant-flag t
                :default-value 4)
                nil [14762 14847])
            ("locate-get-file-positions" function nil nil [14849 15504])
            ("locate-current-line-number" function nil nil [15523 15698])
            ("locate-get-filename" function nil nil [16067 16280])
            ("locate-main-listing-line-p" function nil nil [16282 16640])
            ("locate-mouse-view-file" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [16642 16955])
            ("define-derived-mode" code nil nil [17096 18915])
            ("put" code nil nil [18916 18967])
            ("locate-do-setup" function (:arguments ("search-string")) nil [18969 19575])
            ("locate-set-properties" function nil nil [19577 19734])
            ("locate-insert-header" function (:arguments ("search-string")) nil [19736 21556])
            ("locate-tags" function (:user-visible-flag t) nil [21558 21883])
            ("locate-update" function (:arguments ("_ignore1" "_ignore2")) nil [21930 22635])
            ("locate-find-directory" function (:user-visible-flag t) nil [22777 23287])
            ("locate-find-directory-other-window" function (:user-visible-flag t) nil [23289 23571])
            ("locate-get-dirname" function nil nil [23940 24902])
            ("locate-in-alternate-database" function
               (:user-visible-flag t
                :arguments ("search-string" "database"))
                nil [24927 25776])
            ("locate-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [25778 26144])
            ("locate" package nil nil [26146 26163]))          
      :file "locate.el"
      :pointmax 26189
      :fsize 26188
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "dired.el"
      :fsize 167676
      :lastmodtime '(23624 29140 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1193 2722])
            ("defalias" code nil nil [2751 2772])
            ("defalias" code nil nil [2773 2805])
            ("noreturn" function (:arguments ("form")) nil [2807 3011])
            ("1value" function (:arguments ("form")) nil [3013 3251])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3253 3713])
            ("lambda" function (:arguments ("cdr")) nil [3715 4902])
            ("setq-local" function (:arguments ("var" "val")) nil [4904 5151])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5153 5594])
            ("push" function (:arguments ("newelt" "place")) nil [5596 6190])
            ("pop" function (:arguments ("place")) nil [6192 7049])
            ("when" function (:arguments ("cond" "body")) nil [7051 7339])
            ("unless" function (:arguments ("cond" "body")) nil [7341 7627])
            ("dolist" function (:arguments ("spec" "body")) nil [7629 9089])
            ("dotimes" function (:arguments ("spec" "body")) nil [9091 10556])
            ("declare" function (:arguments ("_specs")) nil [10558 11133])
            ("ignore-errors" function (:arguments ("body")) nil [11135 11442])
            ("gensym-counter" variable nil nil [11473 11576])
            ("gensym" function (:arguments ("prefix")) nil [11578 11898])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11900 12048])
            ("error" function (:arguments ("args")) nil [12105 12621])
            ("user-error" function (:arguments ("format" "args")) nil [12623 13283])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [13285 14198])
            ("frame-configuration-p" function (:arguments ("object")) nil [14312 14567])
            ("apply-partially" function (:arguments ("fun" "args")) nil [14569 14946])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [15140 15720])
            ("caar" function (:arguments ("x")) nil [15722 15849])
            ("cadr" function (:arguments ("x")) nil [15851 15978])
            ("cdar" function (:arguments ("x")) nil [15980 16107])
            ("cddr" function (:arguments ("x")) nil [16109 16236])
            ("caaar" function (:arguments ("x")) nil [16238 16389])
            ("caadr" function (:arguments ("x")) nil [16391 16542])
            ("cadar" function (:arguments ("x")) nil [16544 16695])
            ("caddr" function (:arguments ("x")) nil [16697 16848])
            ("cdaar" function (:arguments ("x")) nil [16850 17001])
            ("cdadr" function (:arguments ("x")) nil [17003 17154])
            ("cddar" function (:arguments ("x")) nil [17156 17307])
            ("cdddr" function (:arguments ("x")) nil [17309 17460])
            ("caaaar" function (:arguments ("x")) nil [17462 17633])
            ("caaadr" function (:arguments ("x")) nil [17635 17806])
            ("caadar" function (:arguments ("x")) nil [17808 17979])
            ("caaddr" function (:arguments ("x")) nil [17981 18152])
            ("cadaar" function (:arguments ("x")) nil [18154 18325])
            ("cadadr" function (:arguments ("x")) nil [18327 18498])
            ("caddar" function (:arguments ("x")) nil [18500 18671])
            ("cadddr" function (:arguments ("x")) nil [18673 18844])
            ("cdaaar" function (:arguments ("x")) nil [18846 19017])
            ("cdaadr" function (:arguments ("x")) nil [19019 19190])
            ("cdadar" function (:arguments ("x")) nil [19192 19363])
            ("cdaddr" function (:arguments ("x")) nil [19365 19536])
            ("cddaar" function (:arguments ("x")) nil [19538 19709])
            ("cddadr" function (:arguments ("x")) nil [19711 19882])
            ("cdddar" function (:arguments ("x")) nil [19884 20055])
            ("cddddr" function (:arguments ("x")) nil [20057 20228])
            ("last" function (:arguments ("list" "n")) nil [20230 20647])
            ("butlast" function (:arguments ("list" "n")) nil [20649 20877])
            ("nbutlast" function (:arguments ("list" "n")) nil [20879 21156])
            ("zerop" function (:arguments ("number")) nil [21158 21388])
            ("delete-dups" function (:arguments ("list")) nil [21390 22177])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [22244 22702])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [22704 24711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [24713 25530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [25570 26370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [26372 26694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [26696 26964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [26966 27401])
            ("assoc-delete-all" function (:arguments ("key" "alist")) nil [27403 27897])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [27899 28383])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [28385 28878])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [28880 29493])
            ("remove" function (:arguments ("elt" "seq")) nil [29495 29848])
            ("remq" function (:arguments ("elt" "list")) nil [29850 30181])
            ("kbd" function (:arguments ("keys")) nil [30206 30646])
            ("put" code nil nil [30647 30665])
            ("undefined" function (:user-visible-flag t) nil [30667 31195])
            ("put" code nil nil [31290 31325])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [31327 31891])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [31893 32545])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [32547 34608])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [34610 35290])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [35292 35762])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [35816 36416])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [36418 36884])
            ("keymap-canonicalize" function (:arguments ("map")) nil [36886 38755])
            ("put" code nil nil [38757 38814])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [38816 39191])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [39222 40142])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [40144 40948])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [40950 41146])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [41148 41377])
            ("key-substitution-in-progress" variable nil nil [41433 41526])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [41528 42910])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [42912 44575])
            ("global-map" variable nil nil [44724 44898])
            ("esc-map" variable nil nil [44900 45040])
            ("ctl-x-map" variable nil nil [45042 45177])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [45179 45257])
            ("defalias" code nil nil [45258 45296])
            ("define-key" code nil nil [45297 45339])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [45341 45413])
            ("defalias" code nil nil [45414 45452])
            ("define-key" code nil nil [45453 45495])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [45535 45590])
            ("listify-key-sequence" function (:arguments ("key")) nil [45592 45830])
            ("eventp" function (:arguments ("obj")) nil [45832 46033])
            ("event-modifiers" function (:arguments ("event")) nil [46035 47329])
            ("event-basic-type" function (:arguments ("event")) nil [47331 48099])
            ("mouse-movement-p" function (:arguments ("object")) nil [48101 48234])
            ("mouse-event-p" function (:arguments ("object")) nil [48236 48454])
            ("event-start" function (:arguments ("event")) nil [48456 49616])
            ("event-end" function (:arguments ("event")) nil [49618 49936])
            ("event-click-count" function (:arguments ("event")) nil [49938 50148])
            ("event-line-count" function (:arguments ("event")) nil [50150 50349])
            ("posnp" function (:arguments ("obj")) nil [50406 51054])
            ("posn-window" function (:arguments ("position")) nil [51088 51270])
            ("posn-area" function (:arguments ("position")) nil [51272 51596])
            ("posn-point" function (:arguments ("position")) nil [51598 52064])
            ("posn-set-point" function (:arguments ("position")) nil [52066 52386])
            ("posn-x-y" function (:arguments ("position")) nil [52388 52641])
            ("declare-function" code nil nil [52643 52709])
            ("posn-col-row" function (:arguments ("position")) nil [52711 54529])
            ("posn-actual-col-row" function (:arguments ("position")) nil [54531 55119])
            ("posn-timestamp" function (:arguments ("position")) nil [55121 55309])
            ("posn-string" function (:arguments ("position")) nil [55311 55670])
            ("posn-image" function (:arguments ("position")) nil [55672 55912])
            ("posn-object" function (:arguments ("position")) nil [55914 56283])
            ("posn-object-x-y" function (:arguments ("position")) nil [56285 56572])
            ("posn-object-width-height" function (:arguments ("position")) nil [56574 56834])
            ("make-obsolete" code nil nil [56877 56943])
            ("make-obsolete" code nil nil [56944 56993])
            ("make-obsolete" code nil nil [57008 57081])
            ("make-obsolete" code nil nil [57082 57155])
            ("make-obsolete" code nil nil [57156 57231])
            ("make-obsolete" code nil nil [57232 57305])
            ("make-obsolete" code nil nil [57306 57379])
            ("make-obsolete" code nil nil [57380 57455])
            ("log10" function (:arguments ("x")) nil [57457 57566])
            ("defalias" code nil nil [57614 57648])
            ("make-obsolete" code nil nil [57649 57703])
            ("defalias" code nil nil [57704 57740])
            ("make-obsolete" code nil nil [57741 57797])
            ("set-advertised-calling-convention" code nil nil [57799 57900])
            ("set-advertised-calling-convention" code nil nil [57901 57969])
            ("set-advertised-calling-convention" code nil nil [57970 58041])
            ("set-advertised-calling-convention" code nil nil [58042 58127])
            ("make-obsolete-variable" code nil nil [58190 58254])
            ("make-obsolete-variable" code nil nil [58255 58338])
            ("make-obsolete-variable" code nil nil [58339 58411])
            ("make-obsolete-variable" code nil nil [58412 58488])
            ("make-obsolete-variable" code nil nil [58489 58546])
            ("make-obsolete" code nil nil [58547 58603])
            ("make-obsolete" code nil nil [58604 58664])
            ("make-obsolete" code nil nil [58666 58720])
            ("make-obsolete" code nil nil [58721 58777])
            ("make-obsolete-variable" code nil nil [58779 58903])
            ("define-obsolete-variable-alias" code nil nil [58942 59029])
            ("define-obsolete-variable-alias" code nil nil [59031 59124])
            ("define-obsolete-variable-alias" code nil nil [59125 59218])
            ("make-obsolete-variable" code nil nil [59464 59528])
            ("make-obsolete-variable" code nil nil [59530 59588])
            ("defvaralias" code nil nil [59590 59647])
            ("defalias" code nil nil [59720 59764])
            ("defalias" code nil nil [59765 59809])
            ("defalias" code nil nil [59810 59843])
            ("defalias" code nil nil [59844 59877])
            ("defalias" code nil nil [59878 59914])
            ("defalias" code nil nil [59915 59950])
            ("defalias" code nil nil [59951 59977])
            ("defalias" code nil nil [59978 60004])
            ("defalias" code nil nil [60005 60027])
            ("defalias" code nil nil [60053 60092])
            ("defalias" code nil nil [60093 60147])
            ("defalias" code nil nil [60148 60218])
            ("defalias" code nil nil [60219 60291])
            ("defalias" code nil nil [60292 60335])
            ("defalias" code nil nil [60336 60380])
            ("defalias" code nil nil [60381 60414])
            ("defalias" code nil nil [60415 60448])
            ("defalias" code nil nil [60480 60523])
            ("defalias" code nil nil [60524 60573])
            ("defalias" code nil nil [60575 60628])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [60667 62796])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [62798 64466])
            ("letrec" function (:arguments ("binders" "body")) nil [64468 65097])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [65099 66509])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [66511 68350])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [68352 71719])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [71722 73041])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [73043 74351])
            ("delay-mode-hooks" variable nil nil [74373 74467])
            ("delayed-mode-hooks" variable nil nil [74468 74549])
            ("make-variable-buffer-local" code nil nil [74550 74598])
            ("put" code nil nil [74599 74641])
            ("delayed-after-hook-functions" variable nil nil [74643 74786])
            ("make-variable-buffer-local" code nil nil [74787 74845])
            ("change-major-mode-after-body-hook" variable nil nil [74847 74961])
            ("after-change-major-mode-hook" variable nil nil [74963 75065])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [75067 76420])
            ("delay-mode-hooks" function (:arguments ("body")) nil [76422 76821])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [76882 77223])
            ("derived-mode-p" function (:arguments ("modes")) nil [77225 77456])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [77647 77840])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [77842 80527])
            ("autoloadp" function (:arguments ("object")) nil [80549 80651])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [81135 81898])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [81900 83396])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [83398 84804])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [84829 86154])
            ("process-lines" function (:arguments ("program" "args")) nil [86156 86761])
            ("process-live-p" function (:arguments ("process")) nil [86763 87076])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [87096 87566])
            ("process-kill-buffer-query-function" function nil nil [87568 87987])
            ("add-hook" code nil nil [87989 88064])
            ("process-get" function (:arguments ("process" "propname")) nil [88095 88307])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [88309 88548])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [88588 88638])
            ("read-key-delay" variable (:default-value 0.01) nil [88640 88668])
            ("read-key" function (:arguments ("prompt")) nil [88717 91941])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [91943 92280])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [92282 95018])
            ("read-number" function (:arguments ("prompt" "default")) nil [95020 96090])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [96092 97831])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [97833 101167])
            ("declare-function" code nil nil [101207 101286])
            ("y-or-n-p" function (:arguments ("prompt")) nil [101288 104849])
            ("atomic-change-group" function (:arguments ("body")) nil [104880 106086])
            ("prepare-change-group" function (:arguments ("buffer")) nil [106088 107564])
            ("activate-change-group" function (:arguments ("handle")) nil [107566 107804])
            ("accept-change-group" function (:arguments ("handle")) nil [107806 108097])
            ("cancel-change-group" function (:arguments ("handle")) nil [108099 109490])
            ("define-obsolete-function-alias" code nil nil [109548 109630])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [109632 111184])
            ("copy-overlay" function (:arguments ("o")) nil [111213 111787])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [111789 112797])
            ("suspend-hook" variable nil nil [112819 112903])
            ("suspend-resume-hook" variable nil nil [112905 113003])
            ("temp-buffer-show-hook" variable nil nil [113005 113221])
            ("temp-buffer-setup-hook" variable nil nil [113223 113454])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [113456 113831])
            ("buffer-narrowed-p" function nil nil [113864 113998])
            ("find-tag-default-bounds" function nil nil [114000 114254])
            ("find-tag-default" function nil nil [114256 114522])
            ("find-tag-default-as-regexp" function nil nil [114524 114959])
            ("find-tag-default-as-symbol-regexp" function nil nil [114961 115520])
            ("play-sound" function (:arguments ("sound")) nil [115522 116341])
            ("declare-function" code nil nil [116343 116399])
            ("shell-quote-argument" function (:arguments ("argument")) nil [116401 118735])
            ("string-to-list" function (:arguments ("string")) nil [118737 118836])
            ("string-to-vector" function (:arguments ("string")) nil [118838 118938])
            ("string-or-null-p" function (:arguments ("object")) nil [118940 119077])
            ("booleanp" function (:arguments ("object")) nil [119079 119237])
            ("special-form-p" function (:arguments ("object")) nil [119239 119482])
            ("macrop" function (:arguments ("object")) nil [119484 119714])
            ("field-at-pos" function (:arguments ("pos")) nil [119716 119986])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [119988 120351])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [120353 121163])
            ("yank-handled-properties" variable nil nil [121270 121302])
            ("yank-excluded-properties" variable nil nil [121303 121336])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [121338 122211])
            ("yank-undo-function" variable nil nil [122213 122240])
            ("insert-for-yank" function (:arguments ("string")) nil [122242 122723])
            ("insert-for-yank-1" function (:arguments ("string")) nil [122725 123757])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [123759 124244])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [124246 124932])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [124934 125246])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [125375 125813])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [125851 126835])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [126837 127329])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [127331 128972])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [128974 129523])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [129525 130715])
            ("track-mouse" function (:arguments ("body")) nil [130770 131076])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [131078 131466])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [131468 131988])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [131990 132550])
            ("with-selected-window" function (:arguments ("window" "body")) nil [132552 133690])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [133692 134433])
            ("save-window-excursion" function (:arguments ("body")) nil [134435 135254])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [135256 136651])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [136704 139157])
            ("with-temp-file" function (:arguments ("file" "body")) nil [139159 139854])
            ("with-temp-message" function (:arguments ("message" "body")) nil [139856 140783])
            ("with-temp-buffer" function (:arguments ("body")) nil [140785 141344])
            ("with-silent-modifications" function (:arguments ("body")) nil [141346 142336])
            ("with-output-to-string" function (:arguments ("body")) nil [142338 142783])
            ("with-local-quit" function (:arguments ("body")) nil [142785 143540])
            ("setq" code nil nil [143602 143748])
            ("while-no-input" function (:arguments ("body")) nil [143750 144250])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [144252 144805])
            ("define-obsolete-function-alias" code nil nil [144807 144902])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [144904 145841])
            ("combine-after-change-calls" function (:arguments ("body")) nil [145843 146538])
            ("with-case-table" function (:arguments ("table" "body")) nil [146540 147061])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [147063 147488])
            ("save-match-data-internal" variable nil nil [147522 147555])
            ("save-match-data" function (:arguments ("body")) nil [147813 148493])
            ("match-string" function (:arguments ("num" "string")) nil [148495 149140])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [149142 149866])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [149869 150518])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [150521 151792])
            ("looking-at-p" function (:arguments ("regexp")) nil [151794 151972])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [151974 152194])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [152196 154106])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [154128 154481])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [154743 157859])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [157861 158541])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [158543 159179])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [159213 159617])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [159619 162300])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [162303 162698])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [162700 163109])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [163111 163894])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [163896 164131])
            ("load-history-regexp" function (:arguments ("file")) nil [164172 164808])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [164810 165246])
            ("put" code nil nil [165248 165294])
            ("eval-after-load" function (:arguments ("file" "form")) nil [165295 169177])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [169179 169554])
            ("after-load-functions" variable nil nil [169556 169729])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [169731 171298])
            ("eval-next-after-load" function (:arguments ("file")) nil [171300 171600])
            ("display-delayed-warnings" function nil nil [171604 171871])
            ("collapse-delayed-warnings" function nil nil [171873 172552])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [172672 173012])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [173014 173269])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [173298 173641])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [173643 173888])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [173912 174548])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [174550 174870])
            ("syntax-after" function (:arguments ("pos")) nil [174872 175245])
            ("syntax-class" function (:arguments ("syntax")) nil [175247 175599])
            ("word-move-empty-char-table" variable nil nil [175630 175800])
            ("forward-word-strictly" function (:arguments ("arg")) nil [175802 176540])
            ("backward-word-strictly" function (:arguments ("arg")) nil [176542 177124])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177142 177725])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177740 178289])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [178310 178792])
            ("text-clone--maintaining" variable nil nil [178814 178850])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [178852 180918])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [180920 183168])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [183276 184854])
            ("backtrace--print-frame" function (:arguments ("evald" "func" "args" "flags")) nil [184858 185254])
            ("backtrace" function nil nil [185256 185527])
            ("backtrace-frames" function (:arguments ("base")) nil [185529 185882])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [185884 186684])
            ("called-interactively-p-functions" variable nil nil [186688 187105])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [187107 187192])
            ("called-interactively-p" function (:arguments ("kind")) nil [187194 191375])
            ("interactive-p" function nil nil [191377 192460])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [192462 192807])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [192809 193117])
            ("define-obsolete-function-alias" code nil nil [193119 193206])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [193208 195984])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [196567 197334])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [197336 199075])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [199077 199576])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [199578 199695])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [199697 201373])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [201375 201530])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [201532 202636])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [202673 202832])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [202835 204369])
            ("version-to-list" function (:arguments ("ver")) nil [204372 207155])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [207157 207988])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [207991 208790])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [208793 209578])
            ("version-list-not-zero" function (:arguments ("lst")) nil [209580 209890])
            ("version<" function (:arguments ("v1" "v2")) nil [209893 210397])
            ("version<=" function (:arguments ("v1" "v2")) nil [210399 210917])
            ("version=" function (:arguments ("v1" "v2")) nil [210919 211413])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [211415 211792])
            ("package--description-file" function (:arguments ("dir")) nil [211794 212125])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [212150 212500])
            ("definition-prefixes" variable (:default-value (make-hash-table :test (quote equal))) nil [212515 213216])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [213218 213440])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [213442 213504])
            ("when" code nil nil [213656 213781])
            ("unmsys--file-name" function (:arguments ("file")) nil [213914 214401]))          
      :file "subr.el"
      :pointmax 214426
      :fsize 214426
      :lastmodtime '(23727 39260 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easy-mmode" include nil nil [1158 1179])
            ("pcase" include nil nil [1139 1155])
            ("font-lock-keywords" variable nil nil [1209 1236])
            ("backup" customgroup (:user-visible-flag t) nil [1238 1309])
            ("find-file" customgroup (:user-visible-flag t) nil [1311 1370])
            ("delete-auto-save-files" variable (:default-value t) nil [1373 1623])
            ("directory-abbrev-alist" variable nil nil [1625 2637])
            ("make-backup-files" variable (:default-value t) nil [2639 3562])
            ("backup-inhibited" variable nil nil [3663 3855])
            ("put" code nil nil [3856 3898])
            ("backup-by-copying" variable nil nil [3900 4078])
            ("backup-by-copying-when-linked" variable nil nil [4080 4373])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4375 4863])
            ("put" code nil nil [4864 4921])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4923 5546])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5548 5767])
            ("buffer-offer-save" variable nil nil [5769 6390])
            ("make-variable-buffer-local" code nil nil [6391 6438])
            ("put" code nil nil [6439 6482])
            ("find-file-existing-other-name" variable (:default-value t) nil [6484 6777])
            ("find-file-visit-truename" variable nil nil [6779 7151])
            ("put" code nil nil [7152 7214])
            ("revert-without-query" variable nil nil [7216 7581])
            ("buffer-file-number" variable nil nil [7583 7852])
            ("make-variable-buffer-local" code nil nil [7853 7901])
            ("put" code nil nil [7902 7946])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7948 8093])
            ("buffer-file-read-only" variable nil nil [8095 8185])
            ("make-variable-buffer-local" code nil nil [8186 8237])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [8239 8683])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8751 8820])
            ("declare-function" code nil nil [8822 8872])
            ("declare-function" code nil nil [8873 8922])
            ("declare-function" code nil nil [8923 9009])
            ("declare-function" code nil nil [9010 9077])
            ("declare-function" code nil nil [9078 9150])
            ("declare-function" code nil nil [9151 9207])
            ("declare-function" code nil nil [9208 9267])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [9269 9942])
            ("file-precious-flag" variable nil nil [9944 10784])
            ("break-hardlink-on-save" variable nil nil [10786 11541])
            ("version-control" variable nil nil [11543 11900])
            ("version-control-safe-local-p" function (:arguments ("x")) nil [11902 12046])
            ("put" code nil nil [12048 12127])
            ("dired-kept-versions" variable (:default-value 2) nil [12129 12269])
            ("delete-old-versions" variable nil nil [12271 12537])
            ("kept-old-versions" variable (:default-value 2) nil [12539 12678])
            ("put" code nil nil [12679 12734])
            ("kept-new-versions" variable (:default-value 2) nil [12736 12925])
            ("put" code nil nil [12926 12981])
            ("require-final-newline" variable nil nil [12983 13754])
            ("mode-require-final-newline" variable (:default-value t) nil [13756 14891])
            ("auto-save-default" variable (:default-value t) nil [14893 15035])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [15037 16465])
            ("auto-save--timer" variable nil nil [16467 16534])
            ("auto-save-visited-interval" variable (:default-value 5) nil [16536 17017])
            ("define-minor-mode" code nil nil [17019 17991])
            ("make-obsolete-variable" code nil nil [18186 18305])
            ("save-abbrevs" variable (:default-value t) nil [18307 18518])
            ("find-file-run-dired" variable (:default-value t) nil [18520 18717])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [18719 19047])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [19108 19436])
            ("define-obsolete-variable-alias" code nil nil [19544 19645])
            ("find-file-not-found-functions" variable nil nil [19646 19947])
            ("define-obsolete-variable-alias" code nil nil [20045 20117])
            ("find-file-hook" variable nil nil [20118 20471])
            ("define-obsolete-variable-alias" code nil nil [20473 20552])
            ("write-file-functions" variable nil nil [20553 21357])
            ("put" code nil nil [21358 21404])
            ("local-write-file-hooks" variable nil nil [21406 21441])
            ("make-variable-buffer-local" code nil nil [21442 21494])
            ("put" code nil nil [21495 21543])
            ("make-obsolete-variable" code nil nil [21544 21621])
            ("define-obsolete-variable-alias" code nil nil [21623 21714])
            ("write-contents-functions" variable nil nil [21715 22602])
            ("make-variable-buffer-local" code nil nil [22603 22657])
            ("enable-local-variables" variable (:default-value t) nil [22659 23911])
            ("enable-dir-local-variables" variable (:default-value t) nil [23913 24134])
            ("local-enable-local-variables" variable (:default-value t) nil [25497 25974])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [25976 26367])
            ("view-read-only" variable nil nil [26369 26719])
            ("file-name-history" variable nil nil [26721 26904])
            ("save-silently" variable nil nil [26906 27061])
            ("put" code nil nil [27065 27119])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [27120 27726])
            ("declare-function" code nil nil [27728 27800])
            ("declare-function" code nil nil [27801 27873])
            ("convert-standard-filename" function (:arguments ("filename")) nil [27875 29031])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [29033 30154])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [30158 30426])
            ("cd-path" variable nil nil [30428 30558])
            ("parse-colon-path" function (:arguments ("search-path")) nil [30560 31179])
            ("cd-absolute" function (:arguments ("dir")) nil [31181 32086])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [32088 34163])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [34165 35560])
            ("module-file-suffix" variable nil nil [35562 35589])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [35591 36059])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [36061 37438])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [37440 40402])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [40404 40812])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [40814 41418])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [41420 42778])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42780 42982])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42984 44670])
            ("executable-find" function (:arguments ("command")) nil [44673 44981])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44983 45678])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45680 47432])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47731 48450])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48452 49671])
            ("file-local-name" function (:arguments ("file")) nil [49673 50089])
            ("file-local-copy" function (:arguments ("file")) nil [50091 50480])
            ("files--name-absolute-system-p" function (:arguments ("file")) nil [50482 50763])
            ("files--splice-dirname-file" function (:arguments ("dirname" "file")) nil [50765 51544])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [51546 56382])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [56384 57805])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [57937 59054])
            ("mounted-file-systems" variable (:default-value (if (memq system-type (quote (windows-nt cygwin))) "^//[^/]+/" "^\\(?:/\\(?:afs/\\|m\\(?:edia/\\|nt\\)\\|\\(?:ne\\|tmp_mn\\)t/\\)\\)")) nil [59056 59487])
            ("temporary-file-directory" function nil nil [59489 60265])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix" "text")) nil [60267 61320])
            ("files--make-magic-temp-file" function (:arguments ("absolute-prefix" "dir-flag" "suffix" "text")) nil [61322 62262])
            ("make-nearby-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [62264 63101])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [63103 65340])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [65343 65956])
            ("confirm-nonexistent-file-or-buffer" function nil nil [65958 66399])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [66401 67644])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [67646 67760])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67762 69476])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69478 70860])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [70862 72238])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [72240 72675])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [72677 73102])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73104 73485])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73487 73938])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [73940 74386])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [74388 75337])
            ("kill-buffer-hook" variable nil nil [75398 75638])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [75640 78693])
            ("create-file-buffer" function (:arguments ("filename")) nil [78818 79498])
            ("generate-new-buffer" function (:arguments ("name")) nil [79500 79705])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [79707 79859])
            ("make-obsolete-variable" code nil nil [79860 79937])
            ("abbreviated-home-dir" variable nil nil [79939 80113])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [80115 84173])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [84175 86102])
            ("find-file-wildcards" variable (:default-value t) nil [86105 86352])
            ("find-file-suppress-same-file-warnings" variable nil nil [86354 86680])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [86682 86961])
            ("out-of-memory-warning-percentage" variable nil nil [86963 87346])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [87348 87840])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [87842 88680])
            ("files--message" function (:arguments ("format" "args")) nil [88682 88949])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [88951 96019])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [96021 98515])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [98518 99539])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [99541 100233])
            ("insert-file-literally" function (:arguments ("filename")) nil [100235 100718])
            ("find-file-literally" variable nil nil [100720 100927])
            ("put" code nil nil [100928 100973])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [100975 102304])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [102307 105672])
            ("define-obsolete-function-alias" code nil nil [105674 105749])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [105751 107743])
            ("auto-mode-case-fold" variable (:default-value t) nil [107745 108183])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.jsx\\'" . js-jsx-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [108185 119709])
            ("put" code nil nil [119710 119756])
            ("conf-mode-maybe" function nil nil [119758 120008])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [120010 121405])
            ("define-obsolete-variable-alias" code nil nil [121407 121520])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [121719 122579])
            ("define-obsolete-variable-alias" code nil nil [122581 122691])
            ("inhibit-local-variables-suffixes" variable nil nil [122693 122969])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [123041 123147])
            ("inhibit-local-variables-p" function nil nil [123149 123959])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [123961 124479])
            ("magic-mode-alist" variable nil nil [124481 125015])
            ("put" code nil nil [125016 125063])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . mhtml-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . mhtml-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [125065 126608])
            ("put" code nil nil [126609 126665])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [126667 126809])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [126811 134182])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [134435 134842])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [134844 135110])
            ("set-auto-mode-1" function nil nil [135112 136617])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [136655 136861])
            ("put" code nil nil [136862 136916])
            ("hack-local-variables-hook" variable nil nil [136918 137151])
            ("safe-local-variable-values" variable nil nil [137153 137413])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [137415 138077])
            ("mapc" code nil nil [138105 138722])
            ("dolist" code nil nil [139364 140052])
            ("put" code nil nil [140054 140168])
            ("put" code nil nil [140170 140216])
            ("file-local-variables-alist" variable nil nil [140218 140573])
            ("make-variable-buffer-local" code nil nil [140574 140630])
            ("put" code nil nil [140631 140683])
            ("dir-local-variables-alist" variable nil nil [140685 141067])
            ("make-variable-buffer-local" code nil nil [141068 141123])
            ("before-hack-local-variables-hook" variable nil nil [141125 141543])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [141545 144415])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [144417 144504])
            ("hack-local-variables-prop-line" function (:arguments ("handle-mode")) nil [144506 147784])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [147786 150272])
            ("hack-local-variables--warned-lexical" variable nil nil [150333 150382])
            ("hack-local-variables" function (:arguments ("handle-mode")) nil [150384 157004])
            ("hack-local-variables-apply" function nil nil [157006 157807])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [157809 158497])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [158499 159402])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [159404 159508])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [159510 159698])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [159700 161520])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [161522 161954])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [161956 162869])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [162935 163050])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [163052 163628])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [163630 163763])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [163765 164410])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [164412 166583])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [166585 167349])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [167351 168726])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [168728 169426])
            ("dir-locals--all-files" function (:arguments ("directory")) nil [169428 170358])
            ("dir-locals-find-file" function (:arguments ("file")) nil [170360 173487])
            ("dir-locals-read-from-dir" function (:arguments ("dir")) nil [173489 174793])
            ("define-obsolete-function-alias" code nil nil [174795 174889])
            ("enable-remote-dir-locals" variable nil nil [174891 175057])
            ("hack-dir-local-variables--warned-coding" variable nil nil [175059 175111])
            ("hack-dir-local-variables" function nil nil [175113 176730])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [176732 177038])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [177042 177477])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [177479 182568])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [182570 184710])
            ("file-extended-attributes" function (:arguments ("filename")) nil [184713 185027])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [185029 185631])
            ("backup-buffer" function nil nil [185634 189257])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [189259 190360])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [190362 190655])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [190657 191356])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [191358 193165])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [193167 193892])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [193894 194823])
            ("file-name-base" function (:arguments ("filename")) nil [194825 195069])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [195071 195819])
            ("backup-directory-alist" variable nil nil [195821 196858])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [196860 198156])
            ("make-backup-file-name" function (:arguments ("file")) nil [198158 198471])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [198473 199223])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [199225 201825])
            ("backup-file-name-p" function (:arguments ("file")) nil [201827 202088])
            ("backup-extract-version-start" variable nil nil [202090 202127])
            ("backup-extract-version" function (:arguments ("fn")) nil [202302 202754])
            ("find-backup-file-name" function (:arguments ("fn")) nil [202756 204895])
            ("file-nlinks" function (:arguments ("filename")) nil [204897 205014])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [205016 207771])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207774 210592])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [210594 211165])
            ("auto-save-hook" variable nil nil [211167 211239])
            ("before-save-hook" variable nil nil [211241 211439])
            ("after-save-hook" variable nil nil [211441 211660])
            ("save-buffer-coding-system" variable nil nil [211662 212034])
            ("make-variable-buffer-local" code nil nil [212036 212091])
            ("put" code nil nil [212092 212143])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [212145 216989])
            ("basic-save-buffer-1" function nil nil [217271 217574])
            ("basic-save-buffer-2" function nil nil [217663 221824])
            ("declare-function" code nil nil [221826 221912])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [221914 223080])
            ("put" code nil nil [223081 223142])
            ("buffer-save-without-query" variable nil nil [223144 223260])
            ("make-variable-buffer-local" code nil nil [223261 223316])
            ("save-some-buffers-default-predicate" variable nil nil [223318 223730])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [223732 227471])
            ("clear-visited-file-modtime" function nil nil [227474 227655])
            ("not-modified" function (:arguments ("arg")) nil [227657 228180])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [228182 228468])
            ("insert-file" function (:arguments ("filename")) nil [228470 228918])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [228920 229578])
            ("file-newest-backup" function (:arguments ("filename")) nil [229580 230503])
            ("rename-uniquely" function (:user-visible-flag t) nil [230505 231521])
            ("files--ensure-directory" function (:arguments ("dir")) nil [231523 231774])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [231776 233323])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [233325 233471])
            ("files--force" function (:arguments ("no-such" "fn" "args")) nil [233473 233821])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [233823 236586])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [236588 237148])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [237150 238268])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [238270 241390])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [241438 242000])
            ("put" code nil nil [242004 242052])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [242053 242505])
            ("put" code nil nil [242507 242576])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [242577 243049])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [243051 243613])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [243615 244530])
            ("before-revert-hook" variable nil nil [244532 244735])
            ("after-revert-hook" variable nil nil [244737 245092])
            ("revert-buffer-in-progress-p" variable nil nil [245094 245208])
            ("revert-buffer-internal-hook" variable nil nil [245210 245246])
            ("revert-buffer-preserve-modes" variable nil nil [245436 245473])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [245475 247687])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [247689 251044])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [251046 253246])
            ("recover-this-file" function (:user-visible-flag t) nil [253248 253479])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [253481 255564])
            ("recover-session" function (:user-visible-flag t) nil [255566 257298])
            ("recover-session-finish" function (:user-visible-flag t) nil [257300 259703])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [259705 259956])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [259958 260561])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too" "no-ask"))
                nil [260563 261220])
            ("rename-auto-save-file" function nil nil [261224 261788])
            ("make-auto-save-file-name" function nil nil [261790 265961])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [265963 266191])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [266194 268377])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [268380 268541])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [268543 268709])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [268711 270317])
            ("files" package nil nil [270391 270427])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [270429 271775])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [271777 273615])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [273618 273745])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [273747 274284])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [274286 274473])
            ("get-free-disk-space" function (:arguments ("dir")) nil [274475 276245])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [276317 278706])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [278708 278753])
            ("insert-directory-wildcard-in-dir-p" function (:arguments ("dir")) nil [278755 279570])
            ("insert-directory-clean" function (:arguments ("beg" "switches")) nil [279572 281583])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [282657 291413])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [291415 291981])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [291983 292467])
            ("kill-emacs-query-functions" variable nil nil [292469 292832])
            ("confirm-kill-emacs" variable nil nil [292834 293274])
            ("confirm-kill-processes" variable (:default-value t) nil [293276 293639])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [293641 295932])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [295934 296454])
            ("setq" code nil nil [296564 296685])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [296886 300573])
            ("file-name-quoted-p" function (:arguments ("name")) nil [300575 300767])
            ("file-name-quote" function (:arguments ("name")) nil [300769 301090])
            ("file-name-unquote" function (:arguments ("name")) nil [301092 301472])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [301515 301982])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [301984 302833])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [302835 303989])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [303991 305074])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [305076 306143])
            ("define-obsolete-variable-alias" code nil nil [306145 306227])
            ("trash-directory" variable nil nil [306251 306654])
            ("trash--hexify-table" variable nil nil [306656 306684])
            ("declare-function" code nil nil [306686 306752])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [306754 311748])
            ("file-attribute-type" function (:arguments ("attributes")) nil [311750 311966])
            ("file-attribute-link-number" function (:arguments ("attributes")) nil [311968 312115])
            ("file-attribute-user-id" function (:arguments ("attributes")) nil [312117 312384])
            ("file-attribute-group-id" function (:arguments ("attributes")) nil [312386 312654])
            ("file-attribute-access-time" function (:arguments ("attributes")) nil [312656 312879])
            ("file-attribute-modification-time" function (:arguments ("attributes")) nil [312881 313173])
            ("file-attribute-status-change-time" function (:arguments ("attributes")) nil [313175 313513])
            ("file-attribute-size" function (:arguments ("attributes")) nil [313515 313721])
            ("file-attribute-modes" function (:arguments ("attributes")) nil [313723 313907])
            ("file-attribute-inode-number" function (:arguments ("attributes")) nil [313909 314350])
            ("file-attribute-device-number" function (:arguments ("attributes")) nil [314352 314807])
            ("file-attribute-collect" function (:arguments ("attributes" "attr-names")) nil [314809 315664])
            ("define-key" code nil nil [315667 315707])
            ("define-key" code nil nil [315708 315758])
            ("define-key" code nil nil [315759 315809])
            ("define-key" code nil nil [315810 315852])
            ("define-key" code nil nil [315853 315898])
            ("define-key" code nil nil [315899 315940])
            ("define-key" code nil nil [315941 315980])
            ("define-key" code nil nil [315981 316019])
            ("define-key" code nil nil [316020 316065])
            ("define-key" code nil nil [316066 316123])
            ("define-key" code nil nil [316124 316169])
            ("define-key" code nil nil [316171 316223])
            ("define-key" code nil nil [316224 316286])
            ("define-key" code nil nil [316287 316342])
            ("define-key" code nil nil [316343 316402])
            ("define-key" code nil nil [316403 316450])
            ("define-key" code nil nil [316452 316510])
            ("define-key" code nil nil [316511 316562])
            ("define-key" code nil nil [316563 316617])
            ("define-key" code nil nil [316618 316679])
            ("define-key" code nil nil [316680 316739]))          
      :file "files.el"
      :pointmax 316764
      :fsize 316763
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1179 . 1180) (symbol 1119 . 1136) (open-paren 1118 . 1119)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1249 1266])
            ("custom-define-hook" variable nil nil [1268 1417])
            ("custom-dont-initialize" variable nil nil [1419 1602])
            ("custom-current-group-alist" variable nil nil [1604 1717])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1747 2210])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2212 2787])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2789 3556])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3558 4336])
            ("custom-delayed-init-variables" variable nil nil [4338 4435])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4437 5561])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5563 8228])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8230 14484])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14512 17452])
            ("custom-current-group" function nil nil [17481 17570])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17572 18617])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18619 19782])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19784 20130])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20132 20534])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20553 21143])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21145 21856])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21858 22611])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22613 23064])
            ("defalias" code nil nil [23065 23121])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23123 23359])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23361 23511])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23513 23687])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23689 23985])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23987 24273])
            ("custom-variable-p" function (:arguments ("variable")) nil [24275 24708])
            ("define-obsolete-function-alias" code nil nil [24710 24785])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24787 25082])
            ("custom-load-recursion" variable nil nil [25225 25301])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25303 26562])
            ("custom-local-buffer" variable nil nil [26565 26885])
            ("put" code nil nil [26886 26931])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26933 27314])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27316 27740])
            ("custom-quote" function (:arguments ("sexp")) nil [27742 28080])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28082 29245])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29247 30402])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30404 31586])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [33413 33801])
            ("custom-theme-p" function (:arguments ("theme")) nil [33803 33912])
            ("custom-check-theme" function (:arguments ("theme")) nil [33914 34092])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [34094 36290])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [36292 37062])
            ("custom-set-variables" function (:arguments ("args")) nil [37065 37676])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [37678 40353])
            ("custom--sort-vars-table" variable nil nil [40355 40387])
            ("custom--sort-vars-result" variable nil nil [40388 40421])
            ("custom--sort-vars" function (:arguments ("vars")) nil [40423 41955])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41957 42541])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [43137 43758])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [43760 44248])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [44250 44755])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44779 45126])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [45128 45886])
            ("custom--inhibit-theme-enable" variable nil nil [45888 46174])
            ("provide-theme" function (:arguments ("theme")) nil [46176 46574])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [46576 47196])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [47198 50122])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [50124 50874])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50876 51141])
            ("custom-available-themes" function nil nil [51143 52023])
            ("custom-theme--load-path" function nil nil [52025 52344])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [52391 53627])
            ("custom-enabled-themes" variable nil nil [53629 54939])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54941 55059])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [55061 56660])
            ("declare-function" code nil nil [56702 56796])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56798 57158])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [57160 57553])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [57555 58010])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [58012 58432])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [58649 59020])
            ("custom-reset-variables" function (:arguments ("args")) nil [59022 59363])
            ("custom" package nil nil [59379 59396]))          
      :file "custom.el"
      :pointmax 59422
      :fsize 59421
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "widget.el"
      :fsize 3916
      :lastmodtime '(23603 24960 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1015 1031])
            ("find-dired" customgroup (:user-visible-flag t) nil [1033 1139])
            ("find-exec-terminator" variable (:default-value (if (eq 0 (ignore-errors (process-file find-program nil nil nil null-device "-exec" "echo" "{}" "+"))) "+" (shell-quote-argument ";"))) nil [1250 1698])
            ("find-ls-option" variable (:default-value (if (eq 0 (ignore-errors (process-file find-program nil nil nil null-device "-ls"))) (cons "-ls" (if (eq system-type (quote berkeley-unix)) "-gilsb" "-dilsb")) (cons (format "-exec ls -ld {} %s" find-exec-terminator) "-ld"))) nil [1807 2913])
            ("find-ls-subdir-switches" variable (:default-value (if (string-match "-[a-z]*b" (cdr find-ls-option)) "-alb" "-al")) nil [2915 3294])
            ("find-grep-options" variable (:default-value (if (or (eq system-type (quote berkeley-unix)) (string-match "solaris2" system-configuration)) "-s" "-q")) nil [3296 3657])
            ("find-name-arg" variable (:default-value (if read-file-name-completion-ignore-case "-iname" "-name")) nil [3705 4034])
            ("find-args" variable nil nil [4036 4112])
            ("find-args-history" variable nil nil [4172 4202])
            ("dired-sort-inhibit" variable nil nil [4204 4231])
            ("find-dired" function
               (:user-visible-flag t
                :arguments ("dir" "args"))
                nil [4248 8008])
            ("kill-find" function (:user-visible-flag t) nil [8010 8332])
            ("find-name-dired" function
               (:user-visible-flag t
                :arguments ("dir" "pattern"))
                nil [8349 8863])
            ("defalias" code nil nil [9063 9105])
            ("find-grep-dired" function
               (:user-visible-flag t
                :arguments ("dir" "regexp"))
                nil [9121 10307])
            ("find-dired-filter" function (:arguments ("proc" "string")) nil [10309 12116])
            ("find-dired-sentinel" function (:arguments ("proc" "state")) nil [12118 13011])
            ("find-dired" package nil nil [13015 13036]))          
      :file "find-dired.el"
      :pointmax 13066
      :fsize 13065
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1150 1171])
            ("add-hook" code nil nil [1242 1293])
            ("add-hook" code nil nil [1294 1345])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1766 1876])
            ("help-window-old-frame" variable nil nil [1878 1974])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "o" (quote describe-symbol)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1976 4265])
            ("define-key" code nil nil [4267 4331])
            ("define-key" code nil nil [4332 4376])
            ("define-key" code nil nil [4377 4419])
            ("fset" code nil nil [4420 4449])
            ("help-button-cache" variable nil nil [4518 4548])
            ("help-quit" function (:user-visible-flag t) nil [4552 4646])
            ("help-return-method" variable nil nil [4648 5017])
            ("define-obsolete-function-alias" code nil nil [5019 5112])
            ("help-print-return-message" function (:arguments ("function")) nil [5113 7408])
            ("fset" code nil nil [7468 7529])
            ("defalias" code nil nil [7531 7571])
            ("defalias" code nil nil [7604 7653])
            ("make-help-screen" code nil nil [7699 10813])
            ("function-called-at-point" function nil nil [10818 12550])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12581 12736])
            ("describe-distribution" function (:user-visible-flag t) nil [12738 12882])
            ("describe-copying" function (:user-visible-flag t) nil [12884 13022])
            ("describe-gnu-project" function (:user-visible-flag t) nil [13070 13227])
            ("define-obsolete-function-alias" code nil nil [13229 13308])
            ("describe-no-warranty" function (:user-visible-flag t) nil [13310 13556])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13558 14064])
            ("setq" code nil nil [14155 14207])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [14209 16619])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16621 16740])
            ("define-obsolete-function-alias" code nil nil [16742 16809])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16812 17137])
            ("view-order-manuals" function (:user-visible-flag t) nil [17139 17317])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [17319 17506])
            ("view-emacs-problems" function (:user-visible-flag t) nil [17508 17656])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17658 17781])
            ("view-external-packages" function (:user-visible-flag t) nil [17850 18007])
            ("view-lossage" function (:user-visible-flag t) nil [18009 18978])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18999 19835])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [19878 20612])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20614 22776])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22778 23138])
            ("help--analyze-key" function (:arguments ("key" "untranslated")) nil [23140 24670])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [24672 25532])
            ("help--key-binding-keymap" function (:arguments ("key" "accept-default" "no-remap" "position")) nil [25534 26596])
            ("help--binding-locus" function (:arguments ("key" "position")) nil [26598 28303])
            ("help-read-key-sequence" function (:arguments ("no-mouse-movement")) nil [28305 32689])
            ("help-downify-mouse-event-type" function (:arguments ("base")) nil [32691 33409])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [33411 38329])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [38332 42253])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [42256 43143])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [43155 43369])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [43371 43715])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [43730 44047])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [44049 44598])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [44600 45390])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [45438 46207])
            ("temp-buffer-max-width" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [46209 46973])
            ("define-minor-mode" code nil nil [46975 48131])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [48133 49890])
            ("help-window-select" variable nil nil [49910 50878])
            ("help-enable-auto-load" variable (:default-value t) nil [50880 51267])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [51269 52187])
            ("help-window-setup" function (:arguments ("window" "value")) nil [52189 54990])
            ("with-help-window" function (:arguments ("buffer-or-name" "body")) nil [55562 56601])
            ("help-form-show" function nil nil [56729 56919])
            ("help--docstring-quote" function (:arguments ("string")) nil [56923 57145])
            ("help-split-fundoc" function (:arguments ("docstring" "def")) nil [57370 58383])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [58385 59235])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [59237 61626])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [61628 62066])
            ("define-obsolete-function-alias" code nil nil [62068 62142])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [62144 62299])
            ("help" package nil nil [62303 62318]))          
      :file "help.el"
      :pointmax 62342
      :fsize 62345
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1171 . 1172) (symbol 1132 . 1149) (open-paren 1131 . 1132)))
    (semanticdb-table "semanticdb-table"
      :file "help-macro.el"
      :fsize 8263
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1057 1092])
            ("cua-enable-cua-keys" variable nil nil [1136 1164])
            ("or" code nil nil [1278 1388])
            ("setq" code nil nil [1542 1582])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1710 1773])
            ("define-obsolete-variable-alias" code nil nil [1841 1923])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1924 8904])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8906 9236])
            ("menu-bar-last-search-type" variable nil nil [9268 9376])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9378 9771])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9773 10170])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10172 10767])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10769 10989])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10991 11330])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11332 11683])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11730 12547])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12549 15013])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15045 16036])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16082 18004])
            ("menu-bar-goto-uses-etags-p" function nil nil [18006 18150])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18152 18206])
            ("fset" code nil nil [18207 18249])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18251 22275])
            ("define-obsolete-function-alias" code nil nil [22277 22359])
            ("put" code nil nil [22503 22591])
            ("put" code nil nil [22592 22649])
            ("put" code nil nil [22650 22905])
            ("clipboard-yank" function (:user-visible-flag t) nil [22907 23072])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23074 23409])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23411 23734])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23736 24359])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24391 26656])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26729 27180])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27182 28390])
            ("menu-set-font" function (:user-visible-flag t) nil [28438 28737])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28739 30913])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [31022 31176])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31178 31392])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31394 31601])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31603 31813])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31815 31931])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32215 34657])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34659 34839])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34841 35066])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [35068 35279])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35281 35466])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35468 35650])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35652 35822])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35824 38236])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38238 38389])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38391 38577])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38579 38776])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38778 38973])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38975 39146])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39148 41172])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41174 41330])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41332 41485])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41487 41610])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll Bar"))) (bindings--define-key menu [horizontal] (menu-bar-make-mm-toggle horizontal-scroll-bar-mode "Horizontal" "Horizontal scroll bar")) (bindings--define-key menu [scrollbar-separator] menu-bar-separator) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll bar on the right side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote right)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll bar on the left side" :visible (display-graphic-p) :button (:radio and scroll-bar-mode (eq (frame-parameter nil (quote vertical-scroll-bars)) (quote left)))))) (bindings--define-key menu [none] (quote (menu-item "No Vertical Scroll Bar" menu-bar-no-scroll-bar :help "Turn off vertical scroll bar" :visible (display-graphic-p) :button (:radio eq scroll-bar-mode nil)))) menu)) nil [41612 43164])
            ("menu-bar-frame-for-menubar" function nil nil [43166 43349])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [43351 43471])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [43473 43621])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [43622 43774])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [43775 43936])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [43937 44101])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44102 44260])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44261 44428])
            ("when" code nil nil [44430 47204])
            ("display-line-numbers-type" variable nil nil [47206 47240])
            ("menu-bar-display-line-numbers-mode" function (:arguments ("type")) nil [47241 47443])
            ("menu-bar-showhide-line-numbers-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Numbers"))) (bindings--define-key menu [visual] (\` (menu-item "Visual Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote visual)) (message "Visual line numbers enabled"))) :help "Enable visual line numbers" :button (:radio eq display-line-numbers (quote visual)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [relative] (\` (menu-item "Relative Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode (quote relative)) (message "Relative line numbers enabled"))) :help "Enable relative line numbers" :button (:radio eq display-line-numbers (quote relative)) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [absolute] (\` (menu-item "Absolute Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode t) (setq display-line-numbers t) (message "Absolute line numbers enabled"))) :help "Enable absolute line numbers" :button (:radio eq display-line-numbers t) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [none] (\` (menu-item "No Line Numbers" (\, (lambda nil (interactive) (menu-bar-display-line-numbers-mode nil) (message "Line numbers disabled"))) :help "Disable line numbers" :button (:radio null display-line-numbers) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [global] (menu-bar-make-mm-toggle global-display-line-numbers-mode "Global Line Numbers Mode" "Set line numbers globally")) menu)) nil [47445 49678])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [display-line-numbers] (\` (menu-item "Line Numbers for All Lines" (\, menu-bar-showhide-line-numbers-menu)))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers in Mode Line" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers in Mode Line" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll Bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu Bar" toggle-menu-bar-mode-from-frame :help "Turn menu bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool Bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool Bar" toggle-tool-bar-mode-from-frame :help "Turn tool bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [49680 53691])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [53693 55790])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [55792 57738])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place-mode "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place-mode) (not (symbol-value (quote save-place-mode)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [57740 63074])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [63105 65044])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [65046 67387])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [67389 67516])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Servers" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [67518 71580])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [71609 74449])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [74451 74574])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [74576 74712])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [74714 74853])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [74855 75026])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [75028 75209])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [75211 77432])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [77434 78708])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [78710 78858])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [78860 82608])
            ("bindings--define-key" code nil nil [82610 82697])
            ("bindings--define-key" code nil nil [82698 82792])
            ("bindings--define-key" code nil nil [82793 82886])
            ("bindings--define-key" code nil nil [82887 82971])
            ("bindings--define-key" code nil nil [82972 83056])
            ("bindings--define-key" code nil nil [83057 83157])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [83159 83463])
            ("menu-bar-non-minibuffer-window-p" function nil nil [83465 83911])
            ("kill-this-buffer" function (:user-visible-flag t) nil [83913 84457])
            ("kill-this-buffer-enabled-p" function nil nil [84459 84927])
            ("put" code nil nil [84929 84990])
            ("delete-frame-enabled-p" function nil nil [85065 85350])
            ("yank-menu-length" variable (:default-value 20) nil [85352 85463])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [85465 86456])
            ("put" code nil nil [86458 86504])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [86505 86737])
            ("buffers-menu-max-size" variable (:default-value 10) nil [86759 87103])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [87105 87454])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [87456 88200])
            ("buffers-menu-show-status" variable (:default-value t) nil [88202 88575])
            ("list-buffers-directory" variable nil nil [88577 88686])
            ("make-variable-buffer-local" code nil nil [88687 88739])
            ("menu-bar-select-buffer" function nil nil [88741 88830])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [88832 88943])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [88945 89815])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [89884 89934])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [89936 90124])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [90126 90554])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [90556 94442])
            ("add-hook" code nil nil [94444 94501])
            ("menu-bar-update-buffers" code nil nil [94503 94528])
            ("dolist" code nil nil [95151 95447])
            ("let" code nil nil [95449 95938])
            ("let" code nil nil [95940 97009])
            ("define-minor-mode" code nil nil [97012 98376])
            ("put" code nil nil [98820 98861])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98863 99269])
            ("declare-function" code nil nil [99271 99336])
            ("declare-function" code nil nil [99337 99406])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [99408 99622])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [99624 102634])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [102636 103384])
            ("tty-menu-open-use-tmm" variable nil nil [103386 103847])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [103849 104000])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [104002 105570])
            ("global-set-key" code nil nil [105572 105609])
            ("buffer-menu-open" function (:user-visible-flag t) nil [105611 105836])
            ("global-set-key" code nil nil [105838 105880])
            ("mouse-buffer-menu-keymap" function nil nil [105882 106209])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [106211 109756])
            ("menu-bar" package nil nil [109758 109777]))          
      :file "menu-bar.el"
      :pointmax 109805
      :fsize 109804
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function (:arguments ("prompt")) nil [1155 1917])
            ("read-file-local-variable-value" function (:arguments ("variable")) nil [1919 3571])
            ("read-file-local-variable-mode" function nil nil [3573 4410])
            ("modify-file-local-variable-message" function (:arguments ("variable" "value" "op")) nil [4412 5507])
            ("modify-file-local-variable" function (:arguments ("variable" "value" "op" "interactive")) nil [5509 8837])
            ("add-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [8854 9888])
            ("delete-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [9905 10198])
            ("modify-file-local-variable-prop-line" function (:arguments ("variable" "value" "op" "interactive")) nil [10200 14745])
            ("add-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [14762 15389])
            ("delete-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [15406 15711])
            ("auto-insert" variable nil nil [15713 15733])
            ("modify-dir-local-variable" function (:arguments ("mode" "variable" "value" "op")) nil [15756 19315])
            ("add-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [19332 19740])
            ("delete-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable"))
                nil [19757 20062])
            ("copy-file-locals-to-dir-locals" function (:user-visible-flag t) nil [20079 20347])
            ("copy-dir-locals-to-file-locals" function (:user-visible-flag t) nil [20364 20578])
            ("copy-dir-locals-to-file-locals-prop-line" function (:user-visible-flag t) nil [20595 20817])
            ("enable-connection-local-variables" variable (:default-value t) nil [20869 20973])
            ("connection-local-variables-alist" variable nil nil [20975 21305])
            ("make-variable-buffer-local" code nil nil [21306 21368])
            ("setq" code nil nil [21369 21470])
            ("connection-local-profile-alist" variable (:default-value (quote nil)) nil [21472 21845])
            ("connection-local-criteria-alist" variable (:default-value (quote nil)) nil [21847 22391])
            ("connection-local-normalize-criteria" function (:arguments ("criteria")) nil [22393 22768])
            ("connection-local-get-profiles" function (:arguments ("criteria")) nil [22770 23503])
            ("connection-local-set-profiles" function (:arguments ("criteria" "profiles")) nil [23520 24660])
            ("connection-local-get-profile-variables" function (:arguments ("profile")) nil [24662 24834])
            ("connection-local-set-profile-variables" function (:arguments ("profile" "variables")) nil [24851 25544])
            ("hack-connection-local-variables" function (:arguments ("criteria")) nil [25546 26196])
            ("hack-connection-local-variables-apply" function (:arguments ("criteria")) nil [26213 26581])
            ("with-connection-local-profiles" function (:arguments ("profiles" "body")) nil [26598 27418])
            ("files-x" package nil nil [27423 27441]))          
      :file "files-x.el"
      :pointmax 27468
      :fsize 27467
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("when" code nil nil [1088 1364])
            ("file-name-buffer-file-type-alist" variable (:default-value (quote (("[:/].*config.sys$") ("\\.\\(obj\\|exe\\|com\\|lib\\|sys\\|bin\\|ico\\|pif\\|class\\)$" . t) ("\\.\\(dll\\|drv\\|386\\|vxd\\|fon\\|fnt\\|fot\\|ttf\\|grp\\)$" . t) ("\\.\\(bmp\\|wav\\|avi\\|mpg\\|jpg\\|tif\\|mov\\|au\\)$" . t) ("\\.\\(arc\\|zip\\|pak\\|lzh\\|zoo\\)$" . t) ("\\.\\(a\\|o\\|tar\\|z\\|gz\\|taz\\|jar\\)$" . t) ("\\.sx[dmicw]$" . t) ("\\.tp[ulpw]$" . t) ("[:/]tags$")))) nil [1445 2463])
            ("make-obsolete-variable" code nil nil [2465 2562])
            ("find-buffer-file-type-coding-system" function (:arguments ("command")) nil [2564 6270])
            ("make-obsolete" code nil nil [6271 6334])
            ("find-file-binary" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [6336 6673])
            ("find-file-text" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [6675 6872])
            ("w32-find-file-not-found-set-buffer-file-coding-system" function nil nil [6874 7500])
            ("add-hook" code nil nil [7552 7651])
            ("define-obsolete-variable-alias" code nil nil [7723 7828])
            ("w32-untranslated-filesystem-list" variable nil nil [7829 8066])
            ("w32-untranslated-canonical-name" function (:arguments ("filename")) nil [8068 9050])
            ("w32-untranslated-file-p" function (:arguments ("filename")) nil [9052 9472])
            ("define-obsolete-function-alias" code nil nil [9474 9577])
            ("w32-add-untranslated-filesystem" function
               (:user-visible-flag t
                :arguments ("filesystem"))
                nil [9578 10289])
            ("define-obsolete-function-alias" code nil nil [10292 10401])
            ("w32-remove-untranslated-filesystem" function
               (:user-visible-flag t
                :arguments ("filesystem"))
                nil [10402 10899])
            ("define-obsolete-variable-alias" code nil nil [10974 11101])
            ("w32-direct-print-region-use-command-dot-com" variable (:default-value t) nil [11102 11264])
            ("w32-direct-print-region-helper" function (:arguments ("printer" "start" "end" "lpr-prog" "_delete-text" "_buf" "_display" "rest")) nil [11379 15529])
            ("printer-name" variable nil nil [15531 15552])
            ("declare-function" code nil nil [15554 15604])
            ("define-obsolete-function-alias" code nil nil [15606 15711])
            ("w32-direct-print-region-function" function (:arguments ("start" "end" "lpr-prog" "delete-text" "buf" "display" "rest")) nil [15712 17244])
            ("lpr-headers-switches" variable nil nil [17246 17275])
            ("when" code nil nil [17746 17857])
            ("ps-printer-name" variable nil nil [17859 17883])
            ("define-obsolete-function-alias" code nil nil [17885 17996])
            ("w32-direct-ps-print-region-function" function (:arguments ("start" "end" "lpr-prog" "delete-text" "buf" "display" "rest")) nil [17997 18832])
            ("dos-w32" package nil nil [18962 18980]))          
      :file "dos-w32.el"
      :pointmax 19007
      :fsize 19006
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1050 1067])
            ("obarray" include nil nil [1069 1087])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1089 1203])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1205 1395])
            ("only-global-abbrevs" variable nil nil [1397 1648])
            ("define-minor-mode" code nil nil [1650 2078])
            ("put" code nil nil [2080 2129])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2133 2413])
            ("define-obsolete-variable-alias" code nil nil [2414 2496])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2498 2669])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2671 3009])
            ("insert-abbrevs" function (:user-visible-flag t) nil [3011 3297])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3299 3597])
            ("abbrev-table-name" function (:arguments ("table")) nil [3599 3885])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3887 4773])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4775 5791])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5793 5988])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5990 6988])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6990 7507])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7509 7834])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7836 9595])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9597 9917])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9919 10152])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10156 10696])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10698 11188])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11190 11783])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11785 12216])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12218 12561])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12563 13174])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13176 13837])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13839 14534])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14560 14713])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14715 14945])
            ("defalias" code nil nil [14947 15036])
            ("defalias" code nil nil [15038 15208])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15264 15405])
            ("make-abbrev-table" function (:arguments ("props")) nil [15407 16146])
            ("abbrev-table-p" function (:arguments ("object")) nil [16148 16318])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16320 16900])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16902 17149])
            ("abbrev-minor-mode-table-alist" variable nil nil [17151 17406])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17408 17683])
            ("abbrevs-changed" variable nil nil [17685 17833])
            ("abbrev-all-caps" variable nil nil [17835 17976])
            ("abbrev-start-location" variable nil nil [17978 18180])
            ("abbrev-start-location-buffer" variable nil nil [18182 18360])
            ("last-abbrev" variable nil nil [18362 18459])
            ("last-abbrev-text" variable nil nil [18461 18591])
            ("last-abbrev-location" variable nil nil [18593 18683])
            ("pre-abbrev-expand-hook" variable nil nil [18860 19135])
            ("make-obsolete-variable" code nil nil [19136 19215])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19217 19844])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19846 22987])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22989 23732])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23734 24092])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [24094 24516])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24518 25565])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25568 26516])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26518 27212])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [27215 27475])
            ("abbrev--before-point" function nil nil [27478 30096])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [30098 33142])
            ("abbrev-expand-functions" variable nil nil [33144 33230])
            ("make-obsolete-variable" code nil nil [33231 33311])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [33313 33516])
            ("expand-abbrev" function (:user-visible-flag t) nil [33518 34009])
            ("abbrev--default-expand" function nil nil [34011 35530])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35532 36430])
            ("abbrev--write" function (:arguments ("sym")) nil [36432 36887])
            ("abbrev--describe" function (:arguments ("sym")) nil [36889 37283])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [37285 38326])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [38328 40617])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [40619 41470])
            ("define-derived-mode" code nil nil [41565 41779])
            ("abbrev" package nil nil [41781 41798]))          
      :file "abbrev.el"
      :pointmax 41824
      :fsize 41823
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1067 . 1068) (symbol 1032 . 1049) (open-paren 1031 . 1032)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6710 6729])
            ("highlight-changes" customgroup (:user-visible-flag t) nil [6795 6889])
            ("highlight-changes" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t))))
                :type "face")
                nil [7284 7509])
            ("highlight-changes-delete" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t))))
                :type "face")
                nil [7588 7847])
            ("define-obsolete-variable-alias" code nil nil [7912 8036])
            ("highlight-changes-colors" variable (:default-value (if (eq (frame-parameter nil (quote background-mode)) (quote light)) (quote ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")) (quote ("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))) nil [8038 8821])
            ("define-obsolete-variable-alias" code nil nil [8922 9040])
            ("highlight-changes-visibility-initial-state" variable (:default-value t) nil [9042 9418])
            ("define-obsolete-variable-alias" code nil nil [9554 9662])
            ("highlight-changes-visible-string" variable (:default-value " +Chg") nil [9664 9965])
            ("define-obsolete-variable-alias" code nil nil [9967 10078])
            ("highlight-changes-invisible-string" variable (:default-value " -Chg") nil [10080 10382])
            ("highlight-changes-global-modes" variable (:default-value t) nil [10384 11501])
            ("highlight-changes-global-changes-existing-buffers" variable nil nil [11503 12023])
            ("hilit-chg-list" variable nil nil [12057 12084])
            ("hilit-chg-string" variable (:default-value " ??") nil [12085 12116])
            ("make-variable-buffer-local" code nil nil [12118 12164])
            ("define-minor-mode" code nil nil [12201 13979])
            ("define-minor-mode" code nil nil [13997 14681])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14684 16295])
            ("highlight-changes-face-list" variable nil nil [16298 16957])
            ("hilit-chg-map-changes" function (:arguments ("func" "start-position" "end-position")) nil [16960 17598])
            ("hilit-chg-display-changes" function (:arguments ("beg" "end")) nil [17601 17940])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [17943 18778])
            ("hilit-chg-hide-changes" function (:arguments ("beg" "end")) nil [18780 19278])
            ("hilit-chg-fixup" function (:arguments ("beg" "end")) nil [19281 19601])
            ("highlight-changes-remove-highlight" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [19618 19944])
            ("hilit-chg-set-face-on-change" function (:arguments ("beg" "end" "leng-before" "no-property-change")) nil [19946 22668])
            ("hilit-chg-update" function nil nil [22670 23101])
            ("hilit-chg-set" function nil nil [23103 23513])
            ("hilit-chg-clear" function nil nil [23515 24222])
            ("highlight-changes-next-change" function (:user-visible-flag t) nil [24240 24803])
            ("highlight-changes-previous-change" function (:user-visible-flag t) nil [24821 25650])
            ("hilit-chg-make-list" function (:arguments ("force")) nil [25729 27047])
            ("hilit-chg-bump-change" function (:arguments ("prop" "start" "end")) nil [27049 27450])
            ("highlight-changes-rotate-faces" function (:user-visible-flag t) nil [27467 29599])
            ("highlight-markup-buffers" function (:arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only")) nil [29749 32141])
            ("highlight-compare-buffers" function
               (:user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [32158 33026])
            ("highlight-compare-with-file" function
               (:user-visible-flag t
                :arguments ("file-b"))
                nil [33043 34428])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [34431 34854])
            ("hilit-chg-get-diff-list-hk" function nil nil [34857 36320])
            ("define-globalized-minor-mode" code nil nil [36410 36526])
            ("define-obsolete-function-alias" code nil nil [36528 36627])
            ("highlight-changes-mode-turn-on" function nil nil [36629 37394])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [37494 37647])
            ("add-to-list" code nil nil [37649 37758])
            ("add-to-list" code nil nil [37760 37821])
            ("hilit-chg-unload-function" function nil nil [38203 38347])
            ("hilit-chg" package nil nil [38349 38369]))          
      :file "hilit-chg.el"
      :pointmax 38398
      :fsize 38397
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "wid-edit.el"
      :fsize 126882
      :lastmodtime '(23603 24960 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [3640 3660])
            ("hi-lock" customgroup (:user-visible-flag t) nil [3662 3837])
            ("hi-lock-file-patterns-range" variable (:default-value 10000) nil [3839 4166])
            ("hi-lock-highlight-range" variable (:default-value 200000) nil [4168 4623])
            ("hi-lock-exclude-modes" variable (:default-value (quote (rmail-mode mime/viewer-mode gnus-article-mode))) nil [4625 4881])
            ("hi-lock-file-patterns-policy" variable (:default-value (quote ask)) nil [4883 5439])
            ("put" code nil nil [5474 5533])
            ("hi-lock-auto-select-face" variable nil nil [5535 5772])
            ("hi-lock-faces" customgroup (:user-visible-flag t) nil [5774 5859])
            ("hi-yellow" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "yellow1" :foreground "black")) (((background dark)) (:background "yellow" :foreground "black")) (((min-colors 88)) (:background "yellow1")) (t (:background "yellow"))))
                :type "face")
                nil [5861 6179])
            ("hi-pink" variable
               (:default-value (quote ((((background dark)) (:background "pink" :foreground "black")) (t (:background "pink"))))
                :type "face")
                nil [6181 6346])
            ("hi-green" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "light green" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((min-colors 88)) (:background "light green")) (t (:background "green"))))
                :type "face")
                nil [6348 6663])
            ("hi-blue" variable
               (:default-value (quote ((((background dark)) (:background "light blue" :foreground "black")) (t (:background "light blue"))))
                :type "face")
                nil [6665 6842])
            ("hi-black-b" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [6844 6939])
            ("hi-blue-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "blue1")) (t (:weight bold :foreground "blue"))))
                :type "face")
                nil [6941 7113])
            ("hi-green-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "green1")) (t (:weight bold :foreground "green"))))
                :type "face")
                nil [7115 7290])
            ("hi-red-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "red1")) (t (:weight bold :foreground "red"))))
                :type "face")
                nil [7292 7461])
            ("hi-black-hb" variable
               (:default-value (quote ((t (:weight bold :height 1.67 :inherit variable-pitch))))
                :type "face")
                nil [7463 7596])
            ("defvar-local" code nil nil [7598 7702])
            ("put" code nil nil [7703 7750])
            ("defvar-local" code nil nil [7752 7865])
            ("put" code nil nil [7866 7920])
            ("define-obsolete-variable-alias" code nil nil [7922 8038])
            ("hi-lock-face-defaults" variable (:default-value (quote ("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))) nil [8039 8237])
            ("define-obsolete-variable-alias" code nil nil [8239 8382])
            ("hi-lock-file-patterns-prefix" variable (:default-value "Hi-lock") nil [8384 8494])
            ("hi-lock-archaic-interface-message-used" variable nil nil [8496 8836])
            ("hi-lock-archaic-interface-deduce" variable nil nil [8838 9064])
            ("hi-lock-menu" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key-after map [highlight-regexp] (quote (menu-item "Highlight Regexp..." highlight-regexp :help "Highlight text matching PATTERN (a regexp)."))) (define-key-after map [highlight-phrase] (quote (menu-item "Highlight Phrase..." highlight-phrase :help "Highlight text matching PATTERN (a regexp processed to match phrases)."))) (define-key-after map [highlight-lines-matching-regexp] (quote (menu-item "Highlight Lines..." highlight-lines-matching-regexp :help "Highlight lines containing match of PATTERN (a regexp)."))) (define-key-after map [highlight-symbol-at-point] (quote (menu-item "Highlight Symbol at Point" highlight-symbol-at-point :help "Highlight symbol found near point without prompting."))) (define-key-after map [unhighlight-regexp] (quote (menu-item "Remove Highlighting..." unhighlight-regexp :help "Remove previously entered highlighting pattern." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-write-interactive-patterns] (quote (menu-item "Patterns to Buffer" hi-lock-write-interactive-patterns :help "Insert interactively added REGEXPs into buffer at point." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-find-patterns] (quote (menu-item "Patterns from Buffer" hi-lock-find-patterns :help "Use patterns (if any) near top of buffer."))) map)) nil [9066 10582])
            ("hi-lock-map" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key map "wi" (quote hi-lock-find-patterns)) (define-key map "wl" (quote highlight-lines-matching-regexp)) (define-key map "wp" (quote highlight-phrase)) (define-key map "wh" (quote highlight-regexp)) (define-key map "w." (quote highlight-symbol-at-point)) (define-key map "wr" (quote unhighlight-regexp)) (define-key map "wb" (quote hi-lock-write-interactive-patterns)) map)) nil [10584 11069])
            ("define-minor-mode" code nil nil [11108 15705])
            ("define-globalized-minor-mode" code nil nil [15722 15832])
            ("turn-on-hi-lock-if-enabled" function nil nil [15834 15993])
            ("defalias" code nil nil [16010 16079])
            ("hi-lock-line-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [16095 16924])
            ("defalias" code nil nil [16942 16991])
            ("hi-lock-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17007 17636])
            ("defalias" code nil nil [17653 17709])
            ("hi-lock-face-phrase-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17725 18599])
            ("defalias" code nil nil [18616 18683])
            ("hi-lock-face-symbol-at-point" function (:user-visible-flag t) nil [18699 19386])
            ("hi-lock-keyword->face" function (:arguments ("keyword")) nil [19388 19458])
            ("declare-function" code nil nil [19508 19564])
            ("hi-lock--regexps-at-point" function nil nil [19566 21211])
            ("defvar-local" code nil nil [21213 21393])
            ("defalias" code nil nil [21410 21463])
            ("hi-lock-unface-buffer" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [21479 24550])
            ("hi-lock-write-interactive-patterns" function (:user-visible-flag t) nil [24567 25325])
            ("hi-lock-process-phrase" function (:arguments ("phrase")) nil [25356 26151])
            ("hi-lock-regexp-okay" function (:arguments ("regexp")) nil [26153 26500])
            ("hi-lock-read-face-name" function nil nil [26502 27656])
            ("hi-lock-set-pattern" function (:arguments ("regexp" "face")) nil [27658 29406])
            ("hi-lock-set-file-patterns" function (:arguments ("patterns")) nil [29408 29736])
            ("hi-lock-find-patterns" function (:user-visible-flag t) nil [29738 31166])
            ("hi-lock-font-lock-hook" function nil nil [31168 31392])
            ("hi-lock--hashcons-hash" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [31394 31512])
            ("hi-lock--hashcons" function (:arguments ("string")) nil [31514 31690])
            ("hi-lock-unload-function" function nil nil [31692 31824])
            ("hi-lock" package nil nil [31826 31844]))          
      :file "hi-lock.el"
      :pointmax 31871
      :fsize 31870
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "font-lock.el"
      :fsize 102935
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("paren-showing" customgroup (:user-visible-flag t) nil [1054 1183])
            ("show-paren-style" variable (:default-value (quote parenthesis)) nil [1185 1575])
            ("show-paren-delay" variable (:default-value 0.125) nil [1577 2034])
            ("show-paren-priority" variable (:default-value 1000) nil [2036 2152])
            ("show-paren-ring-bell-on-mismatch" variable nil nil [2154 2291])
            ("show-paren-when-point-inside-paren" variable nil nil [2293 2504])
            ("show-paren-when-point-in-periphery" variable nil nil [2506 2737])
            ("show-paren-highlight-openparen" variable (:default-value t) nil [2739 3011])
            ("show-paren--idle-timer" variable nil nil [3013 3048])
            ("show-paren--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (delete-overlay ol) ol)) nil [3049 3202])
            ("show-paren--overlay-1" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (delete-overlay ol) ol)) nil [3203 3358])
            ("define-minor-mode" code nil nil [3376 4302])
            ("show-paren--unescaped-p" function (:arguments ("pos")) nil [4304 4486])
            ("show-paren--categorize-paren" function (:arguments ("pos")) nil [4488 5045])
            ("show-paren--locate-near-paren" function nil nil [5047 6275])
            ("show-paren-data-function" variable (:default-value (function show-paren--default)) nil [6277 6637])
            ("show-paren--default" function nil nil [6639 8733])
            ("show-paren-function" function nil nil [8735 11708])
            ("paren" package nil nil [11710 11726]))          
      :file "paren.el"
      :pointmax 11751
      :fsize 11750
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [2861 2959])
            ("defvar-local" code nil nil [2961 3073])
            ("global-hl-line-overlays" variable nil nil [3075 3277])
            ("hl-line" customgroup (:user-visible-flag t) nil [3279 3373])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3375 3524])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3526 3955])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3957 4393])
            ("global-hl-line-sticky-flag" variable nil nil [4395 4764])
            ("hl-line-range-function" variable nil nil [4766 5153])
            ("hl-line-overlay-buffer" variable nil nil [5155 5257])
            ("define-minor-mode" code nil nil [5274 6700])
            ("hl-line-make-overlay" function nil nil [6702 6884])
            ("hl-line-highlight" function nil nil [6886 7324])
            ("hl-line-unhighlight" function nil nil [7326 7474])
            ("hl-line-maybe-unhighlight" function nil nil [7476 8181])
            ("define-minor-mode" code nil nil [8198 9352])
            ("global-hl-line-highlight" function nil nil [9354 9954])
            ("global-hl-line-highlight-all" function nil nil [9956 10204])
            ("global-hl-line-unhighlight" function nil nil [10206 10382])
            ("global-hl-line-maybe-unhighlight" function nil nil [10384 11051])
            ("global-hl-line-unhighlight-all" function nil nil [11053 11347])
            ("hl-line-move" function (:arguments ("overlay")) nil [11349 11891])
            ("hl-line-unload-function" function nil nil [11893 12155])
            ("hl-line" package nil nil [12157 12175]))          
      :file "hl-line.el"
      :pointmax 12202
      :fsize 12201
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [942 973])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [998 1434])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [1458 8955])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [8957 9592])
            ("custom-set-faces" function (:arguments ("args")) nil [9613 10035])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [10037 12340])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [12502 12858])
            ("custom-reset-faces" function (:arguments ("args")) nil [12860 13176])
            ("cus-face" package nil nil [13192 13211]))          
      :file "cus-face.el"
      :pointmax 13239
      :fsize 13238
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("type-break" customgroup (:user-visible-flag t) nil [2583 2723])
            ("type-break-interval" variable (:default-value (* 60 60)) nil [2725 2859])
            ("type-break-good-rest-interval" variable (:default-value (/ type-break-interval 6)) nil [2861 3425])
            ("type-break-good-break-interval" variable nil nil [3427 3885])
            ("type-break-keystroke-threshold" variable (:default-value (let* ((wpm 35) (avg-word-length 5) (upper (* wpm avg-word-length (/ type-break-interval 60))) (lower (/ upper 5))) (cons lower upper))) nil [3887 5875])
            ("type-break-query-function" variable (:default-value (quote yes-or-no-p)) nil [5877 6295])
            ("type-break-query-interval" variable (:default-value 60) nil [6297 6555])
            ("type-break-time-warning-intervals" variable (:default-value (quote (300 120 60 30))) nil [6557 6853])
            ("type-break-keystroke-warning-intervals" variable (:default-value (quote (300 200 100 50))) nil [6855 7257])
            ("type-break-warning-repeat" variable (:default-value 40) nil [7259 7518])
            ("type-break-time-stamp-format" variable (:default-value "[%H:%M] ") nil [7520 7709])
            ("type-break-demo-functions" variable (:default-value (quote (type-break-demo-boring type-break-demo-life type-break-demo-hanoi))) nil [7711 8141])
            ("type-break-demo-boring-stats" variable nil nil [8143 8292])
            ("type-break-terse-messages" variable nil nil [8294 8407])
            ("type-break-file-name" variable (:default-value (locate-user-emacs-file "type-break" ".type-break")) nil [8409 8677])
            ("type-break-post-command-hook" variable (:default-value (quote (type-break-check))) nil [8679 9205])
            ("type-break-mode-line-format" variable (:default-value (quote (type-break-mode-line-message-mode ("" type-break-mode-line-break-message type-break-mode-line-warning)))) nil [9229 9453])
            ("type-break-mode-line-break-message" variable (:default-value (quote (type-break-mode-line-break-message-p type-break-mode-line-break-string))) nil [9455 9578])
            ("type-break-mode-line-break-message-p" variable nil nil [9580 9629])
            ("type-break-mode-line-break-string" variable (:default-value " *** TAKE A TYPING BREAK NOW ***") nil [9630 9707])
            ("type-break-mode-line-warning" variable (:default-value (quote (type-break-mode-line-break-message-p ("") (type-break-warning-countdown-string (" *** " "Break in " type-break-warning-countdown-string " " type-break-warning-countdown-string-type "***"))))) nil [9709 10019])
            ("type-break-warning-countdown-string" variable nil nil [10021 10358])
            ("type-break-warning-countdown-string-type" variable nil nil [10360 10532])
            ("type-break-alarm-p" variable nil nil [10597 10628])
            ("type-break-keystroke-count" variable nil nil [10629 10666])
            ("type-break-time-last-break" variable nil nil [10667 10706])
            ("type-break-time-next-break" variable nil nil [10707 10746])
            ("type-break-time-last-command" variable (:default-value (current-time)) nil [10747 10799])
            ("type-break-current-time-warning-interval" variable nil nil [10800 10853])
            ("type-break-current-keystroke-warning-interval" variable nil nil [10854 10912])
            ("type-break-time-warning-count" variable nil nil [10913 10953])
            ("type-break-keystroke-warning-count" variable nil nil [10954 10999])
            ("type-break-interval-start" variable nil nil [11000 11038])
            ("define-minor-mode" code nil nil [11057 16703])
            ("define-minor-mode" code nil nil [16705 17315])
            ("define-minor-mode" code nil nil [17317 17675])
            ("type-break-auto-save-file-name" variable (:default-value (let ((buffer-file-name type-break-file-name)) (make-auto-save-file-name))) nil [17707 17873])
            ("type-break-file-time" function (:arguments ("time")) nil [17875 18410])
            ("type-break-file-keystroke-count" function nil nil [18412 19072])
            ("timep" function (:arguments ("time")) nil [19074 19259])
            ("type-break-choose-file" function nil nil [19261 19656])
            ("type-break-get-previous-time" function nil nil [19658 20183])
            ("type-break-get-previous-count" function nil nil [20185 20910])
            ("type-break" function (:user-visible-flag t) nil [20929 23370])
            ("type-break-schedule" function
               (:user-visible-flag t
                :arguments ("time" "start" "interval"))
                nil [23374 24150])
            ("type-break-cancel-schedule" function nil nil [24152 24361])
            ("type-break-time-warning-schedule" function (:arguments ("time" "resetp")) nil [24363 25846])
            ("type-break-cancel-time-warning-schedule" function nil nil [25848 26249])
            ("type-break-alarm" function nil nil [26251 26398])
            ("type-break-time-warning-alarm" function nil nil [26400 26664])
            ("type-break-run-tb-post-command-hook" function nil nil [26668 26787])
            ("type-break-check" function nil nil [26789 29317])
            ("type-break-check-keystroke-warning" function nil nil [29384 30437])
            ("type-break-query" function nil nil [30518 30609])
            ("type-break-do-query" function nil nil [30611 31981])
            ("type-break-noninteractive-query" function (:arguments ("_ignored-args")) nil [31983 32616])
            ("type-break-time-warning" function nil nil [32618 33973])
            ("type-break-keystroke-warning" function nil nil [33975 35171])
            ("type-break-mode-line-countdown-or-break" function (:arguments ("type")) nil [35173 35960])
            ("type-break-statistics" function (:user-visible-flag t) nil [35979 37674])
            ("type-break-guesstimate-keystroke-threshold" function
               (:user-visible-flag t
                :arguments ("wpm" "wordlen" "frac"))
                nil [37691 39473])
            ("type-break-time-difference" function (:arguments ("a" "b")) nil [39616 39699])
            ("type-break-time-sum" function (:arguments ("tmlist")) nil [39769 39904])
            ("type-break-time-stamp" function (:arguments ("when")) nil [39906 40242])
            ("type-break-format-time" function (:arguments ("secs")) nil [40244 40490])
            ("type-break-keystroke-reset" function nil nil [40492 40859])
            ("type-break-force-mode-line-update" function (:arguments ("all")) nil [40861 41140])
            ("type-break-check-post-command-hook" function nil nil [41525 41647])
            ("type-break-run-at-time" function (:arguments ("time" "repeat" "function")) nil [41793 41958])
            ("timer-dont-exit" variable nil nil [41960 41984])
            ("type-break-cancel-function-timers" function (:arguments ("function")) nil [41985 42105])
            ("type-break-catch-up-event" function nil nil [42128 42409])
            ("type-break-demo-hanoi" function nil nil [42606 43058])
            ("type-break-demo-life" function nil nil [43223 43882])
            ("type-break-demo-boring" function nil nil [43928 47976])
            ("type-break" package nil nil [47980 48001])
            ("if" code nil nil [48003 48047]))          
      :file "type-break.el"
      :pointmax 48077
      :fsize 48076
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-protocol-version" variable
               (:constant-flag t
                :default-value "0.96")
                nil [13065 13104])
            ("ange-ftp" include nil nil [13125 13144])
            ("cl-lib" include nil nil [13165 13182])
            ("ring" include nil nil [13184 13199])
            ("ehelp" include nil nil [13200 13216])
            ("comint" include nil nil [13217 13234])
            ("declare-function" code nil nil [13255 13300])
            ("declare-function" code nil nil [13301 13348])
            ("declare-function" code nil nil [13349 13411])
            ("declare-function" code nil nil [13412 13456])
            ("declare-function" code nil nil [13457 13506])
            ("term" customgroup (:user-visible-flag t) nil [13508 13592])
            ("term-input-ring-size" variable (:default-value 32) nil [14073 14135])
            ("term-height" variable nil nil [14870 14890])
            ("term-width" variable nil nil [14939 14958])
            ("term-home-marker" variable nil nil [15010 15035])
            ("term-saved-home-marker" variable nil nil [15087 15217])
            ("term-start-line-column" variable nil nil [15218 15316])
            ("term-current-column" variable nil nil [15317 15392])
            ("term-current-row" variable nil nil [15393 15490])
            ("term-insert-mode" variable nil nil [15491 15520])
            ("term-vertical-motion" variable nil nil [15521 15550])
            ("term-terminal-state" variable nil nil [15551 15950])
            ("term-kill-echo-list" variable nil nil [15951 16037])
            ("term-terminal-parameter" variable nil nil [16038 16070])
            ("term-terminal-undecoded-bytes" variable nil nil [16071 16113])
            ("term-terminal-previous-parameter" variable nil nil [16114 16155])
            ("term-current-face" variable (:default-value (quote term)) nil [16156 16188])
            ("term-scroll-start" variable nil nil [16189 16266])
            ("term-scroll-end" variable nil nil [16267 16291])
            ("term-pager-count" variable nil nil [16346 16447])
            ("term-saved-cursor" variable nil nil [16448 16478])
            ("term-command-hook" variable nil nil [16479 16505])
            ("term-log-buffer" variable nil nil [16506 16534])
            ("term-scroll-with-delete" variable nil nil [16535 16816])
            ("term-pending-delete-marker" variable nil nil [16817 16852])
            ("term-old-mode-map" variable nil nil [17024 17096])
            ("term-old-mode-line-format" variable nil nil [17097 17131])
            ("term-pager-old-local-map" variable nil nil [17175 17245])
            ("term-pager-old-filter" variable nil nil [17246 17276])
            ("defvar-local" code nil nil [17314 17425])
            ("explicit-shell-file-name" variable nil nil [17427 17594])
            ("term-prompt-regexp" variable (:default-value "^") nil [17596 18033])
            ("term-delimiter-argument-list" variable nil nil [18035 18464])
            ("term-input-autoexpand" variable nil nil [18466 18984])
            ("term-input-ignoredups" variable nil nil [18986 19200])
            ("term-input-ring-file-name" variable nil nil [19202 19472])
            ("term-char-mode-buffer-read-only" variable (:default-value t) nil [19474 19983])
            ("term-char-mode-point-at-process-mark" variable (:default-value t) nil [19985 20819])
            ("term-scroll-to-bottom-on-output" variable nil nil [20821 21254])
            ("term-scroll-show-maximum-output" variable nil nil [21256 21546])
            ("term-suppress-hard-newline" variable nil nil [21548 21780])
            ("term-pending-frame" variable nil nil [21951 21982])
            ("term-get-old-input" variable (:default-value (function term-get-old-input-default)) nil [22024 22404])
            ("term-dynamic-complete-functions" variable (:default-value (quote (term-replace-by-expanded-history term-dynamic-complete-filename))) nil [22406 22706])
            ("term-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [22708 22994])
            ("term-input-filter-functions" variable (:default-value (quote nil)) nil [22996 23199])
            ("term-input-sender" variable (:default-value (function term-simple-send)) nil [23201 23553])
            ("term-partial-ansi-terminal-message" variable nil nil [23555 23665])
            ("term-eol-on-send" variable (:default-value t) nil [23667 23818])
            ("term-mode-hook" variable (:default-value (quote nil)) nil [23820 23963])
            ("term-exec-hook" variable (:default-value (quote nil)) nil [23965 24350])
            ("term-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote term-previous-input)) (define-key map "n" (quote term-next-input)) (define-key map "r" (quote term-previous-matching-input)) (define-key map "s" (quote term-next-matching-input)) (unless (featurep (quote xemacs)) (define-key map [138412146] (quote term-previous-matching-input-from-input)) (define-key map [138412147] (quote term-next-matching-input-from-input))) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-send-input)) (define-key map "" (quote term-delchar-or-maybe-eof)) (define-key map "" (quote term-bol)) (define-key map "" (quote term-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote term-interrupt-subjob)) (define-key map "" (quote term-stop-subjob)) (define-key map "" (quote term-quit-subjob)) (define-key map "" (quote term-copy-old-input)) (define-key map "" (quote term-kill-output)) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-show-maximum-output)) (define-key map "" (quote term-dynamic-list-input-ring)) (define-key map "" (quote term-next-prompt)) (define-key map "" (quote term-previous-prompt)) (define-key map "" (quote term-send-eof)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map "" (quote term-pager-toggle)) (easy-menu-define nil map "Complete menu for Term mode." (quote ("Complete" ["Complete Before Point" term-dynamic-complete t] ["Complete File Name" term-dynamic-complete-filename t] ["File Completion Listing" term-dynamic-list-filename-completions t] ["Expand File Name" term-replace-by-expanded-filename t]))) (easy-menu-define nil map "In/Out menu for Term mode." (quote ("In/Out" ["Expand History Before Point" term-replace-by-expanded-history term-input-autoexpand] ["List Input History" term-dynamic-list-input-ring t] ["Previous Input" term-previous-input t] ["Next Input" term-next-input t] ["Previous Matching Current Input" term-previous-matching-input-from-input t] ["Next Matching Current Input" term-next-matching-input-from-input t] ["Previous Matching Input..." term-previous-matching-input t] ["Next Matching Input..." term-next-matching-input t] ["Backward Matching Input..." term-backward-matching-input t] ["Forward Matching Input..." term-forward-matching-input t] ["Copy Old Input" term-copy-old-input t] ["Kill Current Input" term-kill-input t] ["Show Current Output Group" term-show-output t] ["Show Maximum Output" term-show-maximum-output t] ["Backward Output Group" term-previous-prompt t] ["Forward Output Group" term-next-prompt t] ["Kill Current Output Group" term-kill-output t]))) map)) nil [24352 27423])
            ("term-escape-char" variable nil nil [27425 27570])
            ("term-pager-break-map" variable (:default-value (let ((map (make-keymap))) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map " " (quote term-pager-page)) (define-key map "" (quote term-pager-line)) (define-key map "?" (quote term-pager-help)) (define-key map "h" (quote term-pager-help)) (define-key map "b" (quote term-pager-back-page)) (define-key map "" (quote term-pager-back-line)) (define-key map "q" (quote term-pager-discard)) (define-key map "D" (quote term-pager-disable)) (define-key map "<" (quote term-pager-bob)) (define-key map ">" (quote term-pager-eob)) map)) nil [27572 28400])
            ("term-ptyp" variable (:default-value t) nil [28402 28548])
            ("term-last-input-match" variable nil nil [28550 28681])
            ("term-input-ring" variable nil nil [28683 28711])
            ("term-last-input-start" variable nil nil [28712 28742])
            ("term-last-input-end" variable nil nil [28743 28771])
            ("term-input-ring-index" variable nil nil [28772 28849])
            ("term-matching-input-from-input-string" variable nil nil [28850 28949])
            ("term-pager-filter" variable (:default-value t) nil [29064 29092])
            ("put" code nil nil [29094 29135])
            ("put" code nil nil [29136 29183])
            ("put" code nil nil [29184 29231])
            ("put" code nil nil [29232 29285])
            ("put" code nil nil [29286 29343])
            ("put" code nil nil [29344 29401])
            ("put" code nil nil [29402 29437])
            ("term-in-char-mode" function nil nil [29439 29509])
            ("term-in-line-mode" function nil nil [29510 29568])
            ("term-pager-enabled" function nil nil [29612 29662])
            ("term-handling-pager" function nil nil [29663 29722])
            ("term-using-alternate-sub-buffer" function nil nil [29723 29792])
            ("term-ansi-at-host" variable nil nil [29833 29863])
            ("term-ansi-at-dir" variable nil nil [29864 29893])
            ("term-ansi-at-user" variable nil nil [29894 29924])
            ("term-ansi-at-message" variable nil nil [29925 29958])
            ("term-ansi-at-save-user" variable nil nil [29959 29994])
            ("term-ansi-at-save-pwd" variable nil nil [29995 30029])
            ("term-ansi-at-save-anon" variable nil nil [30030 30065])
            ("term-ansi-current-bold" variable nil nil [30066 30101])
            ("term-ansi-current-color" variable nil nil [30102 30136])
            ("term-ansi-face-already-done" variable nil nil [30137 30177])
            ("term-ansi-current-bg-color" variable nil nil [30178 30215])
            ("term-ansi-current-underline" variable nil nil [30216 30256])
            ("term-ansi-current-reverse" variable nil nil [30257 30295])
            ("term-ansi-current-invisible" variable nil nil [30296 30336])
            ("term-terminal-more-parameters" variable nil nil [30396 30436])
            ("term-terminal-previous-parameter-2" variable (:default-value -1) nil [30437 30483])
            ("term-terminal-previous-parameter-3" variable (:default-value -1) nil [30484 30530])
            ("term-terminal-previous-parameter-4" variable (:default-value -1) nil [30531 30577])
            ("ansi-term-color-vector" variable (:default-value [term term-color-black term-color-red term-color-green term-color-yellow term-color-blue term-color-magenta term-color-cyan term-color-white]) nil [30589 30788])
            ("term-default-fg-color" variable nil nil [30790 30953])
            ("make-obsolete-variable" code nil nil [30954 31063])
            ("term-default-bg-color" variable nil nil [31065 31228])
            ("make-obsolete-variable" code nil nil [31229 31338])
            ("term" variable
               (:default-value (\` ((t :foreground (\, term-default-fg-color) :background (\, term-default-bg-color) :inherit default)))
                :type "face")
                nil [31340 31518])
            ("term-bold" variable
               (:default-value (quote ((t :bold t)))
                :type "face")
                nil [31520 31610])
            ("term-underline" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [31612 31718])
            ("term-color-black" variable
               (:default-value (quote ((t :foreground "black" :background "black")))
                :type "face")
                nil [31720 31852])
            ("term-color-red" variable
               (:default-value (quote ((t :foreground "red3" :background "red3")))
                :type "face")
                nil [31854 31980])
            ("term-color-green" variable
               (:default-value (quote ((t :foreground "green3" :background "green3")))
                :type "face")
                nil [31982 32116])
            ("term-color-yellow" variable
               (:default-value (quote ((t :foreground "yellow3" :background "yellow3")))
                :type "face")
                nil [32118 32256])
            ("term-color-blue" variable
               (:default-value (quote ((t :foreground "blue2" :background "blue2")))
                :type "face")
                nil [32258 32388])
            ("term-color-magenta" variable
               (:default-value (quote ((t :foreground "magenta3" :background "magenta3")))
                :type "face")
                nil [32390 32532])
            ("term-color-cyan" variable
               (:default-value (quote ((t :foreground "cyan3" :background "cyan3")))
                :type "face")
                nil [32534 32664])
            ("term-color-white" variable
               (:default-value (quote ((t :foreground "white" :background "white")))
                :type "face")
                nil [32666 32798])
            ("term-buffer-maximum-size" variable (:default-value 2048) nil [32839 33129])
            ("term-raw-map" variable (:default-value (let* ((map (make-keymap)) (esc-map (make-keymap)) (i 0)) (while (< i 128) (define-key map (make-string 1 i) (quote term-send-raw)) (unless (or (eq i 79) (eq i 91)) (define-key esc-map (make-string 1 i) (quote term-send-raw-meta))) (setq i (1+ i))) (define-key map [remap self-insert-command] (quote term-send-raw)) (define-key map "" esc-map) (if (featurep (quote xemacs)) (define-key map [button2] (quote term-mouse-paste)) (define-key map [mouse-2] (quote term-mouse-paste))) (define-key map [up] (quote term-send-up)) (define-key map [down] (quote term-send-down)) (define-key map [right] (quote term-send-right)) (define-key map [left] (quote term-send-left)) (define-key map [C-up] (quote term-send-ctrl-up)) (define-key map [C-down] (quote term-send-ctrl-down)) (define-key map [C-right] (quote term-send-ctrl-right)) (define-key map [C-left] (quote term-send-ctrl-left)) (define-key map [delete] (quote term-send-del)) (define-key map [deletechar] (quote term-send-del)) (define-key map [backspace] (quote term-send-backspace)) (define-key map [home] (quote term-send-home)) (define-key map [end] (quote term-send-end)) (define-key map [insert] (quote term-send-insert)) (define-key map [S-prior] (quote scroll-down)) (define-key map [S-next] (quote scroll-up)) (define-key map [S-insert] (quote term-paste)) (define-key map [prior] (quote term-send-prior)) (define-key map [next] (quote term-send-next)) (define-key map [xterm-paste] (function term--xterm-paste)) map)) nil [33162 34835])
            ("easy-menu-define" code nil nil [34837 35331])
            ("easy-menu-define" code nil nil [35333 36018])
            ("easy-menu-define" code nil nil [36020 36512])
            ("term-raw-escape-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (quote Control-X-prefix)) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (quote term-pager-toggle)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map [134217848] (quote execute-extended-command)) map)) nil [36514 37151])
            ("term-set-escape-char" function (:arguments ("key")) nil [37153 37681])
            ("term-set-escape-char" code nil nil [37683 37733])
            ("put" code nil nil [37737 37774])
            ("term-display-table" variable (:default-value (let ((dt (or (copy-sequence standard-display-table) (make-display-table))) i) (setq i 0) (while (< i 10) (aset dt i (vector i)) (setq i (1+ i))) (setq i 11) (while (< i 32) (aset dt i (vector i)) (setq i (1+ i))) (setq i 128) (while (< i 256) (aset dt i (vector i)) (setq i (1+ i))) dt)) nil [37834 38272])
            ("term-ansi-reset" function nil nil [38274 38789])
            ("define-derived-mode" code nil nil [38791 45507])
            ("term-reset-size" function (:arguments ("height" "width")) nil [45510 46131])
            ("term-check-kill-echo-list" function nil nil [46566 47192])
            ("term-send-raw-string" function (:arguments ("chars")) nil [47194 47640])
            ("term-send-raw" function (:user-visible-flag t) nil [47642 47878])
            ("term-send-raw-meta" function nil nil [47880 48473])
            ("term-mouse-paste" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [48475 48961])
            ("term-paste" function (:user-visible-flag t) nil [48963 49096])
            ("term--xterm-paste" function (:user-visible-flag t) nil [49098 49254])
            ("declare-function" code nil nil [49256 49309])
            ("term-send-up" function nil nil [49584 49654])
            ("term-send-down" function nil nil [49655 49725])
            ("term-send-right" function nil nil [49726 49796])
            ("term-send-left" function nil nil [49797 49867])
            ("term-send-ctrl-up" function nil nil [49868 49946])
            ("term-send-ctrl-down" function nil nil [49947 50025])
            ("term-send-ctrl-right" function nil nil [50026 50104])
            ("term-send-ctrl-left" function nil nil [50105 50183])
            ("term-send-home" function nil nil [50184 50255])
            ("term-send-insert" function nil nil [50256 50327])
            ("term-send-end" function nil nil [50328 50399])
            ("term-send-prior" function nil nil [50400 50471])
            ("term-send-next" function nil nil [50472 50543])
            ("term-send-del" function nil nil [50544 50615])
            ("term-send-backspace" function nil nil [50616 50691])
            ("term-char-mode" function (:user-visible-flag t) nil [50694 51915])
            ("term-line-mode" function (:user-visible-flag t) nil [51917 52489])
            ("term-line-mode-buffer-read-only-update" function nil nil [52491 52760])
            ("term-update-mode-line" function nil nil [52762 55120])
            ("term-check-proc" function (:arguments ("buffer")) nil [55122 55402])
            ("make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [55419 56222])
            ("term" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [56239 56735])
            ("term-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [56737 58127])
            ("term-sentinel" function (:arguments ("proc" "msg")) nil [58129 58892])
            ("term-handle-exit" function (:arguments ("process-name" "msg")) nil [58894 59558])
            ("term-term-name" variable (:default-value "eterm-color") nil [59561 59696])
            ("term-termcap-format" variable (:default-value "%s%s:li#%d:co#%d:cl=\\E[H\\E[J:cd=\\E[J:bs:am:xn:cm=\\E[%%i%%d;%%dH:nd=\\E[C:up=\\E[A:ce=\\E[K:ho=\\E[H:pt:al=\\E[L:dl=\\E[M:DL=\\E[%%dM:AL=\\E[%%dL:cs=\\E[%%i%%d;%%dr:sf=^J:dc=\\E[P:DC=\\E[%%dP:IC=\\E[%%d@:im=\\E[4h:ei=\\E[4l:mi::so=\\E[7m:se=\\E[m:us=\\E[4m:ue=\\E[m:md=\\E[1m:mr=\\E[7m:me=\\E[m:UP=\\E[%%dA:DO=\\E[%%dB:LE=\\E[%%dD:RI=\\E[%%dC:kl=\\EOD:kd=\\EOB:kr=\\EOC:ku=\\EOA:kN=\\E[6~:kP=\\E[5~:@7=\\E[4~:kh=\\E[1~:mk=\\E[8m:cb=\\E[1K:op=\\E[39;49m:Co#8:pa#64:AB=\\E[4%%dm:AF=\\E[3%%dm:cr=^M:bl=^G:do=^J:le=^H:ta=^I:se=\\E[27m:ue=\\E[24m:kb=^?:kD=^[[3~:sc=\\E7:rc=\\E8:r1=\\Ec:") nil [59787 60536])
            ("term--bash-needs-EMACS-status" variable nil nil [60999 61156])
            ("term--bash-needs-EMACSp" function nil nil [61157 61662])
            ("term-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [61763 63260])
            ("term-read-input-ring" function (:arguments ("silent")) nil [64360 66277])
            ("term-write-input-ring" function nil nil [66279 67462])
            ("term-dynamic-list-input-ring" function (:user-visible-flag t) nil [67465 68502])
            ("term-regexp-arg" function (:arguments ("prompt")) nil [68505 68954])
            ("term-search-arg" function (:arguments ("arg")) nil [68956 69358])
            ("term-search-start" function (:arguments ("arg")) nil [69360 69827])
            ("term-previous-input-string" function (:arguments ("arg")) nil [69861 70146])
            ("term-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70148 70286])
            ("term-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70288 70412])
            ("term-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [70414 70705])
            ("term-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [70707 71897])
            ("term-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [71899 72689])
            ("term-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [72691 73078])
            ("term-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [73080 73816])
            ("term-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [73818 74182])
            ("term-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [74185 75411])
            ("term-replace-by-expanded-history-before-point" function (:arguments ("silent")) nil [75414 79041])
            ("term-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79044 79305])
            ("term-within-quotes" function (:arguments ("beg" "end")) nil [79308 79628])
            ("term-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [79630 79893])
            ("term-args" function (:arguments ("string" "begin" "end")) nil [79895 80664])
            ("term-delim-arg" function (:arguments ("arg")) nil [80802 81340])
            ("term-arguments" function (:arguments ("string" "nth" "mth")) nil [81342 82834])
            ("term-send-input" function (:user-visible-flag t) nil [82885 86812])
            ("term-get-old-input-default" function nil nil [86814 87121])
            ("term-copy-old-input" function (:user-visible-flag t) nil [87123 87507])
            ("term-skip-prompt" function nil nil [87509 87815])
            ("term-after-pmark-p" function nil nil [87818 88288])
            ("term-simple-send" function (:arguments ("proc" "string")) nil [88290 88539])
            ("term-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [88541 88937])
            ("term-read-noecho" function (:arguments ("prompt" "stars")) nil [89132 91135])
            ("term-send-invisible" function
               (:user-visible-flag t
                :arguments ("str" "proc"))
                nil [91137 91770])
            ("term-watch-for-password-prompt" function (:arguments ("string")) nil [91841 92229])
            ("term-input-chunk-size" variable (:default-value 512) nil [92270 92484])
            ("term-send-string" function (:arguments ("proc" "str")) nil [92486 93147])
            ("term-send-region" function (:arguments ("proc" "start" "end")) nil [93149 93435])
            ("term-kill-output" function (:user-visible-flag t) nil [93465 93771])
            ("term-show-output" function (:user-visible-flag t) nil [93773 94083])
            ("term-interrupt-subjob" function (:user-visible-flag t) nil [94085 94203])
            ("term-kill-subjob" function (:user-visible-flag t) nil [94205 94323])
            ("term-quit-subjob" function (:user-visible-flag t) nil [94325 94443])
            ("term-stop-subjob" function (:user-visible-flag t) nil [94445 94815])
            ("term-continue-subjob" function (:user-visible-flag t) nil [94817 95013])
            ("term-kill-input" function (:user-visible-flag t) nil [95015 95292])
            ("term-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [95294 95496])
            ("term-send-eof" function (:user-visible-flag t) nil [95498 95608])
            ("term-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [95610 96239])
            ("term-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [96241 96641])
            ("term-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [96644 96899])
            ("term-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [96901 97060])
            ("term-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [100246 100529])
            ("term-check-source" function (:arguments ("fname")) nil [100971 101245])
            ("term-extract-string" function nil nil [102366 102817])
            ("term-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [102819 103569])
            ("term-proc-query" function (:arguments ("proc" "str")) nil [104851 105737])
            ("term-horizontal-column" function nil nil [105855 105941])
            ("term-vertical-motion" function (:arguments ("count")) nil [106006 106091])
            ("term-buffer-vertical-motion" function (:arguments ("count")) nil [106240 107591])
            ("term-start-line-column" function nil nil [107652 107881])
            ("term-current-column" function nil nil [107953 108061])
            ("term-move-columns" function (:arguments ("delta")) nil [108136 108595])
            ("term-insert-char" function (:arguments ("char" "count")) nil [108649 108812])
            ("term-current-row" function nil nil [108814 109034])
            ("term-adjust-current-row-cache" function (:arguments ("delta")) nil [109036 109173])
            ("term-terminal-pos" function nil nil [109175 109439])
            ("term-handle-ansi-terminal-messages" function (:arguments ("message")) nil [109535 111963])
            ("term-emulate-terminal" function (:arguments ("proc" "str")) nil [112116 127882])
            ("defvar-local" code nil nil [127884 128071])
            ("term-set-goto-process-mark" function nil nil [128073 128623])
            ("term-goto-process-mark-maybe" function nil nil [128625 129274])
            ("term-process-mark" function nil nil [129276 129419])
            ("term-handle-deferred-scroll" function nil nil [129421 129705])
            ("term-reset-terminal" function nil nil [129707 130116])
            ("term-handle-colors-array" function (:arguments ("parameter")) nil [130252 133315])
            ("term-handle-ansi-escape" function (:arguments ("proc" "char")) nil [133429 137728])
            ("term-set-scroll-region" function (:arguments ("top" "bottom")) nil [137730 138391])
            ("term-command-hook" function (:arguments ("string")) nil [139643 140381])
            ("term-display-line" function (:arguments ("true-file" "line")) nil [140613 140720])
            ("term-display-buffer-line" function (:arguments ("buffer" "line")) nil [140722 141283])
            ("term-goto-home" function nil nil [141506 141720])
            ("term-goto" function (:arguments ("row" "col")) nil [141722 142075])
            ("term-process-pager" function nil nil [142142 142723])
            ("term-pager-line" function (:arguments ("lines")) nil [142725 143041])
            ("term-pager-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [143043 143213])
            ("term-pager-bob" function nil nil [143267 143439])
            ("term-pager-eob" function nil nil [143487 143641])
            ("term-pager-back-line" function (:arguments ("lines")) nil [143643 143905])
            ("term-pager-back-page" function (:arguments ("arg")) nil [143907 144006])
            ("term-pager-discard" function nil nil [144008 144153])
            ("term-pager-disable" function nil nil [144254 144418])
            ("term-pager-enable" function nil nil [144448 144619])
            ("term-pager-toggle" function nil nil [144621 144734])
            ("term-pager-help" function (:user-visible-flag t) nil [144736 145927])
            ("term-pager-continue" function (:arguments ("new-count")) nil [145929 146365])
            ("term-handle-scroll" function (:arguments ("down")) nil [146506 148101])
            ("term-down" function (:arguments ("down" "check-for-scroll")) nil [148103 149223])
            ("term-unwrap-line" function nil nil [149408 149485])
            ("term-erase-in-line" function (:arguments ("kind")) nil [149487 150742])
            ("term-erase-in-display" function (:arguments ("kind")) nil [150744 151525])
            ("term-delete-chars" function (:arguments ("count")) nil [151527 151764])
            ("term-insert-spaces" function (:arguments ("count")) nil [151943 152666])
            ("term-delete-lines" function (:arguments ("lines")) nil [152668 153559])
            ("term-insert-lines" function (:arguments ("lines")) nil [153561 154836])
            ("term-start-output-log" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [154839 155546])
            ("term-stop-output-log" function (:user-visible-flag t) nil [155548 155671])
            ("term-show-maximum-output" function (:user-visible-flag t) nil [155673 155825])
            ("term-load-hook" variable nil nil [155864 155977])
            ("run-hooks" code nil nil [155979 156006])
            ("term-completion-autolist" variable nil nil [156963 157151])
            ("term-completion-addsuffix" variable (:default-value t) nil [157153 157639])
            ("term-completion-recexact" variable nil nil [157641 157901])
            ("term-completion-fignore" variable nil nil [157903 158226])
            ("term-file-name-prefix" variable nil nil [158228 158433])
            ("term-directory" function (:arguments ("directory")) nil [158436 158665])
            ("term-word" function (:arguments ("word-chars")) nil [158668 159282])
            ("term-match-partial-filename" function nil nil [159285 159552])
            ("term-dynamic-complete" function (:user-visible-flag t) nil [159555 159970])
            ("term-dynamic-complete-filename" function (:user-visible-flag t) nil [159973 160904])
            ("term-dynamic-complete-as-filename" function nil nil [160906 163484])
            ("term-replace-by-expanded-filename" function (:user-visible-flag t) nil [163487 164135])
            ("term-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [164138 166117])
            ("term-dynamic-list-filename-completions" function (:user-visible-flag t) nil [166119 166687])
            ("term-dynamic-list-completions" function (:arguments ("completions")) nil [166690 167764])
            ("term-ansi-make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [167822 168591])
            ("term-ansi-buffer-name" variable nil nil [168593 168627])
            ("term-ansi-default-program" variable nil nil [168628 168666])
            ("term-ansi-buffer-base-name" variable nil nil [168667 168706])
            ("ansi-term" function
               (:user-visible-flag t
                :arguments ("program" "new-buffer-name"))
                nil [168723 170438])
            ("serial-port-is-file-p" function nil nil [170542 170873])
            ("serial-name-history" variable (:default-value (if (serial-port-is-file-p) (or (when (file-exists-p "/dev/ttys0") (list "/dev/ttys0")) (when (file-exists-p "/dev/ttyS0") (list "/dev/ttyS0"))) (list "COM1"))) nil [170875 171141])
            ("serial-speed-history" variable (:default-value (list "9600" "1200" "2400" "4800" "9600" "14400" "19200" "28800" "38400" "57600" "115200")) nil [171143 171454])
            ("serial-nice-speed-history" function nil nil [171456 171845])
            ("serial-no-speed" variable
               (:constant-flag t
                :default-value "nil")
                nil [171847 172114])
            ("serial-supported-or-barf" function nil nil [172116 172316])
            ("serial-read-name" function nil nil [172318 174408])
            ("serial-read-speed" function nil nil [174410 175383])
            ("serial-term" function
               (:user-visible-flag t
                :arguments ("port" "speed"))
                nil [175400 176568])
            ("serial-mode-line-speed-menu" variable nil nil [176570 176610])
            ("serial-mode-line-config-menu" variable nil nil [176611 176652])
            ("serial-speed" function nil nil [176654 176870])
            ("serial-mode-line-speed-menu-1" function (:arguments ("event")) nil [176872 177266])
            ("serial-mode-line-speed-menu" function (:arguments ("event")) nil [177268 177362])
            ("serial-update-speed-menu" function nil nil [177364 178361])
            ("serial-mode-line-config-menu-1" function (:arguments ("event")) nil [178363 178803])
            ("serial-mode-line-config-menu" function (:arguments ("event")) nil [178805 178901])
            ("serial-update-config-menu" function nil nil [178903 180247])
            ("term" package nil nil [183798 183813]))          
      :file "term.el"
      :pointmax 183837
      :fsize 183836
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 13182 . 13183) (symbol 13147 . 13164) (open-paren 13146 . 13147) (close-paren 13144 . 13145) (symbol 13107 . 13124) (open-paren 13106 . 13107)))
    (semanticdb-table "semanticdb-table"
      :file "ehelp.el"
      :fsize 16920
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :file "comint.el"
      :fsize 163976
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4149 4166])
            ("tar" customgroup (:user-visible-flag t) nil [4169 4252])
            ("tar-anal-blocksize" variable (:default-value 20) nil [4254 4861])
            ("tar-update-datestamp" variable nil nil [4863 5410])
            ("tar-mode-show-date" variable nil nil [5412 5623])
            ("tar-parse-info" variable nil nil [5625 5652])
            ("tar-superior-buffer" variable nil nil [5653 5758])
            ("tar-superior-descriptor" variable nil nil [5759 5854])
            ("tar-file-name-coding-system" variable nil nil [5855 5895])
            ("put" code nil nil [5897 5942])
            ("put" code nil nil [5943 5992])
            ("tar-data-buffer" variable nil nil [6909 6983])
            ("make-variable-buffer-local" code nil nil [6984 7029])
            ("tar-data-swapped" variable nil nil [7031 7122])
            ("make-variable-buffer-local" code nil nil [7123 7169])
            ("tar-data-swapped-p" function nil nil [7171 7694])
            ("tar-swap-data" function nil nil [7696 8233])
            ("cl-defstruct" code nil nil [8259 8803])
            ("tar-name-offset" variable (:constant-flag t) nil [8805 8833])
            ("tar-mode-offset" variable
               (:constant-flag t
                :default-value (+ tar-name-offset 100))
                nil [8834 8884])
            ("tar-uid-offset" variable
               (:constant-flag t
                :default-value (+ tar-mode-offset 8))
                nil [8885 8933])
            ("tar-gid-offset" variable
               (:constant-flag t
                :default-value (+ tar-uid-offset 8))
                nil [8934 8981])
            ("tar-size-offset" variable
               (:constant-flag t
                :default-value (+ tar-gid-offset 8))
                nil [8982 9029])
            ("tar-time-offset" variable
               (:constant-flag t
                :default-value (+ tar-size-offset 12))
                nil [9030 9079])
            ("tar-chk-offset" variable
               (:constant-flag t
                :default-value (+ tar-time-offset 12))
                nil [9080 9129])
            ("tar-linkp-offset" variable
               (:constant-flag t
                :default-value (+ tar-chk-offset 8))
                nil [9130 9178])
            ("tar-link-offset" variable
               (:constant-flag t
                :default-value (+ tar-linkp-offset 1))
                nil [9179 9228])
            ("tar-magic-offset" variable
               (:constant-flag t
                :default-value (+ tar-link-offset 100))
                nil [9257 9308])
            ("tar-uname-offset" variable
               (:constant-flag t
                :default-value (+ tar-magic-offset 8))
                nil [9309 9359])
            ("tar-gname-offset" variable
               (:constant-flag t
                :default-value (+ tar-uname-offset 32))
                nil [9360 9411])
            ("tar-dmaj-offset" variable
               (:constant-flag t
                :default-value (+ tar-gname-offset 32))
                nil [9412 9462])
            ("tar-dmin-offset" variable
               (:constant-flag t
                :default-value (+ tar-dmaj-offset 8))
                nil [9463 9511])
            ("tar-prefix-offset" variable
               (:constant-flag t
                :default-value (+ tar-dmin-offset 8))
                nil [9512 9562])
            ("tar-end-offset" variable
               (:constant-flag t
                :default-value (+ tar-prefix-offset 155))
                nil [9563 9614])
            ("tar-roundup-512" function (:arguments ("s")) nil [9616 9716])
            ("tar-header-block-tokenize" function (:arguments ("pos" "coding")) nil [9718 14725])
            ("tar-header-data-end" function (:arguments ("descriptor")) nil [14744 15118])
            ("tar-parse-octal-integer" function (:arguments ("string" "start" "end")) nil [15120 15466])
            ("tar-parse-octal-long-integer" function (:arguments ("string" "start" "end")) nil [15468 15911])
            ("tar-parse-octal-integer-safe" function (:arguments ("string")) nil [15913 16154])
            ("tar-new-regular-file-header" function (:arguments ("filename" "size" "time")) nil [16156 16736])
            ("tar--pad-to" function (:arguments ("pos")) nil [16738 16813])
            ("tar--put-at" function (:arguments ("pos" "val" "fmt" "mask")) nil [16815 16979])
            ("tar-header-serialize" function (:arguments ("header" "update-checksum")) nil [16981 19004])
            ("tar-header-block-checksum" function (:arguments ("string")) nil [19007 19609])
            ("tar-header-block-check-checksum" function (:arguments ("hblock" "desired-checksum" "file-name")) nil [19611 19888])
            ("tar-clip-time-string" function (:arguments ("time")) nil [19890 20038])
            ("tar-grind-file-mode" function (:arguments ("mode")) nil [20040 20793])
            ("tar-header-block-summarize" function (:arguments ("tar-hblock" "mod-p")) nil [20795 22365])
            ("tar-untar-buffer" function (:user-visible-flag t) nil [22367 23744])
            ("tar-summarize-buffer" function nil nil [23746 25577])
            ("tar-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map " " (quote tar-next-line)) (define-key map "C" (quote tar-copy)) (define-key map "d" (quote tar-flag-deleted)) (define-key map "" (quote tar-flag-deleted)) (define-key map "e" (quote tar-extract)) (define-key map "f" (quote tar-extract)) (define-key map "" (quote tar-extract)) (define-key map [mouse-2] (quote tar-mouse-extract)) (define-key map "g" (quote revert-buffer)) (define-key map "n" (quote tar-next-line)) (define-key map "" (quote tar-next-line)) (define-key map [down] (quote tar-next-line)) (define-key map "o" (quote tar-extract-other-window)) (define-key map "p" (quote tar-previous-line)) (define-key map "" (quote tar-previous-line)) (define-key map [up] (quote tar-previous-line)) (define-key map "I" (quote tar-new-entry)) (define-key map "R" (quote tar-rename-entry)) (define-key map "u" (quote tar-unflag)) (define-key map "v" (quote tar-view)) (define-key map "w" (quote woman-tar-extract-file)) (define-key map "x" (quote tar-expunge)) (define-key map "" (quote tar-unflag-backwards)) (define-key map "E" (quote tar-extract-other-window)) (define-key map "M" (quote tar-chmod-entry)) (define-key map "G" (quote tar-chgrp-entry)) (define-key map "O" (quote tar-chown-entry)) (define-key map [follow-link] (quote mouse-face)) (define-key map [menu-bar edit] (quote undefined)) (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate woman] (quote ("Read Man Page (WoMan)" . woman-tar-extract-file))) (define-key map [menu-bar immediate view] (quote ("View This File" . tar-view))) (define-key map [menu-bar immediate display] (quote ("Display in Other Window" . tar-display-other-window))) (define-key map [menu-bar immediate find-file-other-window] (quote ("Find in Other Window" . tar-extract-other-window))) (define-key map [menu-bar immediate find-file] (quote ("Find This File" . tar-extract))) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark unmark-all] (quote ("Unmark All" . tar-clear-modification-flags))) (define-key map [menu-bar mark deletion] (quote ("Flag" . tar-flag-deleted))) (define-key map [menu-bar mark unmark] (quote ("Unflag" . tar-unflag))) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate chown] (quote ("Change Owner..." . tar-chown-entry))) (define-key map [menu-bar operate chgrp] (quote ("Change Group..." . tar-chgrp-entry))) (define-key map [menu-bar operate chmod] (quote ("Change Mode..." . tar-chmod-entry))) (define-key map [menu-bar operate rename] (quote ("Rename to..." . tar-rename-entry))) (define-key map [menu-bar operate copy] (quote ("Copy to..." . tar-copy))) (define-key map [menu-bar operate expunge] (quote ("Expunge Marked Files" . tar-expunge))) map)) nil [25580 28672])
            ("put" code nil nil [28735 28771])
            ("put" code nil nil [28772 28816])
            ("tar-change-major-mode-hook" function nil nil [28818 29059])
            ("tar-mode-kill-buffer-hook" function nil nil [29061 29166])
            ("define-derived-mode" code nil nil [29183 31954])
            ("woman-tar-extract-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [31956 32062])
            ("define-minor-mode" code nil nil [32064 32980])
            ("tar-mode-revert" function (:arguments ("no-auto-save" "no-confirm")) nil [33042 33566])
            ("tar-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33569 33790])
            ("tar-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33792 33943])
            ("tar-current-position" function nil nil [33945 34090])
            ("tar-current-descriptor" function (:arguments ("noerror")) nil [34092 34400])
            ("tar--describe-as-link" function (:arguments ("descriptor")) nil [34402 34961])
            ("tar--check-descriptor" function (:arguments ("descriptor")) nil [34963 35137])
            ("tar-get-descriptor" function nil nil [35139 35370])
            ("tar-get-file-descriptor" function (:arguments ("file")) nil [35372 35603])
            ("tar-mouse-extract" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [35605 36047])
            ("tar-file-name-handler" function (:arguments ("op" "args")) nil [36049 36224])
            ("tar--extract" function (:arguments ("descriptor")) nil [36226 38328])
            ("tar-extract" function
               (:user-visible-flag t
                :arguments ("other-window-p"))
                nil [38330 40593])
            ("tar-extract-other-window" function (:user-visible-flag t) nil [40596 40733])
            ("tar-display-other-window" function (:user-visible-flag t) nil [40735 40882])
            ("tar-view" function (:user-visible-flag t) nil [40884 40996])
            ("tar-read-file-name" function (:arguments ("prompt")) nil [40999 41629])
            ("tar-copy" function
               (:user-visible-flag t
                :arguments ("to-file"))
                nil [41632 42916])
            ("tar-new-entry" function
               (:user-visible-flag t
                :arguments ("filename" "index"))
                nil [42918 44025])
            ("tar-flag-deleted" function
               (:user-visible-flag t
                :arguments ("p" "unflag"))
                nil [44027 44465])
            ("tar-unflag" function
               (:user-visible-flag t
                :arguments ("p"))
                nil [44467 44661])
            ("tar-unflag-backwards" function
               (:user-visible-flag t
                :arguments ("p"))
                nil [44663 44872])
            ("tar-expunge-internal" function nil nil [44875 45508])
            ("tar-expunge" function
               (:user-visible-flag t
                :arguments ("noconfirm"))
                nil [45511 46227])
            ("tar-clear-modification-flags" function (:user-visible-flag t) nil [46230 46515])
            ("tar-chown-entry" function
               (:user-visible-flag t
                :arguments ("new-uid"))
                nil [46518 47736])
            ("tar-chgrp-entry" function
               (:user-visible-flag t
                :arguments ("new-gid"))
                nil [47739 48959])
            ("tar-rename-entry" function
               (:user-visible-flag t
                :arguments ("new-name"))
                nil [48961 50432])
            ("tar-chmod-entry" function
               (:user-visible-flag t
                :arguments ("new-mode"))
                nil [50435 50907])
            ("tar-alter-one-field" function (:arguments ("data-position" "new-data-string" "descriptor")) nil [50910 52450])
            ("tar-octal-time" function (:arguments ("timeval")) nil [52453 52784])
            ("tar-subfile-save-buffer" function (:user-visible-flag t) nil [52786 55907])
            ("tar-pad-to-blocksize" function nil nil [55982 56965])
            ("tar-write-region-annotate" function (:arguments ("start" "_end")) nil [57045 57399])
            ("tar-mode" package nil nil [57401 57420]))          
      :file "tar-mode.el"
      :pointmax 57448
      :fsize 57447
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 4166 . 4167) (symbol 4131 . 4148) (open-paren 4130 . 4131)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [4647 4666])
            ("tree-widget" customgroup (:user-visible-flag t) nil [4690 4807])
            ("tree-widget-image-enable" variable (:default-value (if (fboundp (quote display-images-p)) (display-images-p))) nil [4809 5036])
            ("tree-widget-themes-load-path" variable (:default-value (quote (load-path (let ((dir (if (fboundp (quote locate-data-directory)) (locate-data-directory "tree-widget") data-directory))) (and dir (list dir (expand-file-name "images" dir))))))) nil [5038 5791])
            ("tree-widget-themes-directory" variable (:default-value "tree-widget") nil [5793 6355])
            ("tree-widget-theme" variable nil nil [6357 7490])
            ("tree-widget-image-properties-emacs" variable (:default-value (quote (:ascent center :mask (heuristic t)))) nil [7492 7655])
            ("tree-widget-image-properties-xemacs" variable nil nil [7657 7788])
            ("tree-widget-space-width" variable (:default-value 0.5) nil [7790 8090])
            ("cond" code nil nil [8170 9795])
            ("tree-widget--theme" variable nil nil [9838 9869])
            ("tree-widget-theme-name" function nil nil [9871 10033])
            ("tree-widget-set-parent-theme" function (:arguments ("name")) nil [10035 10703])
            ("tree-widget-set-theme" function (:arguments ("name")) nil [10705 11706])
            ("tree-widget--locate-sub-directory" function (:arguments ("name" "path" "found")) nil [11708 12430])
            ("tree-widget-themes-path" function nil nil [12432 14035])
            ("tree-widget--cursors" variable
               (:constant-flag t
                :default-value (quote (("guide" . arrow) ("no-guide" . arrow) ("end-guide" . arrow) ("handle" . arrow) ("no-handle" . arrow))))
                nil [14037 14378])
            ("tree-widget-set-image-properties" function (:arguments ("props")) nil [14380 14632])
            ("tree-widget-image-properties" function (:arguments ("name")) nil [14634 15215])
            ("tree-widget-lookup-image" function (:arguments ("name")) nil [15217 16084])
            ("tree-widget-find-image" function (:arguments ("name")) nil [16086 16799])
            ("tree-widget-button-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [16817 17129])
            ("tree-widget-button-keymap" variable (:default-value (let ((km (make-sparse-keymap))) (if (boundp (quote widget-button-keymap)) (progn (set-keymap-parent km widget-button-keymap) (define-key km [button1] (quote tree-widget-button-click))) (set-keymap-parent km widget-keymap) (define-key km [down-mouse-1] (quote tree-widget-button-click))) km)) nil [17131 17596])
            ("define-widget" code nil nil [17598 17964])
            ("define-widget" code nil nil [17966 18109])
            ("define-widget" code nil nil [18111 18270])
            ("define-widget" code nil nil [18272 18417])
            ("define-widget" code nil nil [18419 18578])
            ("define-widget" code nil nil [18580 18732])
            ("define-widget" code nil nil [18734 18906])
            ("define-widget" code nil nil [18908 19076])
            ("define-widget" code nil nil [19078 19276])
            ("define-widget" code nil nil [19278 19434])
            ("define-widget" code nil nil [19436 20180])
            ("tree-widget-p" function (:arguments ("widget")) nil [20215 20465])
            ("tree-widget-node" function (:arguments ("widget")) nil [20467 21168])
            ("tree-widget-keep" function (:arguments ("arg" "widget")) nil [21170 21362])
            ("tree-widget-children-value-save" function (:arguments ("widget" "args" "node")) nil [21364 23070])
            ("tree-widget-before-create-icon-functions" variable nil nil [23096 23681])
            ("tree-widget-icon-create" function (:arguments ("icon")) nil [23683 24311])
            ("tree-widget-convert-widget" function (:arguments ("widget")) nil [24313 24612])
            ("widget-glyph-enable" variable nil nil [24614 24642])
            ("tree-widget-value-create" function (:arguments ("tree")) nil [24653 29680])
            ("tree-widget-leaf-node-icon-p" function (:arguments ("icon")) nil [29707 29905])
            ("tree-widget-icon-action" function (:arguments ("icon" "event")) nil [29907 30312])
            ("tree-widget-icon-help-echo" function (:arguments ("icon")) nil [30314 30775])
            ("tree-widget-after-toggle-functions" variable nil nil [30777 31074])
            ("tree-widget-action" function (:arguments ("tree" "_event")) nil [31076 31595])
            ("tree-widget-help-echo" function (:arguments ("tree")) nil [31597 31761])
            ("tree-widget-expander-p" function (:arguments ("tree")) nil [31763 31935])
            ("tree-widget" package nil nil [31937 31959]))          
      :file "tree-widget.el"
      :pointmax 31990
      :fsize 31989
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax '((close-paren 9798 . 9799) (symbol 8115 . 8131) (open-paren 8114 . 8115)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [2149 2165])
            ("cl-lib" include nil nil [2166 2183])
            ("thumbs" customgroup (:user-visible-flag t) nil [2222 2308])
            ("thumbs-thumbsdir" variable (:default-value (locate-user-emacs-file "thumbs")) nil [2310 2443])
            ("thumbs-geometry" variable (:default-value "100x100") nil [2445 2539])
            ("thumbs-per-line" variable (:default-value 4) nil [2541 2660])
            ("thumbs-max-image-number" variable (:default-value 16) nil [2662 2800])
            ("thumbs-thumbsdir-max-size" variable (:default-value 50000000) nil [2802 2982])
            ("thumbs-conversion-program" variable (:default-value (if (eq system-type (quote windows-nt)) "convert.exe" (or (executable-find "convert") "/usr/X11R6/bin/convert"))) nil [3226 3497])
            ("thumbs-setroot-command" variable (:default-value "xloadimage -onroot -fullscreen *") nil [3499 3639])
            ("thumbs-relief" variable (:default-value 5) nil [3641 3752])
            ("thumbs-margin" variable (:default-value 2) nil [3754 3891])
            ("thumbs-thumbsdir-auto-clean" variable (:default-value t) nil [3893 4125])
            ("thumbs-image-resizing-step" variable (:default-value 10) nil [4127 4253])
            ("thumbs-temp-dir" variable (:default-value temporary-file-directory) nil [4255 4487])
            ("thumbs-temp-prefix" variable (:default-value "emacsthumbs") nil [4489 4599])
            ("thumbs-current-tmp-filename" variable nil nil [4645 4726])
            ("make-variable-buffer-local" code nil nil [4727 4784])
            ("thumbs-current-image-filename" variable nil nil [4786 4859])
            ("make-variable-buffer-local" code nil nil [4860 4919])
            ("thumbs-extra-images" variable (:default-value 1) nil [4921 5006])
            ("make-variable-buffer-local" code nil nil [5007 5056])
            ("put" code nil nil [5057 5102])
            ("thumbs-current-image-size" variable nil nil [5104 5169])
            ("thumbs-image-num" variable nil nil [5171 5229])
            ("make-variable-buffer-local" code nil nil [5230 5276])
            ("thumbs-buffer" variable nil nil [5278 5368])
            ("make-variable-buffer-local" code nil nil [5369 5412])
            ("thumbs-current-dir" variable nil nil [5414 5468])
            ("thumbs-marked-list" variable nil nil [5470 5527])
            ("make-variable-buffer-local" code nil nil [5528 5576])
            ("put" code nil nil [5577 5621])
            ("thumbs-temp-dir" function nil nil [5623 5714])
            ("thumbs-temp-file" function nil nil [5716 5904])
            ("thumbs-thumbsdir" function nil nil [5906 6335])
            ("thumbs-cleanup-thumbsdir" function nil nil [6337 7173])
            ("when" code nil nil [7240 7303])
            ("thumbs-call-convert" function (:arguments ("filein" "fileout" "action" "arg" "output-format" "action-prefix")) nil [7305 7944])
            ("thumbs-new-image-size" function (:arguments ("s" "increment")) nil [7946 8191])
            ("thumbs-resize-image-1" function (:arguments ("increment" "size")) nil [8193 8857])
            ("thumbs-resize-image" function
               (:user-visible-flag t
                :arguments ("width" "height"))
                nil [8859 9051])
            ("thumbs-shrink-image" function (:user-visible-flag t) nil [9053 9156])
            ("thumbs-enlarge-image" function (:user-visible-flag t) nil [9158 9260])
            ("thumbs-thumbname" function (:arguments ("img")) nil [9262 9653])
            ("thumbs-make-thumb" function (:arguments ("img")) nil [9655 10125])
            ("thumbs-image-type" function (:arguments ("img")) nil [10127 10541])
            ("declare-function" code nil nil [10543 10612])
            ("thumbs-file-size" function (:arguments ("img")) nil [10614 10830])
            ("thumbs-find-thumb" function
               (:user-visible-flag t
                :arguments ("img"))
                nil [10847 10971])
            ("thumbs-insert-image" function (:arguments ("img" "type" "relief" "marked")) nil [10973 11475])
            ("thumbs-insert-thumb" function (:arguments ("img" "marked")) nil [11477 11851])
            ("thumbs-do-thumbs-insertion" function (:arguments ("list")) nil [11853 12328])
            ("thumbs-show-thumbs-list" function (:arguments ("list" "dir" "same-window")) nil [12330 12953])
            ("thumbs-show-from-dir" function
               (:user-visible-flag t
                :arguments ("dir" "reg" "same-window"))
                nil [12970 13319])
            ("thumbs-dired-show-marked" function (:user-visible-flag t) nil [13336 13500])
            ("thumbs-dired-show" function (:user-visible-flag t) nil [13517 13682])
            ("defalias" code nil nil [13699 13739])
            ("thumbs-find-image" function (:arguments ("img" "num" "otherwin")) nil [13741 14376])
            ("thumbs-find-image-at-point" function
               (:user-visible-flag t
                :arguments ("img" "otherwin"))
                nil [14378 14626])
            ("thumbs-find-image-at-point-other-window" function (:user-visible-flag t) nil [14628 14816])
            ("thumbs-mouse-find-image" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [14818 14988])
            ("thumbs-call-setroot-command" function (:arguments ("img")) nil [14990 15290])
            ("thumbs-set-image-at-point-to-root-window" function (:user-visible-flag t) nil [15292 15470])
            ("thumbs-set-root" function (:user-visible-flag t) nil [15472 15654])
            ("thumbs-file-alist" function nil nil [15656 16049])
            ("thumbs-file-list" function nil nil [16051 16342])
            ("thumbs-delete-images" function (:user-visible-flag t) nil [16344 17083])
            ("thumbs-rename-images" function
               (:user-visible-flag t
                :arguments ("newfile"))
                nil [17085 18115])
            ("thumbs-kill-buffer" function (:user-visible-flag t) nil [18117 18227])
            ("thumbs-show-image-num" function (:arguments ("num")) nil [18229 18779])
            ("thumbs-previous-image" function (:user-visible-flag t) nil [18781 19004])
            ("thumbs-next-image" function (:user-visible-flag t) nil [19006 19215])
            ("thumbs-display-thumbs-buffer" function (:user-visible-flag t) nil [19217 19347])
            ("thumbs-redraw-buffer" function nil nil [19349 19567])
            ("thumbs-mark" function (:user-visible-flag t) nil [19569 19877])
            ("thumbs-unmark" function (:user-visible-flag t) nil [19879 20221])
            ("mapc" code nil nil [20253 20335])
            ("thumbs-modify-image" function
               (:user-visible-flag t
                :arguments ("action" "arg"))
                nil [20369 20885])
            ("thumbs-emboss-image" function
               (:user-visible-flag t
                :arguments ("emboss"))
                nil [20887 21175])
            ("thumbs-monochrome-image" function (:user-visible-flag t) nil [21177 21298])
            ("thumbs-negate-image" function (:user-visible-flag t) nil [21300 21401])
            ("thumbs-rotate-left" function (:user-visible-flag t) nil [21403 21538])
            ("thumbs-rotate-right" function (:user-visible-flag t) nil [21540 21667])
            ("thumbs-current-image" function nil nil [21669 21801])
            ("thumbs-forward-char" function (:user-visible-flag t) nil [21803 21992])
            ("thumbs-backward-char" function (:user-visible-flag t) nil [21994 22191])
            ("thumbs-backward-line" function (:user-visible-flag t) nil [22193 22303])
            ("thumbs-forward-line" function (:user-visible-flag t) nil [22305 22415])
            ("thumbs-show-more-images" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22417 22652])
            ("thumbs-show-name" function (:user-visible-flag t) nil [22654 22828])
            ("thumbs-save-current-image" function (:user-visible-flag t) nil [22830 23104])
            ("thumbs-dired" function (:user-visible-flag t) nil [23106 23223])
            ("thumbs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [return] (quote thumbs-find-image-at-point)) (define-key map [mouse-2] (quote thumbs-mouse-find-image)) (define-key map [(meta return)] (quote thumbs-find-image-at-point-other-window)) (define-key map [(control return)] (quote thumbs-set-image-at-point-to-root-window)) (define-key map [delete] (quote thumbs-delete-images)) (define-key map [right] (quote thumbs-forward-char)) (define-key map [left] (quote thumbs-backward-char)) (define-key map [up] (quote thumbs-backward-line)) (define-key map [down] (quote thumbs-forward-line)) (define-key map "+" (quote thumbs-show-more-images)) (define-key map "d" (quote thumbs-dired)) (define-key map "m" (quote thumbs-mark)) (define-key map "u" (quote thumbs-unmark)) (define-key map "R" (quote thumbs-rename-images)) (define-key map "x" (quote thumbs-delete-images)) (define-key map "s" (quote thumbs-show-name)) (define-key map "q" (quote thumbs-kill-buffer)) map)) nil [23241 24212])
            ("put" code nil nil [24214 24253])
            ("define-derived-mode" code nil nil [24254 24385])
            ("thumbs-view-image-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [prior] (quote thumbs-previous-image)) (define-key map [next] (quote thumbs-next-image)) (define-key map "^" (quote thumbs-display-thumbs-buffer)) (define-key map "-" (quote thumbs-shrink-image)) (define-key map "+" (quote thumbs-enlarge-image)) (define-key map "<" (quote thumbs-rotate-left)) (define-key map ">" (quote thumbs-rotate-right)) (define-key map "e" (quote thumbs-emboss-image)) (define-key map "r" (quote thumbs-resize-image)) (define-key map "s" (quote thumbs-save-current-image)) (define-key map "q" (quote thumbs-kill-buffer)) (define-key map "w" (quote thumbs-set-root)) map)) nil [24387 25077])
            ("put" code nil nil [25105 25155])
            ("define-derived-mode" code nil nil [25156 25265])
            ("thumbs-dired-setroot" function (:user-visible-flag t) nil [25282 25444])
            ("define-key" code nil nil [25473 25527])
            ("define-key" code nil nil [25528 25589])
            ("define-key" code nil nil [25590 25647])
            ("thumbs" package nil nil [25649 25666]))          
      :file "thumbs.el"
      :pointmax 25692
      :fsize 25691
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [902 1354])
            ("term-file-aliases" variable (:default-value (quote (("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))) nil [1356 1940])
            ("declare-function" code nil nil [1942 2014])
            ("help-xref-stack-item" variable nil nil [2016 2045])
            ("face-name-history" variable nil nil [2047 2228])
            ("font-selection" customgroup (:user-visible-flag t) nil [2399 2481])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [2484 3266])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [3440 5433])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [5479 6543])
            ("face-list" function nil nil [6718 6819])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6821 7522])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7524 7786])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [7788 9039])
            ("facep" function (:arguments ("face")) nil [9219 9368])
            ("check-face" function (:arguments ("face")) nil [9371 9525])
            ("face-id" function (:arguments ("face" "_frame")) nil [9706 10048])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [10050 10467])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [10470 11183])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [11186 11530])
            ("face-list-p" function (:arguments ("face-or-list")) nil [11533 11962])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [12160 14052])
            ("declare-function" code nil nil [14055 14150])
            ("declare-function" code nil nil [14152 14266])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [14268 14977])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [14980 15343])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [15346 15942])
            ("face-name" function (:arguments ("face")) nil [16126 16218])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [16221 16687])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [16689 18503])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [18505 19093])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [19096 19377])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [19379 20435])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [20437 21493])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [21495 22515])
            ("defalias" code nil nil [22518 22566])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [22569 23022])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [23025 23459])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [23462 23981])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [23984 24488])
            ("face-documentation" function (:arguments ("face")) nil [24664 25086])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [25089 25277])
            ("defalias" code nil nil [25280 25327])
            ("defalias" code nil nil [25328 25383])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [25564 33275])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33277 33728])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33731 34131])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34134 34591])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34594 34999])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [35002 35499])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35502 35928])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36134 36603])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36606 37075])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [37078 37683])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37686 38455])
            ("define-obsolete-function-alias" code nil nil [38457 38570])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38573 39146])
            ("define-obsolete-function-alias" code nil nil [39148 39269])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [39271 39687])
            ("define-obsolete-function-alias" code nil nil [39689 39760])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [39763 40199])
            ("define-obsolete-function-alias" code nil nil [40201 40276])
            ("defalias" code nil nil [40279 40335])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [40338 41138])
            ("crm-separator" variable nil nil [41324 41346])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [41362 44220])
            ("x-bitmap-file-path" variable nil nil [44279 44306])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [44308 46997])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [47000 47770])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [47773 47920])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [47923 48938])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [48941 49558])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [49719 52060])
            ("declare-function" code nil nil [52062 52108])
            ("declare-function" code nil nil [52109 52200])
            ("read-face-font" function (:arguments ("face" "frame")) nil [52202 52574])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [52577 53005])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [53007 53952])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [53954 54743])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54914 55077])
            ("help-xref-stack" variable nil nil [55206 55230])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [55231 58266])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [58269 62402])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [62680 63270])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [63273 65075])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [65078 66573])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply (quote append) (mapcar (lambda (x) (list (car x) (quote unspecified))) face-attribute-name-alist)))
                nil [66753 66912])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [66914 67987])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [67989 70092])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [70094 71807])
            ("face-spec-set-2" function (:arguments ("face" "frame" "face-attrs")) nil [71809 72263])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [72265 73339])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [73341 73536])
            ("face-default-spec" function (:arguments ("face")) nil [73538 73726])
            ("face-user-default-spec" function (:arguments ("face")) nil [73728 74011])
            ("defined-colors" function (:arguments ("frame")) nil [74269 74727])
            ("defalias" code nil nil [74728 74772])
            ("defined-colors-with-face-attributes" function (:arguments ("frame")) nil [74774 75399])
            ("readable-foreground-color" function (:arguments ("color")) nil [75401 75828])
            ("declare-function" code nil nil [75830 75900])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [75902 76569])
            ("defalias" code nil nil [76570 76616])
            ("declare-function" code nil nil [76618 76685])
            ("color-values" function (:arguments ("color" "frame")) nil [76687 77606])
            ("defalias" code nil nil [77608 77648])
            ("declare-function" code nil nil [77650 77717])
            ("display-color-p" function (:arguments ("display")) nil [77719 78121])
            ("defalias" code nil nil [78122 78168])
            ("declare-function" code nil nil [78170 78240])
            ("display-grayscale-p" function (:arguments ("display")) nil [78242 78675])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [78677 81542])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [81544 82550])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [82552 84085])
            ("foreground-color-at-point" function nil nil [84087 84245])
            ("background-color-at-point" function nil nil [84247 84405])
            ("declare-function" code nil nil [84576 84621])
            ("declare-function" code nil nil [84622 84715])
            ("declare-function" code nil nil [84716 84810])
            ("declare-function" code nil nil [84811 84865])
            ("x-display-name" variable nil nil [84866 84889])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [84891 85786])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [85789 86795])
            ("declare-function" code nil nil [86797 86847])
            ("declare-function" code nil nil [86848 86914])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [86916 88117])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [88119 89516])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [89518 90194])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [90197 90956])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [90958 91523])
            ("tty-setup-hook" variable nil nil [91525 91757])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [91759 93332])
            ("tty-set-up-initial-frame-faces" function nil nil [93438 93595])
            ("basic-faces" customgroup (:user-visible-flag t) nil [93766 93841])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [93843 93975])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [93977 94056])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [94058 94423])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [94425 94532])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [94534 94724])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [94726 94830])
            ("fixed-pitch-serif" variable
               (:default-value (quote ((t :family "Monospace Serif")))
                :type "face")
                nil [94832 94960])
            ("variable-pitch" variable
               (:default-value (quote ((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif")))
                :type "face")
                nil [94962 95442])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [95444 95882])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [95884 96351])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [96353 96603])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [96605 97147])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [97309 98235])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [98237 98785])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [98787 99064])
            ("line-number" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [99102 99513])
            ("line-number-current-line" variable
               (:default-value (quote ((t :inherit line-number)))
                :type "face")
                nil [99515 100064])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100066 100496])
            ("homoglyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100498 100706])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [100708 100968])
            ("nobreak-hyphen" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [100970 101189])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [101191 101308])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [101310 101606])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [101608 102146])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [102148 102422])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102424 102667])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [102669 102852])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [102854 104190])
            ("header-line-highlight" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [104192 104334])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [104336 104501])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [104503 104971])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [104973 105390])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [105392 105805])
            ("internal-border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [105807 105944])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [105946 106441])
            ("setq" code nil nil [106443 106554])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [106556 106868])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [106870 107008])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107010 107139])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [107141 107591])
            ("put" code nil nil [107593 107625])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [107627 107753])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [107755 108045])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [108047 108291])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [108293 108415])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [108417 108691])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [108693 109223])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [109225 109459])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [109461 109880])
            ("read-multiple-choice-face" variable
               (:default-value (quote ((t (:inherit underline :weight bold))))
                :type "face")
                nil [109882 110071])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [110097 110269])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [110271 110517])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [110519 110666])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [110668 110803])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline)))
                :type "face")
                nil [110805 111271])
            ("show-paren-match-expression" variable
               (:default-value (quote ((t :inherit show-paren-match)))
                :type "face")
                nil [111273 111508])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [111510 111701])
            ("x-font-regexp" variable nil nil [112077 112103])
            ("x-font-regexp-head" variable nil nil [112104 112135])
            ("x-font-regexp-weight" variable nil nil [112136 112169])
            ("x-font-regexp-slant" variable nil nil [112170 112202])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [112204 112244])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [112245 112284])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [112285 112325])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [112326 112367])
            ("let" code nil nil [112450 113668])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [113671 114758])
            ("font-list-limit" variable (:default-value 100) nil [114760 114875])
            ("make-obsolete-variable" code nil nil [114876 114928])
            ("faces" package nil nil [114930 114946]))          
      :file "faces.el"
      :pointmax 114971
      :fsize 114970
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("define-minor-mode" code nil nil [1739 2765])
            ("toggle-tool-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2859 3207])
            ("tool-bar-map" variable (:default-value (make-sparse-keymap)) nil [3209 3333])
            ("global-set-key" code nil nil [3335 3443])
            ("declare-function" code nil nil [3445 3509])
            ("tool-bar-keymap-cache" variable
               (:constant-flag t
                :default-value (make-hash-table :weakness t :test (quote equal)))
                nil [3511 3586])
            ("tool-bar-make-keymap" function (:arguments ("_ignore")) nil [3588 3981])
            ("tool-bar-make-keymap-1" function nil nil [3983 4878])
            ("tool-bar-add-item" function (:arguments ("icon" "def" "key" "props")) nil [4895 5695])
            ("tool-bar--image-expression" function (:arguments ("icon")) nil [5697 6631])
            ("tool-bar-local-item" function (:arguments ("icon" "def" "key" "map" "props")) nil [6648 7456])
            ("tool-bar-add-item-from-menu" function (:arguments ("command" "icon" "map" "props")) nil [7473 8250])
            ("tool-bar-local-item-from-menu" function (:arguments ("command" "icon" "in-map" "from-map" "props")) nil [8267 10439])
            ("tool-bar-setup" function nil nil [10507 12272])
            ("if" code nil nil [12274 12922])
            ("tool-bar" package nil nil [12925 12944]))          
      :file "tool-bar.el"
      :pointmax 12972
      :fsize 12971
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [898 915])
            ("comint-prompt-regexp" variable nil nil [917 946])
            ("tooltip" customgroup (:user-visible-flag t) nil [948 1119])
            ("define-minor-mode" code nil nil [1153 2268])
            ("tooltip-delay" variable (:default-value 0.7) nil [2299 2426])
            ("tooltip-short-delay" variable (:default-value 0.1) nil [2428 2565])
            ("tooltip-recent-seconds" variable (:default-value 1) nil [2567 2741])
            ("tooltip-hide-delay" variable (:default-value 10) nil [2743 2867])
            ("tooltip-x-offset" variable (:default-value 5) nil [2869 3339])
            ("tooltip-y-offset" variable (:default-value 20) nil [3341 3811])
            ("tooltip-frame-parameters" variable (:default-value (quote ((name . "tooltip") (internal-border-width . 2) (border-width . 1) (no-special-glyphs . t)))) nil [3813 4346])
            ("tooltip" variable
               (:default-value (quote ((((class color)) :background "lightyellow" :foreground "black" :inherit variable-pitch) (t :inherit variable-pitch)))
                :type "face")
                nil [4348 4573])
            ("tooltip-use-echo-area" variable nil nil [4575 4830])
            ("make-obsolete-variable" code nil nil [4832 4925])
            ("define-obsolete-variable-alias" code nil nil [4971 5043])
            ("tooltip-functions" variable nil nil [5045 5333])
            ("tooltip-timeout-id" variable nil nil [5335 5425])
            ("tooltip-last-mouse-motion-event" variable nil nil [5427 5519])
            ("tooltip-hide-time" variable nil nil [5521 5594])
            ("gud-tooltip-mode" variable nil nil [5596 5621])
            ("tooltip-event-buffer" function (:arguments ("event")) nil [5664 5910])
            ("tooltip-delay" function nil nil [5947 6173])
            ("tooltip-cancel-delayed-tip" function nil nil [6175 6348])
            ("tooltip-start-delayed-tip" function nil nil [6350 6529])
            ("tooltip-timeout" function (:arguments ("_object")) nil [6531 6727])
            ("tooltip-set-param" function (:arguments ("alist" "key" "value")) nil [6752 7089])
            ("declare-function" code nil nil [7091 7178])
            ("tooltip-show" function (:arguments ("text" "use-echo-area")) nil [7180 8413])
            ("declare-function" code nil nil [8415 8456])
            ("tooltip-hide" function (:arguments ("_ignored-arg")) nil [8458 8677])
            ("tooltip-identifier-from-point" function (:arguments ("point")) nil [8713 9213])
            ("tooltip-expr-to-print" function (:arguments ("event")) nil [9215 9757])
            ("tooltip-process-prompt-regexp" function (:arguments ("process")) nil [9759 10348])
            ("tooltip-strip-prompt" function (:arguments ("process" "output")) nil [10350 10616])
            ("tooltip-help-message" variable nil nil [10639 10803])
            ("tooltip-previous-message" variable nil nil [10805 10885])
            ("tooltip-show-help-non-mode" function (:arguments ("help")) nil [10887 11934])
            ("tooltip-show-help" function (:arguments ("msg")) nil [11936 12770])
            ("tooltip-help-tips" function (:arguments ("_event")) nil [12772 13125])
            ("tooltip" package nil nil [13127 13145]))          
      :file "tooltip.el"
      :pointmax 13172
      :fsize 13171
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("time-stamp" customgroup (:user-visible-flag t) nil [1414 1538])
            ("time-stamp-format" variable (:default-value "%:y-%02m-%02d %02H:%02M:%02S %u") nil [1540 3342])
            ("time-stamp-active" variable (:default-value t) nil [3413 3646])
            ("time-stamp-warn-inactive" variable (:default-value t) nil [3648 3973])
            ("time-stamp-time-zone" variable nil nil [3975 4402])
            ("time-stamp-line-limit" variable (:default-value 8) nil [4802 5524])
            ("time-stamp-start" variable (:default-value "Time-stamp:[ 	]+\\\\?[\"<]+") nil [5600 6167])
            ("time-stamp-end" variable (:default-value "\\\\?[\">]") nil [6237 7206])
            ("time-stamp-inserts-lines" variable nil nil [7275 8077])
            ("time-stamp-count" variable (:default-value 1) nil [8156 8532])
            ("time-stamp-pattern" variable nil nil [8604 10047])
            ("time-stamp" function (:user-visible-flag t) nil [10136 13445])
            ("time-stamp-once" function (:arguments ("start" "search-limit" "ts-start" "ts-end" "ts-format" "format-lines" "end-lines")) nil [13447 15618])
            ("time-stamp-toggle-active" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15636 16032])
            ("time-stamp--format" function (:arguments ("format" "time")) nil [16034 16130])
            ("time-stamp-string" function (:arguments ("ts-format")) nil [16132 16465])
            ("time-stamp-no-file" variable
               (:constant-flag t
                :default-value "(no file)")
                nil [16468 16574])
            ("time-stamp-string-preprocess" function (:arguments ("format" "time")) nil [17397 23391])
            ("time-stamp-do-number" function (:arguments ("format-char" "alt-form" "field-width" "time")) nil [23393 24027])
            ("time-stamp-conversion-warn" variable (:default-value t) nil [24029 24498])
            ("time-stamp-conv-warn" function (:arguments ("old-form" "new-form")) nil [24501 25193])
            ("time-stamp" package nil nil [25195 25216]))          
      :file "time-stamp.el"
      :pointmax 25246
      :fsize 25245
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1052 1069])
            ("declare-function" code nil nil [1072 1134])
            ("declare-function" code nil nil [1135 1175])
            ("compilation-current-error" variable nil nil [1197 1231])
            ("compilation-context-lines" variable nil nil [1232 1266])
            ("shell-command-dont-erase-buffer" variable nil nil [1268 1938])
            ("shell-command-saved-pos" variable nil nil [1940 2294])
            ("idle-update-delay" variable (:default-value 0.5) nil [2296 2593])
            ("killing" customgroup (:user-visible-flag t) nil [2595 2669])
            ("paren-matching" customgroup (:user-visible-flag t) nil [2671 2773])
            ("next-error" customgroup (:user-visible-flag t) nil [2810 2911])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [2913 3044])
            ("next-error-highlight" variable (:default-value 0.5) nil [3046 3801])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [3803 4496])
            ("next-error-recenter" variable nil nil [4498 4860])
            ("next-error-hook" variable nil nil [4862 5003])
            ("next-error-highlight-timer" variable nil nil [5005 5044])
            ("next-error-overlay-arrow-position" variable nil nil [5046 5092])
            ("put" code nil nil [5093 5171])
            ("add-to-list" code nil nil [5172 5249])
            ("next-error-last-buffer" variable nil nil [5251 5478])
            ("next-error-function" variable nil nil [5480 5938])
            ("make-variable-buffer-local" code nil nil [5939 5988])
            ("next-error-move-function" variable nil nil [5990 6303])
            ("make-variable-buffer-local" code nil nil [6304 6358])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6360 7442])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [7444 9726])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [9728 11497])
            ("next-error-internal" function nil nil [11499 11920])
            ("defalias" code nil nil [11922 11961])
            ("defalias" code nil nil [11962 11996])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11998 12315])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12317 12585])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12587 13039])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [13041 13419])
            ("next-error-follow-last-line" variable nil nil [13490 13530])
            ("define-minor-mode" code nil nil [13532 14240])
            ("next-error-follow-mode-post-command-hook" function nil nil [14356 14689])
            ("fundamental-mode" function (:user-visible-flag t) nil [14698 14907])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [14985 15469])
            ("put" code nil nil [15471 15511])
            ("define-derived-mode" code nil nil [15512 15657])
            ("self-insert-uses-region-functions" variable nil nil [15690 16550])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [16552 16685])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [16687 19491])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [19493 19841])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19843 20620])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20622 21423])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21425 22138])
            ("defalias" code nil nil [22140 22182])
            ("delete-blank-lines" function (:user-visible-flag t) nil [22201 23628])
            ("delete-trailing-lines" variable (:default-value t) nil [23630 23916])
            ("region-modifiable-p" function (:arguments ("start" "end")) nil [23918 24140])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [24142 26114])
            ("newline-and-indent" function (:user-visible-flag t) nil [26116 26549])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [26551 27777])
            ("read-quoted-char-radix" variable (:default-value 8) nil [27779 28000])
            ("read-quoted-char" function (:arguments ("prompt")) nil [28002 30851])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30853 32882])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32884 33077])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33079 33278])
            ("back-to-indentation" function (:user-visible-flag t) nil [33280 33570])
            ("fixup-whitespace" function (:user-visible-flag t) nil [33572 33915])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [33917 34355])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [34357 34617])
            ("cycle-spacing--context" variable nil nil [34619 34874])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [34876 37325])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [37328 38251])
            ("end-of-buffer" function (:arguments ("arg")) nil [38253 39500])
            ("delete-active-region" variable (:default-value t) nil [39502 40039])
            ("region-extract-function" variable (:default-value (lambda (method) (when (region-beginning) (cond ((eq method (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq method (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) method)))))) nil [40041 41007])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [41009 41355])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [41357 42994])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [42996 44139])
            ("mark-whole-buffer" function nil nil [44141 44700])
            ("goto-line" function (:arguments ("line" "buffer")) nil [44744 47021])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [47023 47705])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [47707 48500])
            ("count-words--buffer-message" function nil nil [48502 48655])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [48657 48982])
            ("define-obsolete-function-alias" code nil nil [48984 49063])
            ("what-line" function (:user-visible-flag t) nil [49065 49416])
            ("count-lines" function (:arguments ("start" "end")) nil [49418 50255])
            ("line-number-at-pos" function (:arguments ("pos" "absolute")) nil [50257 50924])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [50926 55437])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [55502 55817])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [55819 56342])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [56344 56801])
            ("minibuffer-completing-symbol" variable nil nil [56803 56906])
            ("make-obsolete-variable" code nil nil [56907 56977])
            ("minibuffer-default" variable nil nil [56979 57172])
            ("eval-expression-print-level" variable (:default-value 4) nil [57174 57404])
            ("eval-expression-print-length" variable (:default-value 12) nil [57406 57639])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [57641 57850])
            ("eval-expression-print-maximum-character" variable (:default-value 127) nil [57852 58101])
            ("eval-expression-print-format" function (:arguments ("value")) nil [58103 58785])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [58787 58901])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [58903 59587])
            ("eval-expression-get-print-arguments" function (:arguments ("prefix-argument")) nil [59589 60206])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value" "no-truncate" "char-print-limit"))
                nil [60336 62864])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [62866 63793])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63795 65463])
            ("extended-command-history" variable nil nil [65466 65503])
            ("execute-extended-command--last-typed" variable nil nil [65504 65553])
            ("read-extended-command" function nil nil [65555 67739])
            ("suggest-key-bindings" variable (:default-value t) nil [67741 68107])
            ("extended-command-suggest-shorter" variable (:default-value t) nil [68109 68274])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [68276 68738])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [68740 69650])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [69652 73455])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [73457 76066])
            ("minibuffer-history" variable nil nil [76069 76322])
            ("minibuffer-history-sexp-flag" variable nil nil [76323 76638])
            ("setq" code nil nil [76639 76693])
            ("setq" code nil nil [76694 76732])
            ("minibuffer-history-search-history" variable nil nil [76758 76804])
            ("minibuffer-text-before-history" variable nil nil [76806 77006])
            ("add-hook" code nil nil [77008 77072])
            ("minibuffer-history-initialize" function nil nil [77074 77158])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [77160 77375])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [77377 77767])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77769 80613])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [80615 81669])
            ("minibuffer-temporary-goal-position" variable nil nil [81671 81718])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [81720 82360])
            ("minibuffer-default-add-done" variable nil nil [82362 82685])
            ("make-variable-buffer-local" code nil nil [82687 82744])
            ("minibuffer-default-add-completions" function nil nil [82746 83200])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [83202 85490])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85492 85743])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85745 86003])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86005 87733])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [87735 89917])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [89919 90575])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [90577 90862])
            ("minibuffer-prompt-width" function nil nil [90921 91210])
            ("add-hook" code nil nil [91243 91310])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [91312 91363])
            ("make-variable-buffer-local" code nil nil [91364 91436])
            ("minibuffer-history-isearch-setup" function nil nil [91438 92078])
            ("minibuffer-history-isearch-end" function nil nil [92080 92310])
            ("minibuffer-history-isearch-search" function nil nil [92312 94217])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [94219 95616])
            ("minibuffer-history-isearch-wrap" function nil nil [95618 96235])
            ("minibuffer-history-isearch-push-state" function nil nil [96237 96568])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [96570 96782])
            ("define-obsolete-function-alias" code nil nil [96860 96922])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [96924 97167])
            ("undo-in-region" variable nil nil [97169 97273])
            ("undo-no-redo" variable nil nil [97275 97350])
            ("pending-undo-list" variable nil nil [97352 97503])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97505 102126])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [102128 102409])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [102411 102673])
            ("undo-in-progress" variable nil nil [102675 102806])
            ("undo-more" function (:arguments ("n")) nil [102808 103503])
            ("primitive-undo" function (:arguments ("n" "list")) nil [103505 110139])
            ("undo-copy-list" function (:arguments ("list")) nil [110164 110262])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [110264 110373])
            ("undo-start" function (:arguments ("beg" "end")) nil [110375 110963])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [113961 116247])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [116249 117288])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [117290 117832])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [117834 118599])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [119490 119795])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [119797 120269])
            ("undo-delta" function (:arguments ("undo-elt")) nil [120440 120773])
            ("defvar-local" code nil nil [120969 121690])
            ("undo-auto-current-boundary-timer" variable nil nil [121692 121867])
            ("undo-auto--this-command-amalgamating" variable nil nil [121869 122065])
            ("undo-auto--needs-boundary-p" function nil nil [122067 122207])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [122209 122513])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [122515 123143])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [123145 123814])
            ("undo-auto--boundary-timer" function nil nil [123816 123993])
            ("undo-auto--boundary-ensure-timer" function nil nil [123995 124248])
            ("undo-auto--undoably-changed-buffers" variable nil nil [124250 124487])
            ("undo-auto--add-boundary" function nil nil [124489 124768])
            ("undo-auto-amalgamate" function nil nil [124770 126099])
            ("undo-auto--undoable-change" function nil nil [126101 126292])
            ("undo-amalgamate-change-group" function (:arguments ("handle")) nil [126323 127912])
            ("undo-ask-before-discard" variable nil nil [127915 128681])
            ("undo-extra-outer-limit" variable nil nil [128683 128959])
            ("make-variable-buffer-local" code nil nil [128960 129012])
            ("setq" code nil nil [129297 129356])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [129357 131148])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [131151 132540])
            ("shell-command-history" variable nil nil [132542 132732])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [132734 132848])
            ("shell-command-default-error-buffer" variable nil nil [132850 133165])
            ("declare-function" code nil nil [133167 133233])
            ("declare-function" code nil nil [133234 133320])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [133322 134026])
            ("declare-function" code nil nil [134028 134079])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [134081 134326])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [134328 134957])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [134959 136212])
            ("async-shell-command-display-buffer" variable (:default-value t) nil [136214 136540])
            ("shell-command--save-pos-or-erase" function nil nil [136542 137273])
            ("shell-command--set-point-after-cmd" function (:arguments ("buffer")) nil [137275 138520])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [138522 139823])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [139825 148653])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [148655 151051])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [151236 151523])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [151525 161100])
            ("shell-command-to-string" function (:arguments ("command")) nil [161102 161362])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [161364 162947])
            ("process-file-side-effects" variable (:default-value t) nil [162949 163371])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [163373 164419])
            ("tabulated-list-format" variable nil nil [164441 164471])
            ("tabulated-list-entries" variable nil nil [164472 164503])
            ("tabulated-list-sort-key" variable nil nil [164504 164536])
            ("declare-function" code nil nil [164537 164603])
            ("declare-function" code nil nil [164604 164710])
            ("process-menu-query-only" variable nil nil [164712 164748])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [164750 164880])
            ("define-derived-mode" code nil nil [164882 165374])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [165376 165681])
            ("list-processes--refresh" function nil nil [165683 167430])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [167432 167529])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [167531 168494])
            ("setq" code nil nil [168519 168558])
            ("setq" code nil nil [168559 168595])
            ("internal-echo-keystrokes-prefix" function nil nil [168597 169202])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [169204 169410])
            ("prefix-command-update" function nil nil [169412 169579])
            ("prefix-command-preserve-state-hook" variable nil nil [169581 169693])
            ("prefix-command-preserve-state" function nil nil [169695 170188])
            ("reset-this-command-lengths" function nil nil [170190 170293])
            ("add-hook" code nil nil [170389 170485])
            ("universal-argument--description" function nil nil [170486 170945])
            ("add-hook" code nil nil [170947 171034])
            ("universal-argument--preserve" function nil nil [171035 171113])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [171115 172731])
            ("universal-argument--mode" function nil nil [172733 172843])
            ("universal-argument" function (:user-visible-flag t) nil [172845 173588])
            ("universal-argument-more" function (:arguments ("arg")) nil [173590 174062])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174064 174438])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174440 175208])
            ("filter-buffer-substring-functions" variable nil nil [175212 175389])
            ("make-obsolete-variable" code nil nil [175390 175514])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [175516 175922])
            ("buffer-substring-filters" variable nil nil [175924 176405])
            ("make-obsolete-variable" code nil nil [176406 176521])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [176523 177384])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [177386 178305])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [178349 178900])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [178902 180341])
            ("kill-ring" variable nil nil [180382 180837])
            ("kill-ring-max" variable (:default-value 60) nil [180839 180974])
            ("kill-ring-yank-pointer" variable nil nil [180976 181077])
            ("save-interprogram-paste-before-kill" variable nil nil [181079 181475])
            ("kill-do-not-save-duplicates" variable nil nil [181477 181706])
            ("kill-new" function (:arguments ("string" "replace")) nil [181708 183733])
            ("kill-append-merge-undo" variable nil nil [183914 184184])
            ("kill-append" function (:arguments ("string" "before-p")) nil [184186 185050])
            ("yank-pop-change-selection" variable nil nil [185052 185400])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [185402 187060])
            ("kill-read-only-ok" variable nil nil [187111 187247])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [187249 190125])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [190319 191452])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [191454 192743])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [192745 194327])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [194329 195149])
            ("bidi-directional-controls-chars" variable (:default-value "‪-‮⁦-⁩") nil [195151 195296])
            ("bidi-directional-non-controls-chars" variable (:default-value "^‪-‮⁦-⁩") nil [195298 195448])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [195450 196556])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [196558 197659])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [197661 199587])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [199589 200892])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [200908 201733])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [201806 202269])
            ("yank-window-start" variable nil nil [202271 202301])
            ("yank-undo-function" variable nil nil [202302 202633])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [202635 204351])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [204353 207093])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207095 207285])
            ("kill-forward-chars" function (:arguments ("arg")) nil [207350 207495])
            ("kill-backward-chars" function (:arguments ("arg")) nil [207544 207690])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [207692 208167])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [208169 209521])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [209523 210140])
            ("kill-whole-line" variable nil nil [210177 210322])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [210324 212538])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [212540 214169])
            ("forward-visible-line" function (:arguments ("arg")) nil [214171 216661])
            ("end-of-visible-line" function nil nil [216663 217429])
            ("kill-current-buffer" function (:user-visible-flag t) nil [217431 217936])
            ("insert-buffer" function (:arguments ("buffer")) nil [217940 218493])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [218495 219395])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219397 219939])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [219941 220510])
            ("define-error" code nil nil [220513 220582])
            ("activate-mark-hook" variable nil nil [220584 220773])
            ("deactivate-mark-hook" variable nil nil [220775 220853])
            ("mark" function (:arguments ("force")) nil [220855 221479])
            ("deactivate-mark" function (:arguments ("force")) nil [221514 223604])
            ("activate-mark" function (:arguments ("no-tmm")) nil [223606 223997])
            ("set-mark" function (:arguments ("pos")) nil [223999 225223])
            ("save-mark-and-excursion--save" function nil nil [225225 225374])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [225376 226326])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [226328 226783])
            ("use-empty-active-region" variable nil nil [226785 227284])
            ("use-region-p" function nil nil [227286 227892])
            ("region-active-p" function nil nil [227894 228583])
            ("region-bounds" function nil nil [228585 228896])
            ("region-noncontiguous-p" function nil nil [228898 229121])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [229123 229229])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [229231 230102])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [230104 230940])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [230942 231258])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [231260 231725])
            ("add-function" code nil nil [231727 231823])
            ("defvar-local" code nil nil [231826 231925])
            ("put" code nil nil [231926 231961])
            ("mark-ring-max" variable (:default-value 16) nil [231963 232108])
            ("global-mark-ring" variable nil nil [232110 232194])
            ("global-mark-ring-max" variable (:default-value 16) nil [232196 232357])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [232359 232672])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [232674 233085])
            ("set-mark-command-repeat-pop" variable nil nil [233087 233546])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [233548 235867])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [235869 237423])
            ("pop-mark" function nil nil [237425 237844])
            ("define-obsolete-function-alias" code nil nil [237846 237935])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237936 238831])
            ("shift-select-mode" variable (:default-value t) nil [238833 239405])
            ("handle-shift-selection" function nil nil [239407 240732])
            ("define-minor-mode" code nil nil [240734 242108])
            ("widen-automatically" variable (:default-value t) nil [242110 242444])
            ("non-essential" variable nil nil [242446 242844])
            ("pop-global-mark" function (:user-visible-flag t) nil [242846 243661])
            ("next-line-add-newlines" variable nil nil [243664 243838])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [243840 246037])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [246039 247745])
            ("track-eol" variable nil nil [247747 248085])
            ("goal-column" variable nil nil [248087 248354])
            ("make-variable-buffer-local" code nil nil [248355 248396])
            ("temporary-goal-column" variable nil nil [248398 248915])
            ("line-move-ignore-invisible" variable (:default-value t) nil [248917 249568])
            ("line-move-visual" variable (:default-value t) nil [249570 250145])
            ("declare-function" code nil nil [250182 250242])
            ("default-font-height" function nil nil [250244 250878])
            ("default-font-width" function nil nil [250880 251601])
            ("default-line-height" function nil nil [251603 252065])
            ("window-screen-lines" function nil nil [252067 252637])
            ("line-move-partial" function (:arguments ("arg" "noerror" "_to-end")) nil [252684 256458])
            ("line-move" function (:arguments ("arg" "noerror" "_to-end" "try-vscroll")) nil [256782 258739])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [258887 261890])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [262044 266717])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [266719 270220])
            ("line-move-to-column" function (:arguments ("col")) nil [270222 271804])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271806 273161])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [273163 274786])
            ("put" code nil nil [274916 274950])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274952 275985])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276053 276617])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [276619 277308])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277310 278732])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [278734 279103])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [279105 279484])
            ("visual-line" customgroup (:user-visible-flag t) nil [279486 279587])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [279589 280077])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [280079 281266])
            ("visual-line--saved-state" variable nil nil [281268 281305])
            ("define-minor-mode" code nil nil [281307 283133])
            ("turn-on-visual-line-mode" function nil nil [283135 283193])
            ("define-globalized-minor-mode" code nil nil [283195 283293])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283297 283811])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283813 284257])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284259 286013])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [286015 286622])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [286773 288030])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [288032 289036])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289039 289695])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [289697 290449])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290451 290663])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290665 290856])
            ("current-word" function (:arguments ("strict" "really-word")) nil [290858 292466])
            ("fill-prefix" variable nil nil [292469 292635])
            ("make-variable-buffer-local" code nil nil [292636 292677])
            ("put" code nil nil [292678 292735])
            ("auto-fill-inhibit-regexp" variable nil nil [292737 292903])
            ("do-auto-fill" function nil nil [292905 296261])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [296263 296589])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [296591 297698])
            ("internal-auto-fill" function nil nil [297700 297954])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [297956 298112])
            ("put" code nil nil [298114 298176])
            ("put" code nil nil [298350 298402])
            ("define-minor-mode" code nil nil [298404 299310])
            ("auto-fill-function" function nil nil [299377 299484])
            ("turn-on-auto-fill" function nil nil [299486 299579])
            ("turn-off-auto-fill" function nil nil [299581 299677])
            ("custom-add-option" code nil nil [299679 299733])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299735 300573])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300576 301366])
            ("defvaralias" code nil nil [301368 301426])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301428 302208])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302210 302754])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [302756 302873])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [302874 303001])
            ("define-minor-mode" code nil nil [303003 303736])
            ("define-minor-mode" code nil nil [303738 304666])
            ("define-minor-mode" code nil nil [304668 305144])
            ("define-minor-mode" code nil nil [305146 305450])
            ("define-minor-mode" code nil nil [305452 305760])
            ("define-minor-mode" code nil nil [305762 306758])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [306761 306892])
            ("blink-matching-paren" variable (:default-value t) nil [306894 307492])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [307494 307910])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [307912 308237])
            ("blink-matching-delay" variable (:default-value 1) nil [308239 308375])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [308377 308645])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [308647 309632])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [309634 310000])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [310002 310212])
            ("blink-matching-open" function (:user-visible-flag t) nil [310214 314778])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [314780 314969])
            ("blink-paren-post-self-insert-function" function nil nil [314971 315618])
            ("put" code nil nil [315620 315678])
            ("add-hook" code nil nil [315680 316059])
            ("keyboard-quit" function (:user-visible-flag t) nil [316246 316964])
            ("buffer-quit-function" variable nil nil [316966 317216])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [317218 318044])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [318046 318441])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [318445 318962])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [318964 320508])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [320510 320835])
            ("rfc822-goto-eoh" function nil nil [320837 321253])
            ("mail-encode-mml" variable nil nil [321295 321434])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [321436 324130])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324132 324523])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [324525 324913])
            ("set-variable-value-history" variable nil nil [324917 325102])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [325104 328202])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-current-buffer)) map)) nil [328257 328893])
            ("put" code nil nil [328961 329009])
            ("completion-reference-buffer" variable nil nil [329011 329240])
            ("completion-no-auto-exit" variable nil nil [329242 329423])
            ("completion-base-position" variable nil nil [329425 329795])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [329797 330096])
            ("completion-base-size" variable nil nil [330098 330553])
            ("make-obsolete-variable" code nil nil [330554 330633])
            ("delete-completion-window" function (:user-visible-flag t) nil [330635 331009])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331011 331142])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [331144 332394])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [332396 334355])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [334439 335277])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [335279 335471])
            ("choose-completion-string-functions" variable nil nil [335473 336218])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [336220 339630])
            ("define-derived-mode" code nil nil [339632 340004])
            ("completion-list-mode-finish" function nil nil [340006 340202])
            ("add-hook" code nil nil [340204 340266])
            ("completion-show-help" variable (:default-value t) nil [340330 340481])
            ("completion-setup-function" function nil nil [340612 342594])
            ("add-hook" code nil nil [342596 342656])
            ("define-key" code nil nil [342658 342733])
            ("define-key" code nil nil [342734 342809])
            ("switch-to-completions" function (:user-visible-flag t) nil [342811 343352])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [343514 343757])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [343758 344011])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [344012 344265])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [344266 344519])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [344520 344777])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [344778 345026])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [345028 346092])
            ("define-key" code nil nil [346094 346165])
            ("define-key" code nil nil [346166 346237])
            ("define-key" code nil nil [346238 346308])
            ("define-key" code nil nil [346309 346378])
            ("define-key" code nil nil [346379 346450])
            ("define-key" code nil nil [346451 346524])
            ("mapc" code nil nil [346814 347409])
            ("clone-buffer-hook" variable nil nil [347461 347562])
            ("clone-indirect-buffer-hook" variable nil nil [347564 347683])
            ("clone-process" function (:arguments ("process" "newname")) nil [347685 349194])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [349297 352260])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [352263 353903])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [353906 354389])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [354437 355978])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [355980 357055])
            ("define-minor-mode" code nil nil [357057 360552])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [360555 360678])
            ("define-minor-mode" code nil nil [360680 361833])
            ("define-minor-mode" code nil nil [361835 362605])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [362608 362791])
            ("define-derived-mode" code nil nil [362793 362909])
            ("messages-buffer" function nil nil [362911 363198])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [364147 365573])
            ("bad-package-check" function (:arguments ("package")) nil [365575 366080])
            ("dolist" code nil nil [366082 366204])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [366857 369481])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369547 369916])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369918 370305])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370307 370708])
            ("simple" package nil nil [370713 370730]))          
      :file "simple.el"
      :pointmax 370756
      :fsize 371041
      :lastmodtime '(23727 39260 0 0)
      :unmatched-syntax '((close-paren 1069 . 1070) (symbol 1034 . 1051) (open-paren 1033 . 1034)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1044 1060])
            ("cl-lib" include nil nil [1080 1097])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1119 1435])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1437 2118])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2120 2795])
            ("scroll-bar-lines" function nil nil [2797 3325])
            ("scroll-bar-mode" variable nil nil [3393 3417])
            ("horizontal-scroll-bar-mode" variable nil nil [3418 3453])
            ("previous-scroll-bar-mode" variable nil nil [3454 3491])
            ("scroll-bar-mode-explicit" variable nil nil [3493 3658])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3660 4072])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [4074 4764])
            ("setq" code nil nil [4865 4898])
            ("get-scroll-bar-mode" function nil nil [4900 4992])
            ("define-minor-mode" code nil nil [4994 5508])
            ("horizontal-scroll-bars-available-p" function nil nil [5510 5728])
            ("define-minor-mode" code nil nil [5730 6708])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6710 7335])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7337 7803])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [7911 8441])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [8443 8698])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8700 9710])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [9767 10231])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10233 11244])
            ("scroll-bar-horizontal-drag-1" function (:arguments ("event")) nil [11301 11801])
            ("scroll-bar-horizontal-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [11803 12860])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [12862 13610])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [13612 14352])
            ("scroll-bar-toolkit-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [14381 15581])
            ("scroll-bar-toolkit-horizontal-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [15583 17168])
            ("cond" code nil nil [17239 17949])
            ("scroll-bar" package nil nil [17953 17974]))          
      :file "scroll-bar.el"
      :pointmax 18004
      :fsize 18003
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1097 . 1098) (symbol 1062 . 1079) (open-paren 1061 . 1062)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1197 1239])
            ("mouse" customgroup (:user-visible-flag t) nil [1241 1348])
            ("mouse-yank-at-point" variable nil nil [1350 1489])
            ("mouse-drag-copy-region" variable nil nil [1491 1744])
            ("mouse-1-click-follows-link" variable (:default-value 450) nil [1746 3177])
            ("mouse-1-click-in-non-selected-windows" variable (:default-value t) nil [3179 3521])
            ("mouse--down-1-maybe-follows-link" function (:arguments ("_prompt")) nil [3523 5941])
            ("define-key" code nil nil [5943 6027])
            ("define-key" code nil nil [6028 6119])
            ("minor-mode-menu-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [6175 7428])
            ("mouse-minor-mode-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [7430 7662])
            ("mouse-menu-major-mode-map" function nil nil [7664 8256])
            ("mouse-menu-non-singleton" function (:arguments ("menubar")) nil [8258 8713])
            ("mouse-menu-bar-map" function nil nil [8715 10927])
            ("mouse-major-mode-menu" function (:arguments ("event" "prefix")) nil [10929 11295])
            ("mouse-popup-menubar" function (:arguments ("event" "prefix")) nil [11297 11722])
            ("mouse-popup-menubar-stuff" function (:arguments ("event" "prefix")) nil [11724 12186])
            ("mouse-minibuffer-check" function (:arguments ("event")) nil [12227 12538])
            ("mouse-delete-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [12540 12838])
            ("mouse-select-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [12840 13264])
            ("define-obsolete-function-alias" code nil nil [13266 13345])
            ("tear-off-window" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13346 13753])
            ("mouse-delete-other-windows" function (:user-visible-flag t) nil [13755 13889])
            ("mouse-split-window-vertically" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [13891 14721])
            ("mouse-split-window-horizontally" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [14723 15546])
            ("mouse-drag-line" function (:arguments ("start-event" "line")) nil [15548 21563])
            ("mouse-drag-mode-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [21565 23006])
            ("mouse-drag-header-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [23008 23708])
            ("mouse-drag-vertical-line" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [23710 23943])
            ("mouse-resize-frame" function (:arguments ("frame" "x-diff" "y-diff" "x-move" "y-move")) nil [23946 25400])
            ("mouse-drag-frame" function (:arguments ("start-event" "part")) nil [25402 38828])
            ("mouse-drag-left-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [38830 39037])
            ("mouse-drag-top-left-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39039 39262])
            ("mouse-drag-top-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39264 39468])
            ("mouse-drag-top-right-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39470 39696])
            ("mouse-drag-right-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39698 39908])
            ("mouse-drag-bottom-right-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [39910 40145])
            ("mouse-drag-bottom-edge" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [40147 40360])
            ("mouse-drag-bottom-left-corner" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [40362 40594])
            ("mouse-select-region-move-to-beginning" variable nil nil [40596 40970])
            ("mouse-set-point" function
               (:user-visible-flag t
                :arguments ("event" "promote-to-region"))
                nil [40972 41841])
            ("mouse-last-region-beg" variable nil nil [41843 41877])
            ("mouse-last-region-end" variable nil nil [41878 41912])
            ("mouse-last-region-tick" variable nil nil [41913 41948])
            ("mouse-region-match" function nil nil [41950 42242])
            ("mouse--drag-start-event" variable nil nil [42244 42280])
            ("mouse-set-region" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [42282 44804])
            ("mouse-set-region-1" function nil nil [44806 45260])
            ("mouse-scroll-delay" variable (:default-value 0.25) nil [45262 45769])
            ("mouse-scroll-min-lines" variable (:default-value 1) nil [45771 46221])
            ("mouse-scroll-subr" function (:arguments ("window" "jump" "overlay" "start")) nil [46223 47655])
            ("mouse-selection-click-count" variable nil nil [47657 47695])
            ("mouse-selection-click-count-buffer" variable nil nil [47697 47744])
            ("mouse-drag-region" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [47746 48623])
            ("mouse-posn-property" function (:arguments ("pos" "property")) nil [48625 49668])
            ("mouse-on-link-p" function (:arguments ("pos")) nil [49670 52134])
            ("mouse-fixup-help-message" function (:arguments ("msg")) nil [52136 52925])
            ("mouse-drag-track" function (:arguments ("start-event")) nil [52927 56907])
            ("mouse--drag-set-mark-and-point" function (:arguments ("start" "click" "click-count")) nil [56909 57275])
            ("mouse-skip-word" function (:arguments ("dir")) nil [57328 58430])
            ("mouse-start-end" function (:arguments ("start" "end" "mode")) nil [58432 61129])
            ("mouse-set-mark-fast" function (:arguments ("click")) nil [61213 61429])
            ("mouse-undouble-last-event" function (:arguments ("events")) nil [61431 62104])
            ("mouse-set-mark" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [62179 62676])
            ("mouse-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [62678 63085])
            ("mouse-yank-at-click" function
               (:user-visible-flag t
                :arguments ("click" "arg"))
                nil [63087 63855])
            ("mouse-yank-primary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [63857 64570])
            ("mouse-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [64572 64870])
            ("mouse-save-then-kill-posn" variable nil nil [65105 65143])
            ("mouse-save-then-kill-delete-region" function (:arguments ("beg" "end")) nil [65145 66626])
            ("mouse-save-then-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [66628 70073])
            ("global-set-key" code nil nil [70077 70128])
            ("global-set-key" code nil nil [70129 70183])
            ("global-set-key" code nil nil [70184 70239])
            ("global-set-key" code nil nil [70240 70300])
            ("global-set-key" code nil nil [70301 70351])
            ("mouse-secondary-overlay" variable
               (:constant-flag t
                :default-value (let ((ol (make-overlay (point-min) (point-min)))) (delete-overlay ol) (overlay-put ol (quote face) (quote secondary-selection)) ol))
                nil [70353 70634])
            ("mouse-secondary-click-count" variable nil nil [70636 70674])
            ("mouse-secondary-start" variable nil nil [70768 70802])
            ("mouse-start-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [70804 71447])
            ("mouse-set-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [71449 72072])
            ("mouse-drag-secondary" function
               (:user-visible-flag t
                :arguments ("start-event"))
                nil [72074 75303])
            ("mouse-yank-secondary" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [75305 75853])
            ("mouse-kill-secondary" function (:user-visible-flag t) nil [75855 76758])
            ("mouse-secondary-save-then-kill" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [76760 80668])
            ("secondary-selection-exist-p" function nil nil [80670 80855])
            ("secondary-selection-to-region" function nil nil [80857 81657])
            ("secondary-selection-from-region" function nil nil [81659 82089])
            ("mouse-buffer-menu-maxlen" variable (:default-value 20) nil [82093 82354])
            ("mouse-buffer-menu-mode-mult" variable (:default-value 4) nil [82356 82844])
            ("mouse-buffer-menu-mode-groups" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("Info\\|Help\\|Apropos\\|Man" . "Help") ("\\bVM\\b\\|\\bMH\\b\\|Message\\|Mail\\|Group\\|Score\\|Summary\\|Article" . "Mail/News") ("\\<C\\>" . "C") ("ObjC" . "C") ("Text" . "Text") ("Outline" . "Text") ("\\(HT\\|SG\\|X\\|XHT\\)ML" . "SGML") ("log\\|diff\\|vc\\|cvs\\|Annotate" . "Version Control") ("Threads\\|Memory\\|Disassembly\\|Breakpoints\\|Frames\\|Locals\\|Registers\\|Inferior I/O\\|Debugger" . "GDB") ("Lisp" . "Lisp"))))) nil [82846 83656])
            ("mouse-buffer-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [83658 84138])
            ("mouse-buffer-menu-map" function nil nil [84140 87287])
            ("mouse-buffer-menu-alist" function (:arguments ("buffers")) nil [87289 88333])
            ("mouse-buffer-menu-split" function (:arguments ("title" "alist")) nil [88335 89088])
            ("define-obsolete-function-alias" code nil nil [89091 89176])
            ("font-menu-add-default" function nil nil [89198 89506])
            ("x-fixed-font-alist" variable (:default-value (list (purecopy "Font Menu") (cons (purecopy "Misc") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("fixed" "fixed") ("6x10" "-misc-fixed-medium-r-normal--10-*-*-*-c-60-iso8859-1" "6x10") ("6x12" "-misc-fixed-medium-r-semicondensed--12-*-*-*-c-60-iso8859-1" "6x12") ("6x13" "-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1" "6x13") ("7x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-70-iso8859-1" "7x13") ("7x14" "-misc-fixed-medium-r-normal--14-*-*-*-c-70-iso8859-1" "7x14") ("8x13" "-misc-fixed-medium-r-normal--13-*-*-*-c-80-iso8859-1" "8x13") ("9x15" "-misc-fixed-medium-r-normal--15-*-*-*-c-90-iso8859-1" "9x15") ("10x20" "-misc-fixed-medium-r-normal--20-*-*-*-c-100-iso8859-1" "10x20") ("11x18" "-misc-fixed-medium-r-normal--18-*-*-*-c-110-iso8859-1" "11x18") ("12x24" "-misc-fixed-medium-r-normal--24-*-*-*-c-120-iso8859-1" "12x24") ("") ("clean 5x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-50-iso8859-1") ("clean 6x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-60-iso8859-1") ("clean 8x8" "-schumacher-clean-medium-r-normal--8-*-*-*-c-80-iso8859-1") ("clean 8x10" "-schumacher-clean-medium-r-normal--10-*-*-*-c-80-iso8859-1") ("clean 8x14" "-schumacher-clean-medium-r-normal--14-*-*-*-c-80-iso8859-1") ("clean 8x16" "-schumacher-clean-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("") ("sony 8x16" "-sony-fixed-medium-r-normal--16-*-*-*-c-80-iso8859-1") ("lucidasanstypewriter-12" "-b&h-lucidatypewriter-medium-r-normal-sans-*-120-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-14" "-b&h-lucidatypewriter-bold-r-normal-sans-*-140-*-*-*-*-iso8859-1") ("lucidasanstypewriter-bold-24" "-b&h-lucidatypewriter-bold-r-normal-sans-*-240-*-*-*-*-iso8859-1"))))) (cons (purecopy "Courier") (mapcar (lambda (arg) (cons (purecopy (car arg)) (purecopy (cdr arg)))) (quote (("8" "-adobe-courier-medium-r-normal--*-80-*-*-m-*-iso8859-1") ("10" "-adobe-courier-medium-r-normal--*-100-*-*-m-*-iso8859-1") ("12" "-adobe-courier-medium-r-normal--*-120-*-*-m-*-iso8859-1") ("14" "-adobe-courier-medium-r-normal--*-140-*-*-m-*-iso8859-1") ("18" "-adobe-courier-medium-r-normal--*-180-*-*-m-*-iso8859-1") ("24" "-adobe-courier-medium-r-normal--*-240-*-*-m-*-iso8859-1") ("8 bold" "-adobe-courier-bold-r-normal--*-80-*-*-m-*-iso8859-1") ("10 bold" "-adobe-courier-bold-r-normal--*-100-*-*-m-*-iso8859-1") ("12 bold" "-adobe-courier-bold-r-normal--*-120-*-*-m-*-iso8859-1") ("14 bold" "-adobe-courier-bold-r-normal--*-140-*-*-m-*-iso8859-1") ("18 bold" "-adobe-courier-bold-r-normal--*-180-*-*-m-*-iso8859-1") ("24 bold" "-adobe-courier-bold-r-normal--*-240-*-*-m-*-iso8859-1") ("8 slant" "-adobe-courier-medium-o-normal--*-80-*-*-m-*-iso8859-1") ("10 slant" "-adobe-courier-medium-o-normal--*-100-*-*-m-*-iso8859-1") ("12 slant" "-adobe-courier-medium-o-normal--*-120-*-*-m-*-iso8859-1") ("14 slant" "-adobe-courier-medium-o-normal--*-140-*-*-m-*-iso8859-1") ("18 slant" "-adobe-courier-medium-o-normal--*-180-*-*-m-*-iso8859-1") ("24 slant" "-adobe-courier-medium-o-normal--*-240-*-*-m-*-iso8859-1") ("8 bold slant" "-adobe-courier-bold-o-normal--*-80-*-*-m-*-iso8859-1") ("10 bold slant" "-adobe-courier-bold-o-normal--*-100-*-*-m-*-iso8859-1") ("12 bold slant" "-adobe-courier-bold-o-normal--*-120-*-*-m-*-iso8859-1") ("14 bold slant" "-adobe-courier-bold-o-normal--*-140-*-*-m-*-iso8859-1") ("18 bold slant" "-adobe-courier-bold-o-normal--*-180-*-*-m-*-iso8859-1") ("24 bold slant" "-adobe-courier-bold-o-normal--*-240-*-*-m-*-iso8859-1"))))))) nil [89508 93788])
            ("declare-function" code nil nil [93790 93843])
            ("mouse-select-font" function (:user-visible-flag t) nil [93845 94226])
            ("declare-function" code nil nil [94228 94275])
            ("mouse-set-font" function
               (:user-visible-flag t
                :arguments ("fonts"))
                nil [94277 95124])
            ("mouse-appearance-menu-map" variable nil nil [95126 95164])
            ("declare-function" code nil nil [95165 95232])
            ("declare-function" code nil nil [95243 95349])
            ("declare-function" code nil nil [95350 95421])
            ("w32-use-w32-font-dialog" variable nil nil [95422 95454])
            ("w32-fixed-font-alist" variable nil nil [95455 95484])
            ("mouse-appearance-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [95486 98264])
            ("mouse-drag-and-drop-region" variable nil nil [98294 98996])
            ("mouse-drag-and-drop-region-cut-when-buffers-differ" variable nil nil [98998 99427])
            ("mouse-drag-and-drop-region-show-tooltip" variable (:default-value 256) nil [99429 99865])
            ("mouse-drag-and-drop-region-show-cursor" variable (:default-value t) nil [99867 100262])
            ("mouse-drag-and-drop-region" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [100264 100563])
            ("mouse-drag-and-drop-region" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [100565 111858])
            ("global-set-key" code nil nil [111896 111946])
            ("global-set-key" code nil nil [111947 111990])
            ("global-set-key" code nil nil [111991 112040])
            ("mouse--strip-first-event" function (:arguments ("_prompt")) nil [112042 112131])
            ("define-key" code nil nil [112133 112210])
            ("define-key" code nil nil [112211 112289])
            ("global-set-key" code nil nil [112291 112337])
            ("define-key" code nil nil [112410 112488])
            ("define-key" code nil nil [112489 112566])
            ("global-set-key" code nil nil [112567 112615])
            ("define-key" code nil nil [112616 112694])
            ("define-key" code nil nil [112695 112772])
            ("global-set-key" code nil nil [112897 112949])
            ("if" code nil nil [112950 113046])
            ("global-set-key" code nil nil [113090 113348])
            ("global-set-key" code nil nil [113568 113635])
            ("global-set-key" code nil nil [113636 113695])
            ("global-set-key" code nil nil [113762 113825])
            ("global-set-key" code nil nil [113826 113883])
            ("global-set-key" code nil nil [113884 113948])
            ("global-set-key" code nil nil [113949 114006])
            ("global-set-key" code nil nil [114007 114078])
            ("global-set-key" code nil nil [114079 114158])
            ("global-set-key" code nil nil [114159 114242])
            ("global-set-key" code nil nil [114243 114314])
            ("global-set-key" code nil nil [114315 114376])
            ("global-set-key" code nil nil [114377 114450])
            ("global-set-key" code nil nil [114451 114522])
            ("global-set-key" code nil nil [114523 114571])
            ("global-set-key" code nil nil [114572 114645])
            ("global-set-key" code nil nil [114646 114714])
            ("global-set-key" code nil nil [114715 114764])
            ("global-set-key" code nil nil [114765 114841])
            ("global-set-key" code nil nil [114842 114905])
            ("global-set-key" code nil nil [114906 114950])
            ("global-set-key" code nil nil [114951 115026])
            ("global-set-key" code nil nil [115027 115077])
            ("global-set-key" code nil nil [115078 115139])
            ("global-set-key" code nil nil [115140 115183])
            ("global-set-key" code nil nil [115184 115261])
            ("global-set-key" code nil nil [115262 115313])
            ("global-set-key" code nil nil [115314 115379])
            ("global-set-key" code nil nil [115380 115425])
            ("global-set-key" code nil nil [115426 115509])
            ("global-set-key" code nil nil [115510 115564])
            ("global-set-key" code nil nil [115565 115632])
            ("global-set-key" code nil nil [115633 115679])
            ("global-set-key" code nil nil [115680 115761])
            ("global-set-key" code nil nil [115762 115815])
            ("mouse" package nil nil [115817 115833]))          
      :file "mouse.el"
      :pointmax 115858
      :fsize 115863
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("timezone-world-timezones" variable (:default-value (quote (("PST" . -800) ("PDT" . -700) ("MST" . -700) ("MDT" . -600) ("CST" . -600) ("CDT" . -500) ("EST" . -500) ("EDT" . -400) ("AST" . -400) ("NST" . -330) ("UT" . 0) ("GMT" . 0) ("BST" . 100) ("MET" . 100) ("EET" . 200) ("JST" . 900) ("GMT+1" . 100) ("GMT+2" . 200) ("GMT+3" . 300) ("GMT+4" . 400) ("GMT+5" . 500) ("GMT+6" . 600) ("GMT+7" . 700) ("GMT+8" . 800) ("GMT+9" . 900) ("GMT+10" . 1000) ("GMT+11" . 1100) ("GMT+12" . 1200) ("GMT+13" . 1300) ("GMT-1" . -100) ("GMT-2" . -200) ("GMT-3" . -300) ("GMT-4" . -400) ("GMT-5" . -500) ("GMT-6" . -600) ("GMT-7" . -700) ("GMT-8" . -800) ("GMT-9" . -900) ("GMT-10" . -1000) ("GMT-11" . -1100) ("GMT-12" . -1200)))) nil [923 2055])
            ("timezone-months-assoc" variable (:default-value (quote (("JAN" . 1) ("FEB" . 2) ("MAR" . 3) ("APR" . 4) ("MAY" . 5) ("JUN" . 6) ("JUL" . 7) ("AUG" . 8) ("SEP" . 9) ("OCT" . 10) ("NOV" . 11) ("DEC" . 12)))) nil [2057 2330])
            ("timezone-make-date-arpa-standard" function (:arguments ("date" "local" "timezone")) nil [2332 2902])
            ("timezone-make-date-sortable" function (:arguments ("date" "local" "timezone")) nil [2904 3443])
            ("timezone-make-arpa-date" function (:arguments ("year" "month" "day" "time" "timezone")) nil [3499 4049])
            ("timezone-make-sortable-date" function (:arguments ("year" "month" "day" "time")) nil [4051 4221])
            ("timezone-make-time-string" function (:arguments ("hour" "minute" "second")) nil [4223 4376])
            ("timezone-parse-date" function (:arguments ("date")) nil [4378 10198])
            ("timezone-parse-time" function (:arguments ("time")) nil [10200 11075])
            ("timezone-zone-to-minute" function (:arguments ("timezone")) nil [11097 11814])
            ("timezone-time-from-absolute" function (:arguments ("date" "seconds")) nil [11816 12431])
            ("timezone-time-zone-from-absolute" function (:arguments ("date" "seconds")) nil [12433 12974])
            ("timezone-fix-time" function (:arguments ("date" "local" "timezone")) nil [12976 14829])
            ("timezone-last-day-of-month" function (:arguments ("month" "year")) nil [14911 15119])
            ("timezone-leap-year-p" function (:arguments ("year")) nil [15121 15294])
            ("timezone-day-number" function (:arguments ("month" "day" "year")) nil [15296 15649])
            ("timezone-absolute-from-gregorian" function (:arguments ("month" "day" "year")) nil [15651 16067])
            ("timezone" package nil nil [16094 16113]))          
      :file "timezone.el"
      :pointmax 16141
      :fsize 16140
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("talk-display-alist" variable nil nil [1023 1162])
            ("talk-connect" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [1179 1624])
            ("talk" function (:user-visible-flag t) nil [1641 1951])
            ("talk-add-display" function (:arguments ("display")) nil [1953 2525])
            ("talk-handle-delete-frame" function (:arguments ("frame")) nil [2527 2721])
            ("talk-disconnect" function (:user-visible-flag t) nil [2723 3087])
            ("talk-update-buffers" function nil nil [3089 3614])
            ("talk-split-up-frame" function (:arguments ("frame" "buffers")) nil [3616 4267])
            ("talk" package nil nil [4269 4284]))          
      :file "talk.el"
      :pointmax 4308
      :fsize 4307
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [990 2023])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [2025 2322])
            ("save-selected-window" function (:arguments ("body")) nil [2324 3362])
            ("temp-buffer-window-setup-hook" variable nil nil [3364 3565])
            ("temp-buffer-window-show-hook" variable nil nil [3567 3788])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3790 4404])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4406 5650])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5652 8234])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8236 9126])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9128 11457])
            ("window-right" function (:arguments ("window")) nil [11764 11976])
            ("window-left" function (:arguments ("window")) nil [11978 12188])
            ("window-child" function (:arguments ("window")) nil [12190 12345])
            ("window-child-count" function (:arguments ("window")) nil [12347 12643])
            ("window-last-child" function (:arguments ("window")) nil [12645 12912])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12914 13686])
            ("window-normalize-frame" function (:arguments ("frame")) nil [13688 14118])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [14120 14827])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [14866 15638])
            ("ignore-window-parameters" variable nil nil [15640 15984])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [16034 16158])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [16160 16356])
            ("window-min-height" variable (:default-value 4) nil [16358 17061])
            ("window-min-pixel-height" function (:arguments ("window")) nil [17063 17250])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [17300 17423])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [17425 17620])
            ("window-min-width" variable (:default-value 10) nil [17622 18321])
            ("window-min-pixel-width" function (:arguments ("window")) nil [18323 18508])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18510 18827])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [18829 19113])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [19115 19747])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [19749 20175])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [20177 21284])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [21286 21998])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [22000 23223])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [23225 23876])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [23878 24836])
            ("window-atom-root" function (:arguments ("window")) nil [24858 25278])
            ("window-make-atom" function (:arguments ("window")) nil [25280 25668])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [25670 28136])
            ("window--atom-check-1" function (:arguments ("window")) nil [28138 29026])
            ("window--atom-check" function (:arguments ("frame")) nil [29028 29416])
            ("window-sides-vertical" variable nil nil [29435 29731])
            ("window-sides-reversed" variable nil nil [29733 30634])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [30636 32285])
            ("defvar-local" code nil nil [32287 32736])
            ("window--sides-inhibit-check" variable nil nil [32738 32832])
            ("window--sides-reverse-on-frame-p" function (:arguments ("frame")) nil [32834 34403])
            ("window-main-window" function (:arguments ("frame")) nil [34405 35393])
            ("window--make-major-side-window-next-to" function (:arguments ("side")) nil [35395 37236])
            ("window--make-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [37238 39446])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [39448 45944])
            ("window-toggle-side-windows" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [45946 47456])
            ("window--sides-reverse-all" function nil nil [47458 47655])
            ("window--sides-reverse-frame" function (:arguments ("frame")) nil [47657 48114])
            ("window--sides-reverse-side" function (:arguments ("frame" "side")) nil [48116 49048])
            ("window--sides-reverse" function (:arguments ("symbol" "value")) nil [49050 49631])
            ("window--sides-verticalize-frame" function (:arguments ("frame")) nil [49633 50963])
            ("window--sides-verticalize" function (:arguments ("symbol" "value")) nil [50965 51179])
            ("window--sides-check-failed" function (:arguments ("frame")) nil [51181 52883])
            ("window--sides-check" function (:arguments ("frame")) nil [52885 53821])
            ("window--check" function (:arguments ("frame")) nil [53823 54003])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [54039 55883])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [55885 57506])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [57526 58474])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [58476 59280])
            ("window-size-fixed" variable nil nil [59282 59719])
            ("make-variable-buffer-local" code nil nil [59720 59767])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [59769 60195])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [60197 61601])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [61603 62141])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [62143 62503])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [62505 63210])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [63212 63780])
            ("window--min-size-ignore-p" function (:arguments ("window" "ignore")) nil [63782 64002])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [64004 67795])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [67797 69167])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69169 69674])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [69676 71001])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [71003 71651])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [71653 72995])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [72997 74780])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [74782 75391])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [75393 76693])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [76695 78141])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [78189 79998])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [80000 80658])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [80660 82172])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [82174 82730])
            ("defalias" code nil nil [82777 82823])
            ("defalias" code nil nil [82824 82867])
            ("window-full-height-p" function (:arguments ("window")) nil [82869 83407])
            ("window-full-width-p" function (:arguments ("window")) nil [83409 83841])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [83843 84374])
            ("declare-function" code nil nil [84376 84436])
            ("window-font-width" function (:arguments ("window" "face")) nil [84438 85068])
            ("window-font-height" function (:arguments ("window" "face")) nil [85070 85633])
            ("overflow-newline-into-fringe" variable nil nil [85635 85672])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [85674 87188])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [87190 88161])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [88163 90045])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [90047 90624])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [90626 91144])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [91146 91536])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [91831 97329])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [97331 98952])
            ("defalias" code nil nil [98954 99004])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [99006 100657])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [100659 101929])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [101931 103224])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [103226 104794])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [104796 104975])
            ("count-windows" function (:arguments ("minibuf")) nil [104977 105270])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [105295 106245])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [106247 107871])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [107873 109788])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [109790 110226])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [110228 110750])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [110752 111976])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [111978 112384])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [112386 116294])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [116296 116773])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [116775 116952])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [116954 120472])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [120474 127086])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [127088 130884])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [130886 132789])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [132791 133624])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [133626 135547])
            ("window--sanitize-window-sizes" function (:arguments ("horizontal")) nil [135549 136514])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [136516 143773])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [143775 145609])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [145611 147462])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [147464 148060])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [148062 148672])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [148692 151744])
            ("window-body-edges" function (:arguments ("window")) nil [151746 151954])
            ("defalias" code nil nil [151955 152005])
            ("window-pixel-edges" function (:arguments ("window")) nil [152007 152228])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [152230 152471])
            ("defalias" code nil nil [152472 152534])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [152536 152763])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [152765 153017])
            ("defalias" code nil nil [153018 153098])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [153100 154000])
            ("frame-root-window-p" function (:arguments ("window")) nil [154003 154142])
            ("window--subtree" function (:arguments ("window" "next")) nil [154144 154867])
            ("window-tree" function (:arguments ("frame")) nil [154869 155764])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [155767 158398])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [158534 159807])
            ("window-deletable-p" function (:arguments ("window")) nil [159832 161408])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [161410 161713])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [161715 165259])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [165261 169036])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [169038 169664])
            ("record-window-buffer" function (:arguments ("window")) nil [171400 172819])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [172821 173320])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [173322 174249])
            ("switch-to-visible-buffer" variable (:default-value t) nil [174251 174706])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [174708 180556])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [180558 184383])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [184385 185381])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [185383 186110])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [186112 186698])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [186700 187682])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [187684 188817])
            ("unbury-buffer" function (:user-visible-flag t) nil [188819 188944])
            ("next-buffer" function (:user-visible-flag t) nil [188946 189248])
            ("previous-buffer" function (:user-visible-flag t) nil [189250 189560])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [189562 192154])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [192156 193188])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [193190 198033])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [198035 198635])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [198637 199601])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [199604 211395])
            ("split-window-no-error" function (:arguments ("window" "size" "side" "pixelwise")) nil [211397 211764])
            ("split-window-keep-point" variable (:default-value t) nil [211841 212215])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [212217 214471])
            ("defalias" code nil nil [214473 214528])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [214530 215738])
            ("defalias" code nil nil [215740 215797])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [216300 219068])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [219070 219496])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [219498 220755])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [220757 221187])
            ("window-area-factor" variable (:default-value 1) nil [221234 221403])
            ("make-variable-buffer-local" code nil nil [221404 221452])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [221454 222108])
            ("balance-windows-area" function (:user-visible-flag t) nil [222110 226466])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [226536 229568])
            ("window-state-get" function (:arguments ("window" "writable")) nil [229570 231659])
            ("window-state-put-list" variable nil nil [231661 231739])
            ("window-state-put-stale-windows" variable nil nil [231741 231828])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [231830 234548])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [234550 238590])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [238592 242776])
            ("window-swap-states" function
               (:user-visible-flag t
                :arguments ("window-1" "window-2" "size"))
                nil [242778 246193])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [246196 248713])
            ("display-buffer-function" variable nil nil [248715 249271])
            ("make-obsolete-variable" code nil nil [249273 249354])
            ("pop-up-frame-alist" variable nil nil [249535 250151])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [250153 250482])
            ("special-display-buffer-names" variable nil nil [250484 253074])
            ("make-obsolete-variable" code nil nil [253075 253158])
            ("put" code nil nil [253159 253218])
            ("special-display-regexps" variable nil nil [253220 255862])
            ("make-obsolete-variable" code nil nil [255863 255941])
            ("put" code nil nil [255942 255996])
            ("special-display-p" function (:arguments ("buffer-name")) nil [255998 256893])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [256895 257513])
            ("make-obsolete-variable" code nil nil [257514 257596])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [257598 259618])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [259620 260418])
            ("make-obsolete-variable" code nil nil [260419 260498])
            ("same-window-buffer-names" variable nil nil [260500 261072])
            ("same-window-regexps" variable nil nil [261074 261662])
            ("same-window-p" function (:arguments ("buffer-name")) nil [261664 262627])
            ("pop-up-frames" variable nil nil [262629 263041])
            ("display-buffer-reuse-frames" variable nil nil [263043 263272])
            ("make-obsolete-variable" code nil nil [263274 263402])
            ("pop-up-windows" variable (:default-value t) nil [263404 263528])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [263530 264913])
            ("split-height-threshold" variable (:default-value 80) nil [264915 265478])
            ("split-width-threshold" variable (:default-value 160) nil [265480 265868])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [265870 268211])
            ("split-window-sensibly" function (:arguments ("window")) nil [268213 271084])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [271086 272196])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [272198 273140])
            ("even-window-sizes" variable (:default-value t) nil [273142 273665])
            ("defvaralias" code nil nil [273666 273719])
            ("window--even-window-sizes" function (:arguments ("window")) nil [273721 274726])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [274728 278240])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [278242 278822])
            ("display-buffer-mark-dedicated" variable nil nil [279161 279370])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-child-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [279372 280011])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [280013 280388])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [280390 281162])
            ("put" code nil nil [281163 281226])
            ("display-buffer-alist" variable nil nil [281228 282538])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [282540 283189])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [283191 283857])
            ("put" code nil nil [283858 283919])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [283921 284623])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [284625 284845])
            ("put" code nil nil [284846 284911])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [284913 285247])
            ("put" code nil nil [285248 285313])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [285315 292017])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [292019 292527])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [292569 293895])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [293897 294399])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [294401 294742])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [294744 296390])
            ("display-buffer-reuse-mode-window" function (:arguments ("buffer" "alist")) nil [296392 299241])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [299243 299989])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [299991 301011])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [301013 302328])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [302330 302915])
            ("display-buffer-in-child-frame" function (:arguments ("buffer" "alist")) nil [302917 304599])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [304601 305689])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [305691 307172])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [307174 309461])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [309463 311204])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [311206 311661])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "norecord"))
                nil [311697 313574])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [313576 314491])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [314493 315637])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [315639 316195])
            ("switch-to-buffer-preserve-window-point" variable (:default-value t) nil [316197 317084])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [317086 317876])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [317878 321699])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [321701 322805])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [322807 323891])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [323894 324867])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [324869 325084])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [325086 325305])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [325307 326708])
            ("window-buffer-height" function (:arguments ("window")) nil [326710 327188])
            ("fit-window-to-buffer-horizontally" variable nil nil [327253 327647])
            ("fit-frame-to-buffer" variable nil nil [327761 328210])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [328212 329426])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [329428 330717])
            ("declare-function" code nil nil [330719 330790])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [330792 331027])
            ("declare-function" code nil nil [331029 331101])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [331103 341115])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [341117 347596])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [347598 347979])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [347981 349089])
            ("window-largest-empty-rectangle--maximums-1" function (:arguments ("quad" "maximums")) nil [349091 349424])
            ("window-largest-empty-rectangle--maximums" function (:arguments ("quad" "maximums" "count")) nil [349426 349706])
            ("window-largest-empty-rectangle--disjoint-maximums" function (:arguments ("maximums" "count")) nil [349708 350477])
            ("window-largest-empty-rectangle" function (:arguments ("window" "count" "min-width" "min-height" "positions" "left")) nil [350479 355240])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [355243 356065])
            ("window-group-start-function" variable nil nil [356485 356525])
            ("make-variable-buffer-local" code nil nil [356526 356583])
            ("put" code nil nil [356584 356637])
            ("window-group-start" function (:arguments ("window")) nil [356638 357137])
            ("window-group-end-function" variable nil nil [357139 357177])
            ("make-variable-buffer-local" code nil nil [357178 357233])
            ("put" code nil nil [357234 357285])
            ("window-group-end" function (:arguments ("window" "update")) nil [357286 358092])
            ("set-window-group-start-function" variable nil nil [358094 358138])
            ("make-variable-buffer-local" code nil nil [358139 358200])
            ("put" code nil nil [358201 358258])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [358259 358900])
            ("recenter-window-group-function" variable nil nil [358902 358945])
            ("make-variable-buffer-local" code nil nil [358946 359006])
            ("put" code nil nil [359007 359063])
            ("recenter-window-group" function (:arguments ("arg")) nil [359064 360234])
            ("pos-visible-in-window-group-p-function" variable nil nil [360236 360287])
            ("make-variable-buffer-local" code nil nil [360288 360356])
            ("put" code nil nil [360357 360421])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [360422 361898])
            ("selected-window-group-function" variable nil nil [361900 361943])
            ("make-variable-buffer-local" code nil nil [361944 362004])
            ("put" code nil nil [362005 362061])
            ("selected-window-group" function nil nil [362062 362412])
            ("move-to-window-group-line-function" variable nil nil [362414 362461])
            ("make-variable-buffer-local" code nil nil [362462 362526])
            ("put" code nil nil [362527 362587])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [362588 363182])
            ("recenter-last-op" variable nil nil [363186 363411])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [363413 364273])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [364275 365422])
            ("define-key" code nil nil [365424 365476])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [365478 366612])
            ("define-key" code nil nil [366614 366677])
            ("scroll-error-top-bottom" variable nil nil [366847 367291])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367293 368356])
            ("put" code nil nil [368358 368400])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368402 369469])
            ("put" code nil nil [369471 369515])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369585 369868])
            ("put" code nil nil [369870 369909])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369911 370196])
            ("put" code nil nil [370198 370239])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [370243 370638])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370640 371324])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [371326 371829])
            ("mouse-autoselect-window-timer" variable nil nil [371832 371922])
            ("mouse-autoselect-window-position-1" variable nil nil [371924 372038])
            ("mouse-autoselect-window-position" variable nil nil [372040 372151])
            ("mouse-autoselect-window-window" variable nil nil [372153 372254])
            ("mouse-autoselect-window-state" variable nil nil [372256 372553])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [372555 373326])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [373328 374156])
            ("mouse-autoselect-window-select" function nil nil [374158 378158])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [378160 380670])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [380672 381357])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [381426 382868])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "windows")) nil [382870 383479])
            ("window-adjust-process-window-size-smallest" function (:arguments ("_process" "windows")) nil [383481 383772])
            ("window-adjust-process-window-size-largest" function (:arguments ("_process" "windows")) nil [383774 384063])
            ("window--process-window-list" function nil nil [384065 385278])
            ("window--adjust-process-windows" function nil nil [385280 385976])
            ("add-hook" code nil nil [386078 386154])
            ("add-hook" code nil nil [386281 386414])
            ("define-key" code nil nil [386504 386545])
            ("define-key" code nil nil [386546 386594])
            ("define-key" code nil nil [386595 386641])
            ("define-key" code nil nil [386642 386688])
            ("define-key" code nil nil [386689 386729])
            ("define-key" code nil nil [386730 386772])
            ("define-key" code nil nil [386773 386828])
            ("define-key" code nil nil [386829 386883])
            ("define-key" code nil nil [386884 386947])
            ("define-key" code nil nil [386948 386991])
            ("define-key" code nil nil [386992 387044]))          
      :file "window.el"
      :pointmax 387070
      :fsize 387073
      :lastmodtime '(23695 34780 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1132 1168])
            ("command-line-processed" variable nil nil [1170 1255])
            ("initialization" customgroup (:user-visible-flag t) nil [1257 1338])
            ("initial-buffer-choice" variable nil nil [1340 2311])
            ("inhibit-startup-screen" variable nil nil [2313 2566])
            ("defvaralias" code nil nil [2568 2628])
            ("defvaralias" code nil nil [2629 2691])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2693 2743])
            ("inhibit-startup-echo-area-message" variable nil nil [3043 4097])
            ("inhibit-default-init" variable nil nil [4099 4229])
            ("inhibit-startup-buffer-menu" variable nil nil [4231 4395])
            ("command-switch-alist" variable nil nil [4397 4665])
            ("command-line-args-left" variable nil nil [4667 4751])
            ("defvaralias" code nil nil [4753 4988])
            ("internal-make-var-non-special" code nil nil [4989 5026])
            ("argi" variable nil nil [5028 5080])
            ("internal-make-var-non-special" code nil nil [5081 5118])
            ("command-line-functions" variable nil nil [5120 5574])
            ("command-line-default-directory" variable nil nil [5576 5744])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5852 9036])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [9038 11990])
            ("before-init-hook" variable nil nil [11993 12103])
            ("after-init-hook" variable nil nil [12105 12521])
            ("emacs-startup-hook" variable nil nil [12523 12630])
            ("term-setup-hook" variable nil nil [12632 12947])
            ("make-obsolete-variable" code nil nil [12949 13065])
            ("inhibit-startup-hooks" variable nil nil [13067 13266])
            ("keyboard-type" variable nil nil [13268 13489])
            ("window-setup-hook" variable nil nil [13491 13938])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13940 14109])
            ("init-file-user" variable nil nil [14111 14758])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14760 16031])
            ("make-obsolete-variable" code nil nil [16033 16105])
            ("mail-host-address" variable nil nil [16107 16305])
            ("user-mail-address" variable (:default-value (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name))))) nil [16307 16729])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16731 17484])
            ("emacs-basic-display" variable nil nil [17486 17518])
            ("init-file-debug" variable nil nil [17520 17548])
            ("init-file-had-error" variable nil nil [17550 17646])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17648 17700])
            ("no-blinking-cursor" variable nil nil [17702 17733])
            ("pure-space-overflow" variable nil nil [17735 17820])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17822 17998])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18000 18236])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18238 19990])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [19992 20761])
            ("normal-top-level" function nil nil [20763 31217])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [31325 31551])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [31553 31643])
            ("cl-defgeneric" code nil nil [31645 31986])
            ("cl-defmethod" code nil nil [31987 32083])
            ("cl-defgeneric" code nil nil [32085 32423])
            ("tty-handle-args" function (:arguments ("args")) nil [32425 35172])
            ("declare-function" code nil nil [35174 35268])
            ("declare-function" code nil nil [35269 35328])
            ("declare-function" code nil nil [35329 35373])
            ("server-name" variable nil nil [35375 35395])
            ("server-process" variable nil nil [35396 35419])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [35421 38396])
            ("command-line" function nil nil [38398 59917])
            ("x-apply-session-resources" function nil nil [59919 60998])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [61000 61408])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/thegnuproject.html"))) "Browse https://www.gnu.org/gnu/thegnuproject.html"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [61583 64367])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/"))) "Browse https://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "https://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse https://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (info "(emacs)Contributing")))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "https://www.gnu.org/software/emacs/tour/"))) "Browse https://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [64369 67527])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [67530 67649])
            ("fancy-splash-image" variable nil nil [67651 67848])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [67851 68223])
            ("fancy-splash-insert" function (:arguments ("args")) nil [68294 69690])
            ("declare-function" code nil nil [69692 69761])
            ("fancy-splash-image-file" function nil nil [69763 70242])
            ("fancy-splash-head" function nil nil [70244 71262])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [71264 74403])
            ("exit-splash-screen" function (:user-visible-flag t) nil [74405 74514])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [74516 75947])
            ("fancy-about-screen" function nil nil [75949 76707])
            ("fancy-splash-frame" function nil nil [76709 77305])
            ("use-fancy-splash-screens-p" function nil nil [77307 78122])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [78125 80631])
            ("normal-mouse-startup-screen" function nil nil [80633 82439])
            ("normal-no-mouse-startup-screen" function nil nil [82441 86570])
            ("normal-about-screen" function nil nil [86572 88033])
            ("startup-echo-area-message" function nil nil [88035 88232])
            ("display-startup-echo-area-message" function nil nil [88234 89498])
            ("display-startup-screen" function (:arguments ("concise")) nil [89500 89952])
            ("display-about-screen" function (:user-visible-flag t) nil [89954 90200])
            ("defalias" code nil nil [90202 90247])
            ("defalias" code nil nil [90248 90305])
            ("command-line-1" function (:arguments ("args-left")) nil [90307 107479])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [107481 108213]))          
      :file "startup.el"
      :pointmax 108240
      :fsize 108271
      :lastmodtime '(23759 43398 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("electric" include nil nil [1023 1042])
            ("tmm" customgroup (:user-visible-flag t) nil [1044 1128])
            ("tmm-short-cuts" variable nil nil [1202 1225])
            ("tmm-old-mb-map" variable nil nil [1226 1253])
            ("tmm-c-prompt" variable nil nil [1254 1279])
            ("tmm-km-list" variable nil nil [1280 1300])
            ("tmm-next-shortcut-digit" variable nil nil [1301 1333])
            ("tmm-table-undef" variable nil nil [1334 1358])
            ("tmm-menubar" function
               (:user-visible-flag t
                :arguments ("x-position"))
                nil [1512 3462])
            ("tmm-menubar-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [3479 3813])
            ("tmm-mid-prompt" variable (:default-value "==>") nil [3815 4080])
            ("tmm-mb-map" variable nil nil [4082 4142])
            ("tmm-completion-prompt" variable (:default-value "Press PageUp key to reach this buffer from the minibuffer.
Alternatively, you can use Up/Down keys (or your History keys) to change
the item in the minibuffer, and press RET when you are done, or press the
marked letters to pick up your choice.  Type C-g or ESC ESC ESC to cancel.
") nil [4144 4676])
            ("tmm-shortcut-style" variable (:default-value (quote (downcase upcase))) nil [4678 4999])
            ("tmm-shortcut-words" variable (:default-value 2) nil [5001 5255])
            ("tmm-inactive" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [5257 5357])
            ("tmm--completion-table" function (:arguments ("items")) nil [5359 5561])
            ("tmm--history" variable nil nil [5563 5588])
            ("tmm-prompt" function (:arguments ("menu" "in-popup" "default-item")) nil [5605 11356])
            ("tmm-add-shortcuts" function (:arguments ("list")) nil [11358 11697])
            ("tmm-add-one-shortcut" function (:arguments ("elt")) nil [11699 13689])
            ("tmm-define-keys" function (:arguments ("minibuffer")) nil [13720 14601])
            ("tmm-completion-delete-prompt" function nil nil [14603 14783])
            ("tmm-remove-inactive-mouse-face" function nil nil [14785 15404])
            ("tmm-add-prompt" function nil nil [15406 16278])
            ("tmm-shortcut" function (:user-visible-flag t) nil [16280 17147])
            ("tmm-goto-completions" function (:user-visible-flag t) nil [17149 17522])
            ("tmm-get-keymap" function (:arguments ("elt" "in-x-menu")) nil [17524 21225])
            ("tmm-get-keybind" function (:arguments ("keyseq")) nil [21227 21631])
            ("tmm" package nil nil [21633 21647]))          
      :file "tmm.el"
      :pointmax 21670
      :fsize 21669
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "electric.el"
      :fsize 24267
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [2020 2040])
            ("forward-thing" function (:arguments ("thing" "n")) nil [2076 2591])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [2629 4663])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [4680 5541])
            ("beginning-of-thing" function (:arguments ("thing")) nil [5567 5833])
            ("end-of-thing" function (:arguments ("thing")) nil [5835 6089])
            ("put" code nil nil [6222 6314])
            ("in-string-p" function nil nil [6327 6581])
            ("thing-at-point--end-of-sexp" function nil nil [6583 6845])
            ("define-obsolete-function-alias" code nil nil [6847 6997])
            ("put" code nil nil [6999 7047])
            ("thing-at-point--beginning-of-sexp" function nil nil [7049 7330])
            ("define-obsolete-function-alias" code nil nil [7332 7494])
            ("put" code nil nil [7496 7556])
            ("put" code nil nil [7569 7646])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [7648 8111])
            ("put" code nil nil [8124 8170])
            ("put" code nil nil [8171 8211])
            ("put" code nil nil [8212 8252])
            ("thing-at-point-file-name-chars" variable (:default-value "-~/[:alnum:]_.${}#%,:") nil [8269 8371])
            ("put" code nil nil [8373 8503])
            ("put" code nil nil [8504 8693])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [8705 8876])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [8878 9032])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [9034 9203])
            ("thing-at-point-uri-schemes" variable (:default-value (quote ("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "magnet:" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "man:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))) nil [9205 10559])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [10561 10846])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [10848 10971])
            ("thing-at-point-newsgroup-heads" variable (:default-value (quote ("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))) nil [10973 11134])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [11136 11305])
            ("put" code nil nil [11307 11382])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [11384 12585])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12587 13096])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "pt")) nil [13098 14552])
            ("put" code nil nil [14554 14609])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [14611 17045])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [17047 17940])
            ("put" code nil nil [17942 17992])
            ("put" code nil nil [17994 18056])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [18461 19982])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [20005 20250])
            ("put" code nil nil [20493 20786])
            ("put" code nil nil [20788 21026])
            ("put" code nil nil [21040 21097])
            ("put" code nil nil [21098 21161])
            ("word-at-point" function nil nil [21176 21278])
            ("sentence-at-point" function nil nil [21280 21394])
            ("thing-at-point--read-from-whole-string" function (:arguments ("str")) nil [21396 21865])
            ("define-obsolete-function-alias" code nil nil [21867 22039])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [22041 22343])
            ("sexp-at-point" function nil nil [22360 22463])
            ("symbol-at-point" function nil nil [22479 22635])
            ("number-at-point" function nil nil [22651 22877])
            ("put" code nil nil [22879 22925])
            ("list-at-point" function (:arguments ("ignore-comment-or-string")) nil [22941 23309]))          
      :file "thingatpt.el"
      :pointmax 23338
      :fsize 23337
      :lastmodtime '(23603 24960 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easymenu" include nil nil [7440 7459])
            ("cl-lib" include nil nil [7479 7496])
            ("follow" customgroup (:user-visible-flag t) nil [7514 7624])
            ("follow-mode-hook" variable nil nil [7626 7727])
            ("follow-mode-prefix" variable (:default-value ".") nil [8119 8385])
            ("follow-mode-map" variable (:default-value (let ((mainmap (make-sparse-keymap)) (map (make-sparse-keymap))) (define-key map "" (quote follow-scroll-up)) (define-key map "\366" (quote follow-scroll-down)) (define-key map "v" (quote follow-scroll-down)) (define-key map "1" (quote follow-delete-other-windows-and-split)) (define-key map "b" (quote follow-switch-to-buffer)) (define-key map "" (quote follow-switch-to-buffer-all)) (define-key map "" (quote follow-recenter)) (define-key map "<" (quote follow-first-window)) (define-key map ">" (quote follow-last-window)) (define-key map "n" (quote follow-next-window)) (define-key map "p" (quote follow-previous-window)) (define-key mainmap follow-mode-prefix map) (define-key mainmap [remap end-of-buffer] (quote follow-end-of-buffer)) (define-key mainmap [remap scroll-bar-toolkit-scroll] (quote follow-scroll-bar-toolkit-scroll)) (define-key mainmap [remap scroll-bar-drag] (quote follow-scroll-bar-drag)) (define-key mainmap [remap scroll-bar-scroll-up] (quote follow-scroll-bar-scroll-up)) (define-key mainmap [remap scroll-bar-scroll-down] (quote follow-scroll-bar-scroll-down)) (define-key mainmap [remap mwheel-scroll] (quote follow-mwheel-scroll)) mainmap)) nil [8387 9930])
            ("follow-menu-filter" function (:arguments ("menu")) nil [10017 10177])
            ("easy-menu-add-item" code nil nil [10179 10960])
            ("follow-mode-line-text" variable (:default-value " Follow") nil [10962 11178])
            ("follow-auto" variable nil nil [11180 11490])
            ("follow-cache-command-list" variable (:default-value (quote (next-line previous-line forward-char backward-char right-char left-char))) nil [11492 11971])
            ("follow-debug" variable nil nil [11973 12088])
            ("follow-internal-force-redisplay" variable nil nil [12114 12214])
            ("follow-active-menu" variable nil nil [12216 12296])
            ("follow-inactive-menu" variable nil nil [12298 12382])
            ("follow-inside-post-command-hook-call" variable nil nil [12384 12528])
            ("follow-windows-start-end-cache" variable nil nil [12530 12618])
            ("follow-fixed-window" variable nil nil [12620 12763])
            ("follow-debug-message" function (:arguments ("args")) nil [12924 13113])
            ("dolist" code nil nil [13126 13203])
            ("turn-on-follow-mode" function nil nil [13234 13347])
            ("turn-off-follow-mode" function nil nil [13365 13481])
            ("put" code nil nil [13483 13520])
            ("define-minor-mode" code nil nil [13536 17361])
            ("follow-find-file-hook" function nil nil [17363 17499])
            ("follow-get-scrolled-point" function (:arguments ("dest" "windows")) nil [17533 19026])
            ("follow-scroll-up-arg" function (:arguments ("arg")) nil [19771 20587])
            ("follow-scroll-down-arg" function (:arguments ("arg")) nil [20589 21046])
            ("follow-scroll-up-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21063 21635])
            ("put" code nil nil [21636 21684])
            ("follow-scroll-down-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21701 22293])
            ("put" code nil nil [22294 22344])
            ("follow-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22361 23201])
            ("put" code nil nil [23202 23243])
            ("follow-scroll-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23260 24268])
            ("put" code nil nil [24269 24312])
            ("declare-function" code nil nil [24314 24370])
            ("comint-scroll-show-maximum-output" variable nil nil [24371 24413])
            ("follow-comint-scroll-to-bottom" function (:arguments ("_window")) nil [24415 25143])
            ("follow-align-compilation-windows" function nil nil [25145 25756])
            ("follow-delete-other-windows-and-split" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25785 26851])
            ("follow-switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [26853 27234])
            ("follow-switch-to-buffer-all" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [27237 27696])
            ("follow-switch-to-current-buffer-all" function (:user-visible-flag t) nil [27699 27913])
            ("follow-next-window" function (:user-visible-flag t) nil [28056 28303])
            ("follow-previous-window" function (:user-visible-flag t) nil [28306 28561])
            ("follow-first-window" function (:user-visible-flag t) nil [28564 28723])
            ("follow-last-window" function (:user-visible-flag t) nil [28726 28893])
            ("follow-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28907 29853])
            ("follow-redraw" function (:user-visible-flag t) nil [29856 30192])
            ("follow-end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30213 30872])
            ("follow--window-sorter" function (:arguments ("w1" "w2")) nil [30887 31296])
            ("follow-all-followers" function (:arguments ("win")) nil [31298 31789])
            ("follow-split-followers" function (:arguments ("windows" "win")) nil [31791 32218])
            ("follow-calc-win-end" function (:arguments ("win")) nil [32220 32899])
            ("follow-calc-win-start" function (:arguments ("windows" "pos" "win")) nil [32901 33561])
            ("follow-cache-valid-p" function (:arguments ("windows")) nil [33692 34208])
            ("follow-windows-start-end" function (:arguments ("windows")) nil [34210 34708])
            ("follow-pos-visible" function (:arguments ("pos" "win" "win-start-end")) nil [34710 34975])
            ("follow-windows-aligned-p" function (:arguments ("win-start-end")) nil [35157 35589])
            ("follow-point-visible-all-windows-p" function (:arguments ("win-start-end")) nil [35677 36042])
            ("follow-update-window-start" function (:arguments ("win")) nil [36560 36883])
            ("follow-select-if-visible" function (:arguments ("dest" "win-start-end")) nil [36885 37440])
            ("follow-select-if-end-visible" function (:arguments ("win-start-end")) nil [37837 38560])
            ("follow-select-if-visible-from-first" function (:arguments ("dest" "windows")) nil [38806 39972])
            ("follow-start-end-invalid" variable (:default-value t) nil [40258 40366])
            ("make-variable-buffer-local" code nil nil [40367 40421])
            ("follow-redisplay" function (:arguments ("windows" "win" "preserve-win")) nil [40423 41941])
            ("follow-estimate-first-window-start" function (:arguments ("windows" "win" "start")) nil [41943 42414])
            ("follow-calculate-first-window-start-from-above" function (:arguments ("windows" "guess" "win" "start")) nil [42535 43083])
            ("follow-calculate-first-window-start-from-below" function (:arguments ("windows" "guess" "win" "start")) nil [43205 44334])
            ("follow-avoid-tail-recenter" function (:arguments ("_rest")) nil [44624 45628])
            ("follow-post-command-hook" function nil nil [46105 46606])
            ("follow-adjust-window" function (:arguments ("win")) nil [46608 52739])
            ("follow-maximize-region" function (:arguments ("win" "windows" "win-start-end")) nil [53008 53526])
            ("declare-function" code nil nil [53697 53762])
            ("declare-function" code nil nil [53763 53818])
            ("declare-function" code nil nil [53819 53879])
            ("declare-function" code nil nil [53880 53942])
            ("declare-function" code nil nil [53943 53992])
            ("follow-scroll-bar-toolkit-scroll" function (:arguments ("event")) nil [53994 54134])
            ("follow-scroll-bar-drag" function (:arguments ("event")) nil [54136 54256])
            ("follow-scroll-bar-scroll-up" function (:arguments ("event")) nil [54258 54388])
            ("follow-scroll-bar-scroll-down" function (:arguments ("event")) nil [54390 54524])
            ("follow-mwheel-scroll" function (:arguments ("event")) nil [54526 54642])
            ("follow-redraw-after-event" function (:arguments ("event")) nil [54644 55212])
            ("follow-window-size-change" function (:arguments ("frame")) nil [55873 57207])
            ("add-hook" code nil nil [57209 57274])
            ("follow-after-change" function (:arguments ("_beg" "_end" "_old-len")) nil [57600 57743])
            ("follow-window-start" function (:arguments ("window")) nil [57745 58121])
            ("follow-window-end" function (:arguments ("window" "update")) nil [58123 58938])
            ("follow-set-window-start" function (:arguments ("window" "pos" "noforce")) nil [58940 59466])
            ("follow-pos-visible-in-window-p" function (:arguments ("pos" "window" "partially")) nil [59468 61421])
            ("follow-move-to-window-line" function (:arguments ("arg")) nil [61423 63578])
            ("follow" package nil nil [64390 64407]))          
      :file "follow.el"
      :pointmax 65058
      :fsize 65057
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 7496 . 7497) (symbol 7461 . 7478) (open-paren 7460 . 7461)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1005 1070])
            ("standard-indent" variable (:default-value 4) nil [1072 1206])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1208 1594])
            ("tab-always-indent" variable (:default-value t) nil [1596 2351])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2354 3473])
            ("indent--default-inside-comment" function nil nil [3475 4034])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4036 6747])
            ("indent--funcall-widened" function (:arguments ("func")) nil [6749 6839])
            ("insert-tab" function (:arguments ("arg")) nil [6841 7133])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [7135 7620])
            ("indent-rigidly-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [left] (quote indent-rigidly-left)) (define-key map [right] (quote indent-rigidly-right)) (define-key map [S-left] (quote indent-rigidly-left-to-tab-stop)) (define-key map [S-right] (quote indent-rigidly-right-to-tab-stop)) map)) nil [7622 8045])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [8047 9928])
            ("indent-rigidly--pop-undo" function nil nil [9930 10217])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10219 10467])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10469 10719])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10721 11119])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [11121 11517])
            ("indent-line-to" function (:arguments ("column")) nil [11519 12145])
            ("current-left-margin" function nil nil [12147 12551])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [12553 13468])
            ("indent-to-left-margin" function nil nil [13568 13879])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [13881 14445])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14447 15322])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [15324 15883])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [15885 16553])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16555 17389])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17391 17872])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17874 18527])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [18529 19060])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [19062 20076])
            ("indent-region-function" variable (:default-value (function indent-region-line-by-line)) nil [20078 20278])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [20280 22343])
            ("indent-region-line-by-line" function (:arguments ("start" "end")) nil [22345 22833])
            ("define-obsolete-function-alias" code nil nil [22835 22935])
            ("indent-relative-first-indent-point" function (:user-visible-flag t) nil [22937 23234])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("first-only" "unindented-ok"))
                nil [23236 24860])
            ("tab-stop-list" variable nil nil [24862 25420])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [25422 25653])
            ("edit-tab-stops-buffer" variable nil nil [25655 25804])
            ("edit-tab-stops" function (:user-visible-flag t) nil [25806 26829])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [26831 27231])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [27233 28232])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [28234 28474])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [28476 28905])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [28907 29767])
            ("define-key" code nil nil [29769 29821])
            ("define-key" code nil nil [29822 29865])
            ("define-key" code nil nil [29866 29909])
            ("define-key" code nil nil [29910 29951]))          
      :file "indent.el"
      :pointmax 29977
      :fsize 29976
      :lastmodtime '(23727 39260 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal-lisp-face-attributes" variable (:default-value [nil :family :foundry :swidth :height :weight :slant :underline :inverse :foreground :background :stipple :overline :strike :box :font :inherit :fontset :vector]) nil [2615 2826])
            ("face-attrs-more-relative-p" function (:arguments ("attrs1" "attrs2")) nil [2828 3869])
            ("face-remap-order" function (:arguments ("entry")) nil [3871 4150])
            ("face-remap-add-relative" function (:arguments ("face" "specs")) nil [4167 5780])
            ("face-remap-remove-relative" function (:arguments ("cookie")) nil [5782 6480])
            ("face-remap-reset-base" function (:arguments ("face")) nil [6497 7288])
            ("face-remap-set-base" function (:arguments ("face" "specs")) nil [7343 8604])
            ("text-scale-mode-step" variable (:default-value 1.2) nil [8696 8906])
            ("text-scale-mode-remapping" variable nil nil [8956 8994])
            ("make-variable-buffer-local" code nil nil [8995 9050])
            ("text-scale-mode-lighter" variable (:default-value "+0") nil [9122 9159])
            ("make-variable-buffer-local" code nil nil [9160 9213])
            ("text-scale-mode-amount" variable nil nil [9290 9323])
            ("make-variable-buffer-local" code nil nil [9324 9376])
            ("define-minor-mode" code nil nil [9378 10536])
            ("text-scale-min-amount" function nil nil [10538 10899])
            ("text-scale-max-amount" function nil nil [10901 11273])
            ("text-scale-set" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [11290 11877])
            ("text-scale-increase" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [11894 12817])
            ("text-scale-decrease" function
               (:user-visible-flag t
                :arguments ("dec"))
                nil [12834 13043])
            ("text-scale-adjust" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [13348 15176])
            ("buffer-face-mode-face" variable (:default-value (quote variable-pitch)) nil [15274 15650])
            ("buffer-face-mode-remapping" variable nil nil [15702 15741])
            ("make-variable-buffer-local" code nil nil [15742 15798])
            ("define-minor-mode" code nil nil [15815 16448])
            ("buffer-face-set" function
               (:user-visible-flag t
                :arguments ("specs"))
                nil [16465 17209])
            ("buffer-face-toggle" function
               (:user-visible-flag t
                :arguments ("specs"))
                nil [17226 18217])
            ("buffer-face-mode-invoke" function (:arguments ("specs" "arg" "interactive")) nil [18219 19257])
            ("variable-pitch-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19368 19735])
            ("face-remap" package nil nil [19738 19759]))          
      :file "face-remap.el"
      :pointmax 19789
      :fsize 19788
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tabulated-list" include nil nil [1117 1142])
            ("Buffer-menu" customgroup (:user-visible-flag t) nil [1144 1252])
            ("Buffer-menu-marker-char" variable (:default-value 62) nil [1254 1332])
            ("Buffer-menu-del-char" variable (:default-value 68) nil [1334 1415])
            ("Buffer-menu-use-header-line" variable (:default-value t) nil [1417 1571])
            ("buffer-menu-buffer" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [1573 1693])
            ("put" code nil nil [1694 1751])
            ("Buffer-menu-buffer+size-width" variable nil nil [1753 2198])
            ("make-obsolete-variable" code nil nil [2200 2337])
            ("Buffer-menu-name-width" variable (:default-value 19) nil [2339 2484])
            ("Buffer-menu-size-width" variable (:default-value 7) nil [2486 2630])
            ("Buffer-menu-mode-width" variable (:default-value 16) nil [2632 2757])
            ("Buffer-menu-use-frame-buffer-list" variable (:default-value t) nil [2759 3160])
            ("Buffer-menu-files-only" variable nil nil [3162 3335])
            ("make-variable-buffer-local" code nil nil [3336 3388])
            ("Buffer-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "v" (quote Buffer-menu-select)) (define-key map "2" (quote Buffer-menu-2-window)) (define-key map "1" (quote Buffer-menu-1-window)) (define-key map "f" (quote Buffer-menu-this-window)) (define-key map "e" (quote Buffer-menu-this-window)) (define-key map "" (quote Buffer-menu-this-window)) (define-key map "o" (quote Buffer-menu-other-window)) (define-key map "" (quote Buffer-menu-switch-other-window)) (define-key map "s" (quote Buffer-menu-save)) (define-key map "d" (quote Buffer-menu-delete)) (define-key map "k" (quote Buffer-menu-delete)) (define-key map "" (quote Buffer-menu-delete)) (define-key map "" (quote Buffer-menu-delete-backwards)) (define-key map "x" (quote Buffer-menu-execute)) (define-key map " " (quote next-line)) (define-key map "" (quote Buffer-menu-backup-unmark)) (define-key map "~" (quote Buffer-menu-not-modified)) (define-key map "u" (quote Buffer-menu-unmark)) (define-key map "\377" (quote Buffer-menu-unmark-all-buffers)) (define-key map "U" (quote Buffer-menu-unmark-all)) (define-key map "m" (quote Buffer-menu-mark)) (define-key map "t" (quote Buffer-menu-visit-tags-table)) (define-key map "%" (quote Buffer-menu-toggle-read-only)) (define-key map "b" (quote Buffer-menu-bury)) (define-key map "V" (quote Buffer-menu-view)) (define-key map "T" (quote Buffer-menu-toggle-files-only)) (define-key map (kbd "M-s a C-s") (quote Buffer-menu-isearch-buffers)) (define-key map (kbd "M-s a M-C-s") (quote Buffer-menu-isearch-buffers-regexp)) (define-key map (kbd "M-s a C-o") (quote Buffer-menu-multi-occur)) (define-key map [mouse-2] (quote Buffer-menu-mouse-select)) (define-key map [follow-link] (quote mouse-face)) (define-key map [menu-bar Buffer-menu-mode] (cons (purecopy "Buffer-Menu") menu-map)) (bindings--define-key menu-map [quit] (quote (menu-item "Quit" quit-window :help "Remove the buffer menu from the display"))) (bindings--define-key menu-map [rev] (quote (menu-item "Refresh" revert-buffer :help "Refresh the *Buffer List* buffer contents"))) (bindings--define-key menu-map [s0] menu-bar-separator) (bindings--define-key menu-map [tf] (quote (menu-item "Show Only File Buffers" Buffer-menu-toggle-files-only :button (:toggle . Buffer-menu-files-only) :help "Toggle whether the current buffer-menu displays only file buffers"))) (bindings--define-key menu-map [s1] menu-bar-separator) (bindings--define-key menu-map [sel] (quote (menu-item "Select Marked" Buffer-menu-select :help "Select this line's buffer; also display buffers marked with `>'"))) (bindings--define-key menu-map [bm2] (quote (menu-item "Select Two" Buffer-menu-2-window :help "Select this line's buffer, with previous buffer in second window"))) (bindings--define-key menu-map [bm1] (quote (menu-item "Select Current" Buffer-menu-1-window :help "Select this line's buffer, alone, in full frame"))) (bindings--define-key menu-map [ow] (quote (menu-item "Select in Other Window" Buffer-menu-other-window :help "Select this line's buffer in other window, leaving buffer menu visible"))) (bindings--define-key menu-map [tw] (quote (menu-item "Select in Current Window" Buffer-menu-this-window :help "Select this line's buffer in this window"))) (bindings--define-key menu-map [s2] menu-bar-separator) (bindings--define-key menu-map [is] (quote (menu-item "Regexp Isearch Marked Buffers..." Buffer-menu-isearch-buffers-regexp :help "Search for a regexp through all marked buffers using Isearch"))) (bindings--define-key menu-map [ir] (quote (menu-item "Isearch Marked Buffers..." Buffer-menu-isearch-buffers :help "Search for a string through all marked buffers using Isearch"))) (bindings--define-key menu-map [mo] (quote (menu-item "Multi Occur Marked Buffers..." Buffer-menu-multi-occur :help "Show lines matching a regexp in marked buffers using Occur"))) (bindings--define-key menu-map [s3] menu-bar-separator) (bindings--define-key menu-map [by] (quote (menu-item "Bury" Buffer-menu-bury :help "Bury the buffer listed on this line"))) (bindings--define-key menu-map [vt] (quote (menu-item "Set Unmodified" Buffer-menu-not-modified :help "Mark buffer on this line as unmodified (no changes to save)"))) (bindings--define-key menu-map [ex] (quote (menu-item "Execute" Buffer-menu-execute :help "Save and/or delete buffers marked with s or k commands"))) (bindings--define-key menu-map [s4] menu-bar-separator) (bindings--define-key menu-map [delb] (quote (menu-item "Mark for Delete and Move Backwards" Buffer-menu-delete-backwards :help "Mark buffer on this line to be deleted by x command and move up one line"))) (bindings--define-key menu-map [del] (quote (menu-item "Mark for Delete" Buffer-menu-delete :help "Mark buffer on this line to be deleted by x command"))) (bindings--define-key menu-map [sv] (quote (menu-item "Mark for Save" Buffer-menu-save :help "Mark buffer on this line to be saved by x command"))) (bindings--define-key menu-map [umk] (quote (menu-item "Unmark" Buffer-menu-unmark :help "Cancel all requested operations on buffer on this line and move down"))) (bindings--define-key menu-map [umkab] (quote (menu-item "Remove marks..." Buffer-menu-unmark-all-buffers :help "Cancel a requested operation on all buffers"))) (bindings--define-key menu-map [umka] (quote (menu-item "Unmark all" Buffer-menu-unmark-all :help "Cancel all requested operations on buffers"))) (bindings--define-key menu-map [mk] (quote (menu-item "Mark" Buffer-menu-mark :help "Mark buffer on this line for being displayed by v command"))) map)) nil [3390 9249])
            ("define-obsolete-variable-alias" code nil nil [9251 9338])
            ("define-derived-mode" code nil nil [9340 12012])
            ("buffer-menu" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12014 12963])
            ("buffer-menu-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12965 13465])
            ("list-buffers" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13482 13920])
            ("Buffer-menu-toggle-files-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13922 14434])
            ("defalias" code nil nil [14436 14485])
            ("Buffer-menu-buffer" function (:arguments ("error-if-non-existent-p")) nil [14489 15003])
            ("Buffer-menu-no-header" function nil nil [15005 15198])
            ("Buffer-menu-beginning" function nil nil [15200 15316])
            ("Buffer-menu-mark" function (:user-visible-flag t) nil [15369 15644])
            ("Buffer-menu-unmark" function
               (:user-visible-flag t
                :arguments ("backup"))
                nil [15646 15878])
            ("Buffer-menu-unmark-all-buffers" function
               (:user-visible-flag t
                :arguments ("mark"))
                nil [15880 16566])
            ("Buffer-menu-unmark-all" function (:user-visible-flag t) nil [16568 16704])
            ("Buffer-menu-backup-unmark" function (:user-visible-flag t) nil [16706 16875])
            ("Buffer-menu--unmark" function nil nil [16877 17113])
            ("Buffer-menu-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17115 17847])
            ("Buffer-menu-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17849 18173])
            ("Buffer-menu-save" function (:user-visible-flag t) nil [18175 18448])
            ("Buffer-menu-not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18450 18794])
            ("Buffer-menu-execute" function (:user-visible-flag t) nil [18796 19799])
            ("Buffer-menu-select" function (:user-visible-flag t) nil [19801 20596])
            ("Buffer-menu-marked-buffers" function (:arguments ("unmark")) nil [20598 21025])
            ("Buffer-menu-isearch-buffers" function (:user-visible-flag t) nil [21027 21202])
            ("Buffer-menu-isearch-buffers-regexp" function (:user-visible-flag t) nil [21204 21393])
            ("Buffer-menu-multi-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [21395 21623])
            ("Buffer-menu-visit-tags-table" function (:user-visible-flag t) nil [21627 21903])
            ("Buffer-menu-1-window" function (:user-visible-flag t) nil [21905 22105])
            ("Buffer-menu-this-window" function (:user-visible-flag t) nil [22107 22247])
            ("Buffer-menu-other-window" function (:user-visible-flag t) nil [22249 22433])
            ("Buffer-menu-switch-other-window" function (:user-visible-flag t) nil [22435 22627])
            ("Buffer-menu-2-window" function (:user-visible-flag t) nil [22629 22940])
            ("Buffer-menu-toggle-read-only" function (:user-visible-flag t) nil [22942 23307])
            ("Buffer-menu-bury" function (:user-visible-flag t) nil [23309 23791])
            ("Buffer-menu-view" function (:user-visible-flag t) nil [23793 23917])
            ("Buffer-menu-view-other-window" function (:user-visible-flag t) nil [23919 24087])
            ("list-buffers-noselect" function (:arguments ("files-only" "buffer-list")) nil [24152 24818])
            ("Buffer-menu-mouse-select" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [24820 25242])
            ("list-buffers--refresh" function (:arguments ("buffer-list" "old-buffer")) nil [25244 27053])
            ("tabulated-list-entry-size->" function (:arguments ("entry1" "entry2")) nil [27055 27201])
            ("Buffer-menu--pretty-name" function (:arguments ("name")) nil [27203 27335])
            ("Buffer-menu--pretty-file-name" function (:arguments ("file")) nil [27337 27480]))          
      :file "buff-menu.el"
      :pointmax 27509
      :fsize 27508
      :lastmodtime '(23624 29140 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [976 993])
            ("cl-defgeneric" code nil nil [996 1260])
            ("cl-generic-define-context-rewriter" code nil nil [1262 1520])
            ("cl-defmethod" code nil nil [1522 1921])
            ("window-system-default-frame-alist" variable nil nil [1923 2370])
            ("display-format-alist" variable nil nil [2372 2624])
            ("initial-frame-alist" variable nil nil [2816 4049])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4051 4756])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4758 5505])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5507 5803])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5805 6065])
            ("handle-move-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6067 6317])
            ("frame-initial-frame" variable nil nil [6813 6845])
            ("frame-initial-frame-alist" variable nil nil [6924 6958])
            ("frame-initial-geometry-arguments" variable nil nil [6960 7005])
            ("frame-initialize" function nil nil [7194 8726])
            ("frame-notice-user-settings" variable (:default-value t) nil [8728 8837])
            ("declare-function" code nil nil [8839 8898])
            ("declare-function" code nil nil [8899 8971])
            ("defalias" code nil nil [8973 9023])
            ("frame-notice-user-settings" function nil nil [9220 20335])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [20337 20538])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20605 21780])
            ("get-other-frame" function nil nil [21782 22040])
            ("next-multiframe-window" function (:user-visible-flag t) nil [22042 22300])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [22302 22566])
            ("window-system-for-display" function (:arguments ("display")) nil [22568 23063])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [23065 23334])
            ("declare-function" code nil nil [23336 23393])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [23395 24747])
            ("make-frame-command" function (:user-visible-flag t) nil [24749 25059])
            ("before-make-frame-hook" variable nil nil [25061 25158])
            ("after-make-frame-functions" variable nil nil [25160 25326])
            ("after-setting-font-hook" variable nil nil [25328 25424])
            ("define-obsolete-function-alias" code nil nil [25454 25516])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [25518 25628])
            ("x-display-name" variable nil nil [25630 25653])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25655 29566])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29568 29867])
            ("minibuffer-frame-list" function nil nil [29869 30062])
            ("get-device-terminal" function (:arguments ("device")) nil [30114 30867])
            ("frames-on-display-list" function (:arguments ("device")) nil [30869 31311])
            ("framep-on-display" function (:arguments ("terminal")) nil [31313 31752])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31754 32615])
            ("declare-function" code nil nil [32617 32688])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32690 33800])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33802 34912])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34914 35144])
            ("suspend-frame" function (:user-visible-flag t) nil [35146 35623])
            ("make-frame-names-alist" function nil nil [35625 36031])
            ("frame-name-history" variable nil nil [36033 36064])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36065 36910])
            ("frame-background-mode" variable nil nil [36937 37613])
            ("declare-function" code nil nil [37615 37709])
            ("declare-function" code nil nil [37754 37824])
            ("inhibit-frame-set-background-mode" variable nil nil [37826 37872])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37874 40772])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [40774 41290])
            ("current-frame-configuration" function nil nil [41321 41917])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41919 43914])
            ("frame-height" function (:arguments ("frame")) nil [44009 44675])
            ("frame-width" function (:arguments ("frame")) nil [44677 44882])
            ("defalias" code nil nil [44884 44943])
            ("defalias" code nil nil [44944 44993])
            ("defalias" code nil nil [44994 45045])
            ("frame-inner-width" function (:arguments ("frame")) nil [45047 45297])
            ("frame-inner-height" function (:arguments ("frame")) nil [45299 45552])
            ("frame-outer-width" function (:arguments ("frame")) nil [45554 45811])
            ("frame-outer-height" function (:arguments ("frame")) nil [45813 46072])
            ("declare-function" code nil nil [46074 46179])
            ("define-obsolete-function-alias" code nil nil [46181 46254])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [46256 49572])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [49574 49825])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49827 50572])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50574 51319])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51321 51807])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [51809 52275])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [52277 52659])
            ("define-minor-mode" code nil nil [52661 53541])
            ("define-minor-mode" code nil nil [53543 54384])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [54386 54762])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [54764 55486])
            ("declare-function" code nil nil [55488 55550])
            ("declare-function" code nil nil [55551 55617])
            ("declare-function" code nil nil [55618 55682])
            ("frame-geometry" function (:arguments ("frame")) nil [55684 58163])
            ("frame--size-history" function (:arguments ("frame")) nil [58165 58993])
            ("declare-function" code nil nil [58995 59059])
            ("declare-function" code nil nil [59060 59128])
            ("declare-function" code nil nil [59129 59195])
            ("frame-edges" function (:arguments ("frame" "type")) nil [59197 60183])
            ("declare-function" code nil nil [60185 60248])
            ("declare-function" code nil nil [60249 60308])
            ("declare-function" code nil nil [60309 60370])
            ("mouse-absolute-pixel-position" function nil nil [60372 60922])
            ("declare-function" code nil nil [60924 60995])
            ("declare-function" code nil nil [60996 61069])
            ("declare-function" code nil nil [61070 61139])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [61141 61642])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [61644 62334])
            ("frame-monitor-attribute" function (:arguments ("attribute" "frame" "x" "y")) nil [62336 63678])
            ("frame-monitor-geometry" function (:arguments ("frame" "x" "y")) nil [63680 64491])
            ("frame-monitor-workarea" function (:arguments ("frame" "x" "y")) nil [64493 65298])
            ("declare-function" code nil nil [65300 65368])
            ("declare-function" code nil nil [65369 65441])
            ("declare-function" code nil nil [65442 65512])
            ("frame-list-z-order" function (:arguments ("display")) nil [65514 66306])
            ("declare-function" code nil nil [66308 66383])
            ("declare-function" code nil nil [66384 66463])
            ("declare-function" code nil nil [66464 66541])
            ("frame-restack" function (:arguments ("frame1" "frame2" "above")) nil [66543 67904])
            ("frame-size-changed-p" function (:arguments ("frame")) nil [67906 69068])
            ("declare-function" code nil nil [69555 69598])
            ("display-mouse-p" function (:arguments ("display")) nil [69600 70391])
            ("display-popup-menus-p" function (:arguments ("display")) nil [70393 70679])
            ("display-graphic-p" function (:arguments ("display")) nil [70681 71138])
            ("display-images-p" function (:arguments ("display")) nil [71140 71418])
            ("defalias" code nil nil [71420 71472])
            ("defalias" code nil nil [71473 71524])
            ("display-selections-p" function (:arguments ("display")) nil [71526 72154])
            ("declare-function" code nil nil [72156 72222])
            ("display-screens" function (:arguments ("display")) nil [72224 72613])
            ("declare-function" code nil nil [72615 72686])
            ("display-pixel-height" function (:arguments ("display")) nil [72688 73421])
            ("declare-function" code nil nil [73423 73493])
            ("display-pixel-width" function (:arguments ("display")) nil [73495 74223])
            ("display-mm-dimensions-alist" variable nil nil [74225 74843])
            ("declare-function" code nil nil [74845 74913])
            ("display-mm-height" function (:arguments ("display")) nil [74915 75794])
            ("declare-function" code nil nil [75796 75863])
            ("display-mm-width" function (:arguments ("display")) nil [75865 76740])
            ("declare-function" code nil nil [76742 76814])
            ("display-backing-store" function (:arguments ("display")) nil [76919 77437])
            ("declare-function" code nil nil [77439 77508])
            ("display-save-under" function (:arguments ("display")) nil [77510 77907])
            ("declare-function" code nil nil [77909 77974])
            ("display-planes" function (:arguments ("display")) nil [77976 78417])
            ("declare-function" code nil nil [78419 78489])
            ("display-color-cells" function (:arguments ("display")) nil [78491 78936])
            ("declare-function" code nil nil [78938 79009])
            ("display-visual-class" function (:arguments ("display")) nil [79011 79601])
            ("declare-function" code nil nil [79603 79689])
            ("declare-function" code nil nil [79690 79779])
            ("declare-function" code nil nil [79780 79868])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [79870 82395])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [82427 84297])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [84299 85555])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [85558 87187])
            ("define-obsolete-variable-alias" code nil nil [87232 87318])
            ("window-divider" customgroup (:user-visible-flag t) nil [87343 87446])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [87448 88312])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [88314 88444])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [88446 89096])
            ("window-divider-default-right-width" variable (:default-value 6) nil [89098 89739])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [89741 91033])
            ("define-minor-mode" code nil nil [91035 91615])
            ("blink-cursor-idle-timer" variable nil nil [91638 91813])
            ("blink-cursor-timer" variable nil nil [91815 91977])
            ("cursor" customgroup (:user-visible-flag t) nil [91979 92064])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [92066 92388])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [92390 92638])
            ("blink-cursor-blinks" variable (:default-value 10) nil [92640 92850])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [92852 92965])
            ("blink-cursor--start-idle-timer" function nil nil [92967 93515])
            ("blink-cursor--start-timer" function nil nil [93517 93802])
            ("blink-cursor-start" function nil nil [93804 94407])
            ("blink-cursor-timer-function" function nil nil [94409 95065])
            ("blink-cursor-end" function nil nil [95068 95463])
            ("blink-cursor-suspend" function nil nil [95465 95820])
            ("blink-cursor-check" function nil nil [95822 96157])
            ("define-obsolete-variable-alias" code nil nil [96159 96231])
            ("define-minor-mode" code nil nil [96233 97349])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [97388 98390])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [98392 99827])
            ("define-key" code nil nil [99849 99897])
            ("define-key" code nil nil [99898 99947])
            ("define-key" code nil nil [99948 99990])
            ("define-key" code nil nil [99991 100032])
            ("define-key" code nil nil [100033 100087])
            ("define-key" code nil nil [100088 100148])
            ("define-key" code nil nil [100149 100209])
            ("define-obsolete-variable-alias" code nil nil [100259 100341])
            ("make-variable-buffer-local" code nil nil [100343 100397])
            ("make-obsolete-variable" code nil nil [100424 100518])
            ("mapc" code nil nil [100919 101506])
            ("frame" package nil nil [101508 101524]))          
      :file "frame.el"
      :pointmax 101549
      :fsize 101548
      :lastmodtime '(23727 39260 0 0)
      :unmatched-syntax '((close-paren 993 . 994) (symbol 958 . 975) (open-paren 957 . 958)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable nil nil [1098 2954])
            ("put" code nil nil [2970 3019])
            ("make-variable-buffer-local" code nil nil [3020 3068])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3070 3270])
            ("font-lock-major-mode" variable nil nil [3337 3366])
            ("define-minor-mode" code nil nil [3368 6246])
            ("font-lock-change-mode" function nil nil [6341 6395])
            ("font-lock-defontify" function nil nil [6397 6831])
            ("font-lock-set-defaults" variable nil nil [6833 6864])
            ("font-lock-default-function" function (:arguments ("mode")) nil [6865 7945])
            ("turn-on-font-lock" function nil nil [7947 8088])
            ("font-lock-global-modes" variable (:default-value t) nil [11013 11858])
            ("turn-on-font-lock-if-desired" function nil nil [11860 12174])
            ("define-globalized-minor-mode" code nil nil [12176 12487])
            ("font-core" package nil nil [12524 12544]))          
      :file "font-core.el"
      :pointmax 12573
      :fsize 12572
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [5772 5788])
            ("format-spec" include nil nil [5789 5811])
            ("image-mode" include nil nil [5812 5833])
            ("widget" include nil nil [5834 5851])
            ("wid-edit" include nil nil [5894 5913])
            ("cl-lib" include nil nil [5874 5891])
            ("image-dired" customgroup (:user-visible-flag t) nil [5916 6092])
            ("image-dired-dir" variable (:default-value (locate-user-emacs-file "image-dired/")) nil [6094 6251])
            ("image-dired-thumbnail-storage" variable (:default-value (quote use-image-dired-dir)) nil [6253 7265])
            ("image-dired-db-file" variable (:default-value (expand-file-name ".image-dired_db" image-dired-dir)) nil [7267 7462])
            ("image-dired-temp-image-file" variable (:default-value (expand-file-name ".image-dired_temp" image-dired-dir)) nil [7464 7655])
            ("image-dired-gallery-dir" variable (:default-value (expand-file-name ".image-dired_gallery" image-dired-dir)) nil [7657 7961])
            ("image-dired-gallery-image-root-url" variable (:default-value "http://your.own.server/image-diredpics") nil [7963 8258])
            ("image-dired-gallery-thumb-image-root-url" variable (:default-value "http://your.own.server/image-diredthumbs") nil [8260 8563])
            ("image-dired-cmd-create-thumbnail-program" variable (:default-value "convert") nil [8565 8769])
            ("image-dired-cmd-create-thumbnail-options" variable (:default-value (quote ("-size" "%wx%h" "%f[0]" "-resize" "%wx%h>" "-strip" "jpeg:%t"))) nil [8771 9343])
            ("image-dired-cmd-create-temp-image-program" variable (:default-value "convert") nil [9345 9555])
            ("image-dired-cmd-create-temp-image-options" variable (:default-value (quote ("-size" "%wx%h" "%f[0]" "-resize" "%wx%h>" "-strip" "jpeg:%t"))) nil [9557 10162])
            ("image-dired-cmd-pngnq-program" variable (:default-value (or (executable-find "pngnq") (executable-find "pngnq-s9"))) nil [10164 10497])
            ("image-dired-cmd-pngnq-options" variable (:default-value (quote ("-f" "%t"))) nil [10499 10784])
            ("image-dired-cmd-pngcrush-program" variable (:default-value (executable-find "pngcrush")) nil [10786 11119])
            ("image-dired-cmd-pngcrush-options" variable (:default-value (\` ("-q" "-text" "b" "Description" "Thumbnail of file://%f" "-text" "b" "Software" (\, (emacs-version)) "-text" "b" "Thumb::MTime" "%m" "-text" "b" "Thumb::URI" "file://%f" "%q" "%t"))) nil [11121 11855])
            ("image-dired-cmd-optipng-program" variable (:default-value (executable-find "optipng")) nil [11857 12062])
            ("image-dired-cmd-optipng-options" variable (:default-value (quote ("-o5" "%t"))) nil [12064 12385])
            ("image-dired-cmd-create-standard-thumbnail-options" variable (:default-value (append (quote ("-size" "%wx%h" "%f[0]")) (unless (or image-dired-cmd-pngcrush-program image-dired-cmd-pngnq-program) (list "-set" "Thumb::MTime" "%m" "-set" "Thumb::URI" "file://%f" "-set" "Description" "Thumbnail of file://%f" "-set" "Software" (emacs-version))) (quote ("-thumbnail" "%wx%h>" "png:%t")))) nil [12387 13141])
            ("image-dired-cmd-rotate-thumbnail-program" variable (:default-value "mogrify") nil [13143 13347])
            ("image-dired-cmd-rotate-thumbnail-options" variable (:default-value (quote ("-rotate" "%d" "%t"))) nil [13349 13845])
            ("image-dired-cmd-rotate-original-program" variable (:default-value "jpegtran") nil [13847 14055])
            ("image-dired-cmd-rotate-original-options" variable (:default-value (quote ("-rotate" "%d" "-copy" "all" "-outfile" "%t" "%o"))) nil [14057 14631])
            ("image-dired-temp-rotate-image-file" variable (:default-value (expand-file-name ".image-dired_rotate_temp" image-dired-dir)) nil [14633 14821])
            ("image-dired-rotate-original-ask-before-overwrite" variable (:default-value t) nil [14823 15105])
            ("image-dired-cmd-write-exif-data-program" variable (:default-value "exiftool") nil [15107 15315])
            ("image-dired-cmd-write-exif-data-options" variable (:default-value (quote ("-%t=%v" "%f"))) nil [15317 15731])
            ("image-dired-cmd-read-exif-data-program" variable (:default-value "exiftool") nil [15733 15938])
            ("image-dired-cmd-read-exif-data-options" variable (:default-value (quote ("-s" "-s" "-s" "-%t" "%f"))) nil [15940 16324])
            ("image-dired-gallery-hidden-tags" variable (:default-value (list "private" "hidden" "pending")) nil [16326 16554])
            ("image-dired-thumb-size" variable (:default-value (cond ((eq (quote standard) image-dired-thumbnail-storage) 128) ((eq (quote standard-large) image-dired-thumbnail-storage) 256) (t 100))) nil [16556 16890])
            ("image-dired-thumb-width" variable (:default-value image-dired-thumb-size) nil [16892 17025])
            ("image-dired-thumb-height" variable (:default-value image-dired-thumb-size) nil [17027 17162])
            ("image-dired-thumb-relief" variable (:default-value 2) nil [17164 17291])
            ("image-dired-thumb-margin" variable (:default-value 2) nil [17293 17446])
            ("image-dired-line-up-method" variable (:default-value (quote dynamic)) nil [17448 18125])
            ("image-dired-thumbs-per-row" variable (:default-value 3) nil [18127 18267])
            ("image-dired-display-window-width-correction" variable (:default-value 1) nil [18269 18511])
            ("image-dired-display-window-height-correction" variable nil nil [18513 18757])
            ("image-dired-track-movement" variable (:default-value t) nil [18759 18979])
            ("image-dired-append-when-browsing" variable nil nil [18981 19537])
            ("image-dired-dired-disp-props" variable (:default-value t) nil [19539 19920])
            ("image-dired-display-properties-format" variable (:default-value "%b: %f (%t): %c") nil [19922 20230])
            ("image-dired-external-viewer" variable (:default-value (cond ((executable-find "display")) ((executable-find "xli")) ((executable-find "qiv") "qiv -t"))) nil [20232 20636])
            ("image-dired-main-image-directory" variable (:default-value "~/pics/") nil [20638 20820])
            ("image-dired-show-all-from-dir-max-files" variable (:default-value 50) nil [20822 21014])
            ("image-dired--with-db-file" function (:arguments ("body")) nil [21016 21317])
            ("image-dired-dir" function nil nil [21319 21743])
            ("image-dired-insert-image" function (:arguments ("file" "type" "relief" "margin")) nil [21745 22032])
            ("image-dired-get-thumbnail-image" function (:arguments ("file")) nil [22034 22679])
            ("image-dired-insert-thumbnail" function (:arguments ("file" "original-file-name" "associated-dired-buffer")) nil [22681 23688])
            ("image-dired-thumb-name" function (:arguments ("file")) nil [23690 25677])
            ("image-dired--check-executable-exists" function (:arguments ("executable")) nil [25679 25840])
            ("image-dired-thumb-size" function (:arguments ("dimension")) nil [25842 26242])
            ("image-dired-queue" variable nil nil [26244 26358])
            ("image-dired-queue-active-jobs" variable nil nil [26360 26450])
            ("image-dired-queue-active-limit" variable (:default-value 2) nil [26452 26586])
            ("image-dired-pngnq-thumb" function (:arguments ("spec")) nil [26588 27722])
            ("image-dired-pngcrush-thumb" function (:arguments ("spec")) nil [27724 28919])
            ("image-dired-optipng-thumb" function (:arguments ("spec")) nil [28921 29615])
            ("image-dired-create-thumb-1" function (:arguments ("original-file" "thumbnail-file")) nil [29617 32771])
            ("image-dired-thumb-queue-run" function nil nil [32773 33162])
            ("image-dired-create-thumb" function (:arguments ("original-file" "thumbnail-file")) nil [33164 33461])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33478 34971])
            ("image-dired-dired-after-readin-hook" function nil nil [34973 35564])
            ("image-dired-next-line-and-display" function (:user-visible-flag t) nil [35566 35866])
            ("image-dired-previous-line-and-display" function (:user-visible-flag t) nil [35868 36180])
            ("image-dired-toggle-append-browsing" function (:user-visible-flag t) nil [36182 36501])
            ("image-dired-mark-and-display-next" function (:user-visible-flag t) nil [36503 36806])
            ("image-dired-toggle-dired-display-properties" function (:user-visible-flag t) nil [36808 37129])
            ("image-dired-thumbnail-buffer" variable (:default-value "*image-dired*") nil [37131 37220])
            ("image-dired-create-thumbnail-buffer" function nil nil [37222 37565])
            ("image-dired-display-image-buffer" variable (:default-value "*image-dired-display-image*") nil [37567 37691])
            ("image-dired-create-display-image-buffer" function nil nil [37693 38064])
            ("image-dired-saved-window-configuration" variable nil nil [38066 38149])
            ("image-dired-dired-with-window-configuration" function
               (:user-visible-flag t
                :arguments ("dir" "arg"))
                nil [38166 39325])
            ("image-dired-restore-window-configuration" function (:user-visible-flag t) nil [39327 39703])
            ("image-dired-display-thumbs" function
               (:user-visible-flag t
                :arguments ("arg" "append" "do-not-pop"))
                nil [39720 41869])
            ("image-dired-show-all-from-dir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [41886 42760])
            ("defalias" code nil nil [42777 42831])
            ("define-obsolete-function-alias" code nil nil [42848 42907])
            ("image-dired-sane-db-file" function nil nil [42909 43619])
            ("image-dired-write-tags" function (:arguments ("file-tags")) nil [43621 44390])
            ("image-dired-remove-tag" function (:arguments ("files" "tag")) nil [44392 45415])
            ("image-dired-list-tags" function (:arguments ("file")) nil [45417 45979])
            ("image-dired-tag-files" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [45996 46415])
            ("image-dired-tag-thumbnail" function (:user-visible-flag t) nil [46417 46753])
            ("image-dired-delete-tag" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46770 47127])
            ("image-dired-tag-thumbnail-remove" function (:user-visible-flag t) nil [47129 47431])
            ("image-dired-original-file-name" function nil nil [47433 47592])
            ("image-dired-file-name-at-point" function nil nil [47594 47797])
            ("image-dired-associated-dired-buffer" function nil nil [47799 47942])
            ("image-dired-get-buffer-window" function (:arguments ("buf")) nil [47944 48126])
            ("image-dired-track-original-file" function (:user-visible-flag t) nil [48128 48795])
            ("image-dired-toggle-movement-tracking" function (:user-visible-flag t) nil [48797 49278])
            ("image-dired-track-thumbnail" function nil nil [49280 50183])
            ("image-dired-dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50185 50488])
            ("image-dired-dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50490 50809])
            ("image-dired-forward-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50811 51551])
            ("image-dired-backward-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51553 52301])
            ("image-dired-next-line" function (:user-visible-flag t) nil [52303 52753])
            ("image-dired-previous-line" function (:user-visible-flag t) nil [52756 53384])
            ("image-dired-format-properties-string" function (:arguments ("buf" "file" "props" "comment")) nil [53386 53807])
            ("image-dired-display-thumb-properties" function nil nil [53809 54455])
            ("image-dired-dired-file-marked-p" function nil nil [54457 54630])
            ("image-dired-modify-mark-on-thumb-original-file" function (:arguments ("command")) nil [54632 55561])
            ("image-dired-mark-thumb-original-file" function (:user-visible-flag t) nil [55563 55770])
            ("image-dired-unmark-thumb-original-file" function (:user-visible-flag t) nil [55772 55985])
            ("image-dired-flag-thumb-original-file" function (:user-visible-flag t) nil [55987 56207])
            ("image-dired-toggle-mark-thumb-original-file" function (:user-visible-flag t) nil [56209 56405])
            ("image-dired-jump-original-dired-buffer" function (:user-visible-flag t) nil [56407 57000])
            ("image-dired-jump-thumbnail-buffer" function (:user-visible-flag t) nil [57017 57415])
            ("image-dired-thumbnail-mode-line-up-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "g" (quote image-dired-line-up-dynamic)) (define-key map "f" (quote image-dired-line-up)) (define-key map "i" (quote image-dired-line-up-interactive)) map)) nil [57417 57873])
            ("image-dired-thumbnail-mode-tag-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "t" (quote image-dired-tag-thumbnail)) (define-key map "r" (quote image-dired-tag-thumbnail-remove)) map)) nil [57875 58223])
            ("image-dired-thumbnail-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [right] (quote image-dired-forward-image)) (define-key map [left] (quote image-dired-backward-image)) (define-key map [up] (quote image-dired-previous-line)) (define-key map [down] (quote image-dired-next-line)) (define-key map "" (quote image-dired-forward-image)) (define-key map "" (quote image-dired-backward-image)) (define-key map "" (quote image-dired-previous-line)) (define-key map "" (quote image-dired-next-line)) (define-key map "d" (quote image-dired-flag-thumb-original-file)) (define-key map [delete] (quote image-dired-flag-thumb-original-file)) (define-key map "m" (quote image-dired-mark-thumb-original-file)) (define-key map "u" (quote image-dired-unmark-thumb-original-file)) (define-key map "." (quote image-dired-track-original-file)) (define-key map [tab] (quote image-dired-jump-original-dired-buffer)) (define-key map "g" image-dired-thumbnail-mode-line-up-map) (define-key map "t" image-dired-thumbnail-mode-tag-map) (define-key map "" (quote image-dired-display-thumbnail-original-image)) (define-key map [C-return] (quote image-dired-thumbnail-display-external)) (define-key map "l" (quote image-dired-rotate-thumbnail-left)) (define-key map "r" (quote image-dired-rotate-thumbnail-right)) (define-key map "L" (quote image-dired-rotate-original-left)) (define-key map "R" (quote image-dired-rotate-original-right)) (define-key map "D" (quote image-dired-thumbnail-set-image-description)) (define-key map "" (quote image-dired-delete-char)) (define-key map " " (quote image-dired-display-next-thumbnail-original)) (define-key map (kbd "DEL") (quote image-dired-display-previous-thumbnail-original)) (define-key map "c" (quote image-dired-comment-thumbnail)) (define-key map [mouse-2] (quote image-dired-mouse-display-image)) (define-key map [mouse-1] (quote image-dired-mouse-select-thumbnail)) (define-key map [C-down-mouse-1] (quote undefined)) (define-key map [C-mouse-1] (quote image-dired-mouse-toggle-mark)) (easy-menu-define nil map "Menu for `image-dired-thumbnail-mode'." (quote ("Image-Dired" ["Quit" quit-window] ["Delete thumbnail from buffer" image-dired-delete-char] ["Remove tag from thumbnail" image-dired-tag-thumbnail-remove] ["Tag thumbnail" image-dired-tag-thumbnail] ["Comment thumbnail" image-dired-comment-thumbnail] ["Refresh thumb" image-dired-refresh-thumb] ["Dynamic line up" image-dired-line-up-dynamic] ["Line up thumbnails" image-dired-line-up] ["Rotate thumbnail left" image-dired-rotate-thumbnail-left] ["Rotate thumbnail right" image-dired-rotate-thumbnail-right] ["Rotate original left" image-dired-rotate-original-left] ["Rotate original right" image-dired-rotate-original-right] ["Toggle movement tracking on/off" image-dired-toggle-movement-tracking] ["Jump to dired buffer" image-dired-jump-original-dired-buffer] ["Track original" image-dired-track-original-file] ["Flag original for deletion" image-dired-flag-thumb-original-file] ["Unmark original" image-dired-unmark-thumb-original-file] ["Mark original" image-dired-mark-thumb-original-file] ["Display in external viewer" image-dired-thumbnail-display-external] ["Display image" image-dired-display-thumbnail-original-image]))) map)) nil [58225 62045])
            ("image-dired-display-image-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "f" (quote image-dired-display-current-image-full)) (define-key map "s" (quote image-dired-display-current-image-sized)) (define-key map "g" nil) (define-key map [remap forward-char] (quote image-forward-hscroll)) (define-key map [remap backward-char] (quote image-backward-hscroll)) (define-key map [remap right-char] (quote image-forward-hscroll)) (define-key map [remap left-char] (quote image-backward-hscroll)) (define-key map [remap previous-line] (quote image-previous-line)) (define-key map [remap next-line] (quote image-next-line)) (define-key map [remap scroll-up] (quote image-scroll-up)) (define-key map [remap scroll-down] (quote image-scroll-down)) (define-key map [remap scroll-up-command] (quote image-scroll-up)) (define-key map [remap scroll-down-command] (quote image-scroll-down)) (define-key map [remap scroll-left] (quote image-scroll-left)) (define-key map [remap scroll-right] (quote image-scroll-right)) (define-key map [remap move-beginning-of-line] (quote image-bol)) (define-key map [remap move-end-of-line] (quote image-eol)) (define-key map [remap beginning-of-buffer] (quote image-bob)) (define-key map [remap end-of-buffer] (quote image-eob)) (easy-menu-define nil map "Menu for `image-dired-display-image-mode-map'." (quote ("Image-Dired" ["Quit" quit-window] ["Display original, sized to fit" image-dired-display-current-image-sized] ["Display original, full size" image-dired-display-current-image-full]))) map)) nil [62047 63794])
            ("image-dired-display-current-image-full" function (:user-visible-flag t) nil [63796 64121])
            ("image-dired-display-current-image-sized" function (:user-visible-flag t) nil [64123 64465])
            ("define-derived-mode" code nil nil [64467 64787])
            ("define-derived-mode" code nil nil [64789 65148])
            ("image-dired-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote image-dired-dired-previous-line)) (define-key map "n" (quote image-dired-dired-next-line)) (define-key map [up] (quote image-dired-dired-previous-line)) (define-key map [down] (quote image-dired-dired-next-line)) (define-key map (kbd "C-S-n") (quote image-dired-next-line-and-display)) (define-key map (kbd "C-S-p") (quote image-dired-previous-line-and-display)) (define-key map (kbd "C-S-m") (quote image-dired-mark-and-display-next)) (define-key map "d" (quote image-dired-display-thumbs)) (define-key map [tab] (quote image-dired-jump-thumbnail-buffer)) (define-key map "i" (quote image-dired-dired-display-image)) (define-key map "x" (quote image-dired-dired-display-external)) (define-key map "a" (quote image-dired-display-thumbs-append)) (define-key map "." (quote image-dired-display-thumb)) (define-key map "c" (quote image-dired-dired-comment-files)) (define-key map "f" (quote image-dired-mark-tagged-files)) (easy-menu-define nil map "Menu for `image-dired-minor-mode'." (quote ("Image-dired" ["Copy with EXIF file name" image-dired-copy-with-exif-file-name] ["Comment files" image-dired-dired-comment-files] ["Mark tagged files" image-dired-mark-tagged-files] ["Jump to thumbnail buffer" image-dired-jump-thumbnail-buffer] ["Toggle movement tracking" image-dired-toggle-movement-tracking] ["Toggle append browsing" image-dired-toggle-append-browsing] ["Toggle display properties" image-dired-toggle-dired-display-properties] ["Display in external viewer" image-dired-dired-display-external] ["Display image" image-dired-dired-display-image] ["Display this thumbnail" image-dired-display-thumb] ["Display thumbnails append" image-dired-display-thumbs-append] ["Create thumbnails for marked files" image-dired-create-thumbs] ["Mark and display next" image-dired-mark-and-display-next] ["Display thumb for previous file" image-dired-previous-line-and-display] ["Display thumb for next file" image-dired-next-line-and-display]))) map)) nil [65150 67507])
            ("define-minor-mode" code nil nil [67524 67773])
            ("define-obsolete-function-alias" code nil nil [67790 67892])
            ("declare-function" code nil nil [67894 67959])
            ("image-dired-create-thumbs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [67961 68715])
            ("image-dired-slideshow-timer" variable nil nil [68717 68778])
            ("image-dired-slideshow-count" variable nil nil [68780 68870])
            ("image-dired-slideshow-times" variable nil nil [68872 68958])
            ("image-dired-slideshow-step" function nil nil [68960 69365])
            ("image-dired-slideshow-start" function (:user-visible-flag t) nil [69367 69890])
            ("image-dired-slideshow-stop" function (:user-visible-flag t) nil [69892 70012])
            ("image-dired-delete-char" function (:user-visible-flag t) nil [70014 70238])
            ("image-dired-display-thumbs-append" function (:user-visible-flag t) nil [70255 70411])
            ("image-dired-display-thumb" function (:user-visible-flag t) nil [70428 70588])
            ("image-dired-line-up" function (:user-visible-flag t) nil [70590 71489])
            ("image-dired-line-up-dynamic" function (:user-visible-flag t) nil [71491 71995])
            ("image-dired-line-up-interactive" function (:user-visible-flag t) nil [71997 72386])
            ("image-dired-thumbnail-display-external" function (:user-visible-flag t) nil [72388 72849])
            ("image-dired-dired-display-external" function (:user-visible-flag t) nil [72866 73116])
            ("image-dired-window-width-pixels" function (:arguments ("window")) nil [73118 73253])
            ("image-dired-window-height-pixels" function (:arguments ("window")) nil [73255 73443])
            ("image-dired-display-window" function nil nil [73445 73696])
            ("image-dired-thumbnail-window" function nil nil [73698 73943])
            ("image-dired-associated-dired-buffer-window" function nil nil [73945 74346])
            ("image-dired-display-window-width" function (:arguments ("window")) nil [74348 74533])
            ("image-dired-display-window-height" function (:arguments ("window")) nil [74535 74724])
            ("image-dired-display-image" function (:arguments ("file" "original-size")) nil [74726 76688])
            ("image-dired-display-thumbnail-original-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76690 77472])
            ("image-dired-dired-display-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77490 77882])
            ("image-dired-image-at-point-p" function nil nil [77884 78039])
            ("image-dired-rotate-thumbnail" function (:arguments ("degrees")) nil [78041 78711])
            ("image-dired-rotate-thumbnail-left" function (:user-visible-flag t) nil [78713 79108])
            ("image-dired-rotate-thumbnail-right" function (:user-visible-flag t) nil [79110 79506])
            ("image-dired-refresh-thumb" function (:user-visible-flag t) nil [79508 79823])
            ("image-dired-rotate-original" function (:arguments ("degrees")) nil [79825 81198])
            ("image-dired-rotate-original-left" function (:user-visible-flag t) nil [81200 81360])
            ("image-dired-rotate-original-right" function (:user-visible-flag t) nil [81362 81515])
            ("image-dired-get-exif-file-name" function (:arguments ("file")) nil [81517 82622])
            ("image-dired-thumbnail-set-image-description" function (:user-visible-flag t) nil [82624 83359])
            ("image-dired-set-exif-data" function (:arguments ("file" "tag-name" "tag-value")) nil [83361 83892])
            ("image-dired-get-exif-data" function (:arguments ("file" "tag-name")) nil [83894 84934])
            ("image-dired-copy-with-exif-file-name" function (:user-visible-flag t) nil [84936 86027])
            ("image-dired-display-next-thumbnail-original" function (:user-visible-flag t) nil [86029 86249])
            ("image-dired-display-previous-thumbnail-original" function (:user-visible-flag t) nil [86251 86455])
            ("image-dired-write-comments" function (:arguments ("file-comments")) nil [86457 87787])
            ("image-dired-update-property" function (:arguments ("prop" "value")) nil [87789 87997])
            ("image-dired-dired-comment-files" function (:user-visible-flag t) nil [88014 88310])
            ("image-dired-comment-thumbnail" function (:user-visible-flag t) nil [88312 88680])
            ("image-dired-read-comment" function (:arguments ("file")) nil [88682 88945])
            ("image-dired-get-comment" function (:arguments ("file")) nil [88947 89540])
            ("image-dired-mark-tagged-files" function (:user-visible-flag t) nil [89557 90900])
            ("image-dired-mouse-display-image" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [90902 91478])
            ("image-dired-mouse-select-thumbnail" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [91480 91865])
            ("image-dired-mouse-toggle-mark" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [91867 92263])
            ("image-dired-dired-display-properties" function (:user-visible-flag t) nil [92265 92845])
            ("image-dired-tag-file-list" variable nil nil [92847 92923])
            ("image-dired-file-tag-list" variable nil nil [92925 93001])
            ("image-dired-file-comment-list" variable nil nil [93003 93078])
            ("image-dired-add-to-tag-file-list" function (:arguments ("tag" "file")) nil [93080 93558])
            ("image-dired-add-to-tag-file-lists" function (:arguments ("tag" "file")) nil [93560 94839])
            ("image-dired-add-to-file-comment-list" function (:arguments ("file" "comment")) nil [94841 95470])
            ("image-dired-create-gallery-lists" function nil nil [95472 96574])
            ("image-dired-hidden-p" function (:arguments ("file")) nil [96576 96796])
            ("image-dired-gallery-generate" function (:user-visible-flag t) nil [96798 100400])
            ("image-dired-widget-list" variable nil nil [100402 100490])
            ("declare-function" code nil nil [100492 100542])
            ("image-dired-dired-edit-comment-and-tags" function (:user-visible-flag t) nil [100559 103376])
            ("image-dired-save-information-from-widgets" function nil nil [103378 104244])
            ("image-dired" package nil nil [106135 106157]))          
      :file "image-dired.el"
      :pointmax 106188
      :fsize 106187
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 5913 . 5914) (symbol 5854 . 5871) (open-paren 5853 . 5854)))
    (semanticdb-table "semanticdb-table"
      :file "format-spec.el"
      :fsize 2790
      :lastmodtime '(23603 24958 0 0))
    (semanticdb-table "semanticdb-table"
      :file "image-mode.el"
      :fsize 48482
      :lastmodtime '(23661 22986 0 0)))
  :file "!drive_c!Tools!emacs-26.2!share!emacs!26.2!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
