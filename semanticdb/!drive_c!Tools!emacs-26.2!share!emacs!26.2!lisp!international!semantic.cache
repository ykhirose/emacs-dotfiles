;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1259 1276])
            ("dos-codepage" variable nil nil [1279 1300])
            ("widget-value" function (:prototype-flag t) nil [1301 1336])
            ("mule-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "f" (quote set-buffer-file-coding-system)) (define-key map "r" (quote revert-buffer-with-coding-system)) (define-key map "F" (quote set-file-name-coding-system)) (define-key map "t" (quote set-terminal-coding-system)) (define-key map "k" (quote set-keyboard-coding-system)) (define-key map "p" (quote set-buffer-process-coding-system)) (define-key map "x" (quote set-selection-coding-system)) (define-key map "X" (quote set-next-selection-coding-system)) (define-key map "" (quote set-input-method)) (define-key map "c" (quote universal-coding-system-argument)) (define-key map "l" (quote set-language-environment)) map)) nil [1380 2115])
            ("define-key" code nil nil [2167 2208])
            ("describe-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Describe Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" describe-specified-language-support))) map)) nil [2210 2435])
            ("setup-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Set Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" setup-specified-language-environment))) map)) nil [2437 2655])
            ("set-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap "Set Coding System"))) (bindings--define-key map [set-buffer-process-coding-system] (quote (menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote make-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer"))) (bindings--define-key map [set-next-selection-coding-system] (quote (menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation"))) (bindings--define-key map [set-selection-coding-system] (quote (menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard"))) (bindings--define-key map [separator-3] menu-bar-separator) (bindings--define-key map [set-terminal-coding-system] (quote (menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output"))) (bindings--define-key map [set-keyboard-coding-system] (quote (menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input"))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [set-file-name-coding-system] (quote (menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names"))) (bindings--define-key map [revert-buffer-with-coding-system] (quote (menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system"))) (bindings--define-key map [set-buffer-file-coding-system] (quote (menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved"))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [universal-coding-system-argument] (quote (menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command"))) map)) nil [2657 4976])
            ("mule-menu-keymap" variable (:default-value (let ((map (make-sparse-keymap "Mule (Multilingual Environment)"))) (bindings--define-key map [mule-diag] (quote (menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings"))) (bindings--define-key map [list-character-sets] (quote (menu-item "List Character Sets" list-character-sets :help "Show table of available character sets"))) (bindings--define-key map [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system))) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :help "Keyboard layout for a specific input method"))) (bindings--define-key map [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map) :help "Show multilingual settings for a specific language"))) (bindings--define-key map [separator-coding-system] menu-bar-separator) (bindings--define-key map [view-hello-file] (quote (menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets"))) (bindings--define-key map [set-various-coding-system] (\` (menu-item "Set Coding Systems" (\, set-coding-system-map) :enable (default-value (quote enable-multibyte-characters))))) (bindings--define-key map [separator-input-method] menu-bar-separator) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method" describe-input-method))) (bindings--define-key map [set-input-method] (quote (menu-item "Select Input Method..." set-input-method))) (bindings--define-key map [toggle-input-method] (quote (menu-item "Toggle Input Method" toggle-input-method))) (bindings--define-key map [separator-mule] menu-bar-separator) (bindings--define-key map [set-language-environment] (\` (menu-item "Set Language Environment" (\, setup-language-environment-map)))) map)) nil [4978 7169])
            ("define-key" code nil nil [7551 7603])
            ("help-xref-mule-regexp-template" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(" "\\(coding system\\)\\|" "\\(input method\\)\\|" "\\(character set\\)\\|" "\\(charset\\)" "\\)\\s-+\\)?" "['`\342\200\230]\\(\\sw\\(\\sw\\|\\s_\\)+\\)['\342\200\231]")))
                nil [7846 8153])
            ("coding-system-change-eol-conversion" function (:arguments ("coding-system" "eol-type")) nil [8155 9394])
            ("coding-system-change-text-conversion" function (:arguments ("coding-system" "coding")) nil [9396 9946])
            ("canonicalize-coding-system-name" function (:arguments ("name")) nil [10096 10869])
            ("coding-system-from-name" function (:arguments ("name")) nil [10871 11608])
            ("toggle-enable-multibyte-characters" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11610 12413])
            ("view-hello-file" function (:user-visible-flag t) nil [12415 12688])
            ("universal-coding-system-argument" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [12690 14622])
            ("set-default-coding-systems" function (:arguments ("coding-system")) nil [14624 16540])
            ("prefer-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [16542 18461])
            ("sort-coding-systems-predicate" variable nil nil [18463 18715])
            ("sort-coding-systems" function (:arguments ("codings")) nil [18717 21402])
            ("find-coding-systems-region" function (:arguments ("from" "to")) nil [21404 22090])
            ("find-coding-systems-string" function (:arguments ("string")) nil [22092 22415])
            ("find-coding-systems-for-charsets" function (:arguments ("charsets")) nil [22417 23667])
            ("find-multibyte-characters" function (:arguments ("from" "to" "maxcount" "excludes")) nil [23669 25420])
            ("search-unencodable-char" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [25422 26172])
            ("last-coding-system-specified" variable nil nil [26174 26567])
            ("select-safe-coding-system-accept-default-p" variable nil nil [26569 26857])
            ("sanitize-coding-system-list" function (:arguments ("codings")) nil [26859 28027])
            ("select-safe-coding-system-interactively" function (:arguments ("from" "to" "codings" "unsafe" "rejected" "default")) nil [28029 33249])
            ("select-safe-coding-system" function (:arguments ("from" "to" "default-coding-system" "accept-default-p" "file")) nil [33251 42938])
            ("setq" code nil nil [42940 43008])
            ("select-message-coding-system" function nil nil [43010 44104])
            ("language-info-alist" variable nil nil [44136 46451])
            ("get-language-info" function (:arguments ("lang-env" "key")) nil [46453 46893])
            ("set-language-info" function (:arguments ("lang-env" "key" "info")) nil [46895 48043])
            ("set-language-info-internal" function (:arguments ("lang-env" "key" "info")) nil [48045 48893])
            ("set-language-info-alist" function (:arguments ("lang-env" "alist" "parents")) nil [48895 51359])
            ("read-language-name" function (:arguments ("key" "prompt" "default")) nil [51361 51956])
            ("leim" customgroup (:user-visible-flag t) nil [51991 52069])
            ("leim-list-file-name" variable
               (:constant-flag t
                :default-value "leim-list.el")
                nil [52071 52320])
            ("leim-list-header" variable
               (:constant-flag t
                :default-value (format-message ";;; %s -- list of LEIM (Library of Emacs Input Method) -*-coding: utf-8;-*-
;;
;; This file is automatically generated.
;;
;; This file contains a list of LEIM (Library of Emacs Input Method)
;; methods in the same directory as this file.  Loading this file
;; registers all the input methods in Emacs.
;;
;; Each entry has the form:
;;   (register-input-method
;;    INPUT-METHOD LANGUAGE-NAME ACTIVATE-FUNC
;;    TITLE DESCRIPTION
;;    ARG ...)
;; See the function `register-input-method' for the meanings of the arguments.
;;
;; If this directory is included in `load-path', Emacs automatically
;; loads this file at startup time.

" leim-list-file-name))
                nil [52322 53075])
            ("leim-list-entry-regexp" variable
               (:constant-flag t
                :default-value "^(register-input-method")
                nil [53077 53236])
            ("update-leim-list-functions" variable (:default-value (quote (quail-update-leim-list-file))) nil [53238 53421])
            ("update-leim-list-file" function (:arguments ("dirs")) nil [53423 53587])
            ("current-input-method" variable nil nil [53589 53727])
            ("make-variable-buffer-local" code nil nil [53728 53778])
            ("put" code nil nil [53779 53825])
            ("current-input-method-title" variable nil nil [53827 53931])
            ("make-variable-buffer-local" code nil nil [53932 53988])
            ("put" code nil nil [53989 54041])
            ("define-widget" code nil nil [54043 54337])
            ("default-input-method" variable nil nil [54339 54728])
            ("put" code nil nil [54730 54777])
            ("input-method-history" variable nil nil [54779 54967])
            ("make-variable-buffer-local" code nil nil [54968 55018])
            ("put" code nil nil [55019 55065])
            ("define-obsolete-variable-alias" code nil nil [55067 55194])
            ("deactivate-current-input-method-function" variable nil nil [55195 55561])
            ("make-variable-buffer-local" code nil nil [55562 55632])
            ("put" code nil nil [55633 55699])
            ("describe-current-input-method-function" variable nil nil [55701 55856])
            ("make-variable-buffer-local" code nil nil [55857 55925])
            ("put" code nil nil [55926 55990])
            ("input-method-alist" variable nil nil [55992 56248])
            ("put" code nil nil [56264 56313])
            ("register-input-method" function (:arguments ("input-method" "lang-env" "args")) nil [56315 58037])
            ("read-input-method-name" function (:arguments ("prompt" "default" "inhibit-null")) nil [58039 59211])
            ("activate-input-method" function (:arguments ("input-method")) nil [59213 60478])
            ("deactivate-input-method" function nil nil [60480 61143])
            ("define-obsolete-function-alias" code nil nil [61145 61238])
            ("set-input-method" function
               (:user-visible-flag t
                :arguments ("input-method" "interactive"))
                nil [61240 62309])
            ("toggle-input-method-active" variable nil nil [62311 62392])
            ("toggle-input-method" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [62394 64118])
            ("help-buffer" function (:prototype-flag t) nil [64120 64155])
            ("describe-input-method" function
               (:user-visible-flag t
                :arguments ("input-method"))
                nil [64157 65275])
            ("describe-current-input-method" function nil nil [65277 65759])
            ("read-multilingual-string" function (:arguments ("prompt" "initial-input" "input-method")) nil [65761 66685])
            ("input-method-verbose-flag" variable (:default-value (quote default)) nil [66794 67723])
            ("input-method-highlight-flag" variable (:default-value t) nil [67725 68132])
            ("input-method-activate-hook" variable nil nil [68134 68347])
            ("define-obsolete-variable-alias" code nil nil [68349 68452])
            ("input-method-deactivate-hook" variable nil nil [68454 68697])
            ("input-method-after-insert-chunk-hook" variable nil nil [68699 68854])
            ("input-method-exit-on-first-char" variable nil nil [68856 69233])
            ("input-method-use-echo-area" variable nil nil [69235 69611])
            ("input-method-exit-on-invalid-key" variable nil nil [69613 70009])
            ("set-language-environment-hook" variable nil nil [70013 70374])
            ("exit-language-environment-hook" variable nil nil [70376 70740])
            ("put" code nil nil [70742 70804])
            ("setup-specified-language-environment" function (:user-visible-flag t) nil [70806 71284])
            ("current-language-environment" variable (:default-value "English") nil [71286 72176])
            ("reset-language-environment" function (:user-visible-flag t) nil [72178 74981])
            ("reset-language-environment" code nil nil [74983 75011])
            ("set-display-table-and-terminal-coding-system" function (:arguments ("language-name" "coding-system" "display")) nil [75013 75796])
            ("set-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [75798 78047])
            ("define-widget" code nil nil [78049 78528])
            ("language-info-custom-alist" variable nil nil [78530 80333])
            ("declare-function" code nil nil [80335 80399])
            ("declare-function" code nil nil [80400 80465])
            ("standard-display-european-internal" function nil nil [80467 81830])
            ("set-language-environment-coding-systems" function (:arguments ("language-name")) nil [81832 83314])
            ("set-language-environment-input-method" function (:arguments ("language-name")) nil [83316 83732])
            ("set-language-environment-nonascii-translation" function (:arguments ("language-name")) nil [83734 84489])
            ("set-language-environment-charset" function (:arguments ("language-name")) nil [84491 85064])
            ("set-language-environment-unibyte" function (:arguments ("language-name")) nil [85066 85260])
            ("princ-list" function (:arguments ("args")) nil [85262 85448])
            ("put" code nil nil [85450 85511])
            ("describe-specified-language-support" function (:user-visible-flag t) nil [85800 86267])
            ("describe-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [86269 89745])
            ("locale-translation-file-name" variable nil nil [89762 89879])
            ("locale-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote (("aa_DJ" . "Latin-1") ("aa" . "UTF-8") ("af" . "Latin-1") ("am" "Ethiopic" utf-8) ("an" . "Latin-9") ("ar" . "Arabic") ("az" . "UTF-8") ("be" "Belarusian" cp1251) ("bg" "Bulgarian" cp1251) ("bn" "Bengali" utf-8) ("bo" . "Tibetan") ("br" . "Latin-1") ("bs" . "Latin-2") ("byn" . "UTF-8") ("ca" "Catalan" iso-8859-1) ("cs" "Czech" iso-8859-2) ("cy" "Welsh" iso-8859-14) ("da" . "Latin-1") ("de" "German" iso-8859-1) ("ee" . "Latin-4") ("el" "Greek" iso-8859-7) ("en_IN" "English" utf-8) ("en" "English" iso-8859-1) ("eo" . "Esperanto") ("es" "Spanish" iso-8859-1) ("et" . "Latin-9") ("eu" . "Latin-1") ("fa" "Persian" utf-8) ("fi" . "Latin-9") ("fj" . "Latin-1") ("fo" . "Latin-1") ("fr" "French" iso-8859-1) ("fy" . "Latin-1") ("ga" . "Latin-1") ("gd" . "Latin-9") ("gez" "Ethiopic" utf-8) ("gl" . "Latin-1") ("gu" "Gujarati" utf-8) ("gv" . "Latin-1") ("he" "Hebrew" iso-8859-8) ("hi" "Devanagari" utf-8) ("hni_IN" . "UTF-8") ("hr" "Croatian" iso-8859-2) ("hu" . "Latin-2") ("id" . "Latin-1") ("is" . "Latin-1") ("it" "Italian" iso-8859-1) ("iw" "Hebrew" iso-8859-8) ("ja" "Japanese" euc-jp) ("ka" "Georgian" georgian-ps) ("kl" . "Latin-1") ("km" "Khmer" utf-8) ("kn" "Kannada" utf-8) ("ko" "Korean" euc-kr) ("ks" . "UTF-8") ("kw" . "Latin-1") ("ky" . "UTF-8") ("la" . "Latin-1") ("lb" . "Latin-1") ("lg" . "Latin-6") ("lo" "Lao" utf-8) ("lt" "Lithuanian" iso-8859-13) ("lv" "Latvian" iso-8859-13) ("mi" . "Latin-7") ("mk" "Cyrillic-ISO" iso-8859-5) ("ml" "Malayalam" utf-8) ("mn" . "UTF-8") ("mr" "Devanagari" utf-8) ("ms" . "Latin-1") ("mt" . "Latin-3") ("my" "Burmese" utf-8) ("nb" . "Latin-1") ("ne" "Devanagari" utf-8) ("nl" "Dutch" iso-8859-1) ("nn" . "Latin-1") ("no" . "Latin-1") ("nr_ZA" . "UTF-8") ("nso_ZA" . "UTF-8") ("oc" . "Latin-1") ("om_ET" . "UTF-8") ("om" . "Latin-1") ("or" "Oriya" utf-8) ("pa" "Punjabi" utf-8) ("pl" "Polish" iso-8859-2) ("pt_BR" "Brazilian Portuguese" iso-8859-1) ("pt" . "Latin-1") ("rm" . "Latin-1") ("ro" "Romanian" iso-8859-2) ("ru_RU.koi8r" "Cyrillic-KOI8" koi8-r) ("ru_RU" "Russian" iso-8859-5) ("ru_UA" "Russian" koi8-u) ("sa" . "Devanagari") ("se" . "UTF-8") ("sh" . "Latin-2") ("si" "Sinhala" utf-8) ("sid" . "UTF-8") ("sk" "Slovak" iso-8859-2) ("sl" "Slovenian" iso-8859-2) ("so_ET" "UTF-8") ("so" "Latin-1") ("sq" . "Latin-2") ("sr" . "Latin-2") ("st" . "Latin-1") ("sv" "Swedish" iso-8859-1) ("sw" . "Latin-1") ("ta" "Tamil" utf-8) ("te" "Telugu" utf-8) ("tg" "Tajik" koi8-t) ("th_TH.tis620" "Thai" tis-620) ("th_TH.TIS-620" "Thai" tis-620) ("th_TH" "Thai" iso-8859-11) ("th" "Thai" iso-8859-11) ("ti" "Ethiopic" utf-8) ("tig_ER" . "UTF-8") ("tl" . "Latin-1") ("tn" . "Latin-9") ("tr" "Turkish" iso-8859-9) ("ts" . "Latin-1") ("tt" . "UTF-8") ("uk" "Ukrainian" koi8-u) ("ur" . "UTF-8") ("uz_UZ@cyrillic" . "UTF-8") ("uz" . "Latin-1") ("ve" . "UTF-8") ("vi" "Vietnamese" utf-8) ("wa" . "Latin-1") ("xh" . "Latin-1") ("yi" . "Windows-1255") ("zh_HK" . "Chinese-Big5") ("zh_TW" . "Chinese-Big5") ("zh_CN.GB2312" "Chinese-GB") ("zh_CN.GBK" "Chinese-GBK") ("zh_CN.GB18030" "Chinese-GB18030") ("zh_CN.UTF-8" . "Chinese-GBK") ("zh_CN" . "Chinese-GB") ("zh" . "Chinese-GB") ("zu" . "Latin-1") ("c$" . "ASCII") ("posix$" . "ASCII") ("ipa$" . "IPA") ("cz" . "Czech") ("iw" . "Hebrew") ("sp" . "Cyrillic-ISO") ("su" . "Latin-1") ("jp" . "Japanese") ("chs" . "Chinese-GBK") ("cht" . "Chinese-BIG5") ("gbz" . "UTF-8") ("div" . "UTF-8") ("wee" . "Latin-2") ("wen" . "Latin-2")))))
                nil [90071 98254])
            ("locale-charset-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . "Latin-1") (".*8859[-_]?2\\>" . "Latin-2") (".*8859[-_]?3\\>" . "Latin-3") (".*8859[-_]?4\\>" . "Latin-4") (".*8859[-_]?9\\>" . "Latin-5") (".*8859[-_]?14\\>" . "Latin-8") (".*8859[-_]?15\\>" . "Latin-9") (".*utf\\(?:-?8\\)?\\>" . "UTF-8") (".*@euro\\>" . "Latin-9")))))
                nil [98256 99056])
            ("locale-preferred-coding-systems" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . iso-8859-1) (".*8859[-_]?2\\>" . iso-8859-2) (".*8859[-_]?3\\>" . iso-8859-3) (".*8859[-_]?4\\>" . iso-8859-4) (".*8859[-_]?9\\>" . iso-8859-9) (".*8859[-_]?14\\>" . iso-8859-14) (".*8859[-_]?15\\>" . iso-8859-15) (".*utf\\(?:-?8\\)?" . utf-8) (".*@euro" . iso-8859-15) ("koi8-?r" . koi8-r) ("koi8-?u" . koi8-u) ("tcvn" . tcvn) ("big5[-_]?hkscs" . big5-hkscs) ("big5" . big5) ("euc-?tw" . euc-tw) ("euc-?cn" . euc-cn) ("gb2312" . gb2312) ("gbk" . gbk) ("gb18030" . gb18030) ("ja.*[._]euc" . japanese-iso-8bit) ("ja.*[._]jis7" . iso-2022-jp) ("ja.*[._]pck" . japanese-shift-jis) ("ja.*[._]sjis" . japanese-shift-jis) ("jpn" . japanese-shift-jis)))))
                nil [99058 100334])
            ("locale-name-match" function (:arguments ("key" "alist")) nil [100336 100770])
            ("locale-charset-match-p" function (:arguments ("charset1" "charset2")) nil [100772 101223])
            ("locale-charset-alist" variable nil nil [101225 101361])
            ("locale-charset-to-coding-system" function (:arguments ("charset")) nil [101363 102151])
            ("declare-function" code nil nil [102320 102378])
            ("declare-function" code nil nil [102379 102444])
            ("locale-translate" function (:arguments ("locale")) nil [102446 102957])
            ("set-locale-environment" function
               (:user-visible-flag t
                :arguments ("locale-name" "frame"))
                nil [102959 112250])
            ("put" code nil nil [112277 112334])
            ("define-char-code-property" function (:arguments ("name" "table" "docstring")) nil [112336 113974])
            ("char-code-property-table" variable (:default-value (make-char-table (quote char-code-property-table))) nil [113976 114282])
            ("get-char-code-property" function (:arguments ("char" "propname")) nil [114284 114692])
            ("put-char-code-property" function (:arguments ("char" "propname" "value")) nil [114694 115278])
            ("char-code-property-description" function (:arguments ("prop" "value")) nil [115280 115634])
            ("iso-2022-control-alist" variable
               (:constant-flag t
                :default-value (quote ((27 . "ESC") (14 . "SO") (15 . "SI") (142 . "SS2") (143 . "SS3") (155 . "CSI"))))
                nil [115751 115903])
            ("encoded-string-description" function (:arguments ("str" "coding-system")) nil [115905 116393])
            ("encode-coding-char" function (:arguments ("char" "coding-system" "charset")) nil [116395 117860])
            ("define-minor-mode" code nil nil [117960 118079])
            ("make-obsolete" code nil nil [118147 118214])
            ("define-minor-mode" code nil nil [118216 118335])
            ("make-obsolete" code nil nil [118403 118470])
            ("nonascii-insert-offset" variable nil nil [118472 118505])
            ("make-obsolete-variable" code nil nil [118506 118578])
            ("nonascii-translation-table" variable nil nil [118579 118618])
            ("make-obsolete-variable" code nil nil [118619 118695])
            ("ucs-names" variable nil nil [118697 118780])
            ("ucs-names" function nil nil [118782 120813])
            ("mule--ucs-names-annotation" function (:arguments ("name")) nil [120815 121171])
            ("char-from-name" function (:arguments ("string" "ignore-case")) nil [121173 122312])
            ("read-char-by-name" function (:arguments ("prompt")) nil [122314 123879])
            ("define-obsolete-function-alias" code nil nil [123881 123945])
            ("define-key" code nil nil [123946 123987]))          
      :file "mule-cmds.el"
      :pointmax 124016
      :fsize 124019
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax '((close-paren 1276 . 1277) (symbol 1241 . 1258) (open-paren 1240 . 1241)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("store-substring" function (:arguments ("string" "idx" "obj")) nil [1364 1644])
            ("truncate-string-ellipsis" variable (:default-value "...") nil [1646 1809])
            ("truncate-string-to-width" function (:arguments ("str" "end-column" "start-column" "padding" "ellipsis")) nil [1826 4523])
            ("nested-alist-p" function (:arguments ("obj")) nil [4632 5089])
            ("set-nested-alist" function (:arguments ("keyseq" "entry" "alist" "len" "branches")) nil [5106 7003])
            ("lookup-nested-alist" function (:arguments ("keyseq" "alist" "len" "start" "nil-for-too-long")) nil [7020 8760])
            ("coding-system-post-read-conversion" function (:arguments ("coding-system")) nil [8816 9005])
            ("coding-system-pre-write-conversion" function (:arguments ("coding-system")) nil [9022 9211])
            ("coding-system-translation-table-for-decode" function (:arguments ("coding-system")) nil [9228 9433])
            ("coding-system-translation-table-for-encode" function (:arguments ("coding-system")) nil [9450 9655])
            ("with-coding-priority" function (:arguments ("coding-systems" "body")) nil [9672 10259])
            ("put" code nil nil [10326 10373])
            ("detect-coding-with-priority" function (:arguments ("from" "to" "priority-list")) nil [10390 10780])
            ("detect-coding-with-language-environment" function (:arguments ("from" "to" "lang-env")) nil [10797 11219])
            ("declare-function" code nil nil [11221 11291])
            ("char-displayable-p" function (:arguments ("char")) nil [11308 13222])
            ("filepos-to-bufferpos--dos" function (:arguments ("byte" "f")) nil [13224 14144])
            ("filepos-to-bufferpos" function (:arguments ("byte" "quality" "coding-system")) nil [14161 17906])
            ("bufferpos-to-filepos" function (:arguments ("position" "quality" "coding-system")) nil [17922 21273])
            ("mule-util" package nil nil [21276 21296]))          
      :file "mule-util.el"
      :pointmax 21371
      :fsize 21372
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mule-version" variable
               (:constant-flag t
                :default-value "6.0 (HANACHIRUSATO)")
                nil [1316 1441])
            ("mule-version-date" variable
               (:constant-flag t
                :default-value "2003.9.1")
                nil [1443 1556])
            ("private-char-area-1-min" variable (:default-value 983040) nil [1638 1678])
            ("private-char-area-1-max" variable (:default-value 1048574) nil [1679 1719])
            ("private-char-area-2-min" variable (:default-value 1048576) nil [1720 1761])
            ("private-char-area-2-max" variable (:default-value 1114110) nil [1762 1803])
            ("emacs-mule-charset-table" variable (:default-value (make-vector 256 nil)) nil [1869 1924])
            ("aset" code nil nil [1925 1965])
            ("convert-define-charset-argument" function (:arguments ("emacs-mule-id" "info-vector")) nil [2226 3604])
            ("define-charset" function (:arguments ("name" "docstring" "props")) nil [3606 10440])
            ("load-with-code-conversion" function (:arguments ("fullname" "file" "noerror" "nomessage")) nil [10443 12942])
            ("charset-info" function (:arguments ("charset")) nil [12944 14478])
            ("charset-id" function (:arguments ("_charset")) nil [14649 14783])
            ("charset-bytes" function (:arguments ("_charset")) nil [14785 14925])
            ("get-charset-property" function (:arguments ("charset" "propname")) nil [14927 15157])
            ("put-charset-property" function (:arguments ("charset" "propname" "value")) nil [15159 15477])
            ("charset-description" function (:arguments ("charset")) nil [15479 15607])
            ("charset-dimension" function (:arguments ("charset")) nil [15609 15726])
            ("charset-chars" function (:arguments ("charset" "dimension")) nil [15728 16096])
            ("charset-iso-final-char" function (:arguments ("charset")) nil [16098 16298])
            ("charset-short-name" function (:arguments ("charset")) nil [16300 16423])
            ("charset-long-name" function (:arguments ("charset")) nil [16425 16545])
            ("charset-list" function nil nil [16547 16674])
            ("define-obsolete-function-alias" code nil nil [16692 16757])
            ("generic-char-p" function (:arguments ("_char")) nil [16759 16898])
            ("make-char-internal" function (:arguments ("charset-id" "code1" "code2")) nil [16900 17133])
            ("ascii-case-table" variable (:default-value (let ((tbl (copy-sequence (standard-case-table))) (up (char-table-extra-slot (standard-case-table) 0))) (if up (set-char-table-extra-slot tbl 0 (copy-sequence up))) (set-char-table-extra-slot tbl 1 nil) (set-char-table-extra-slot tbl 2 nil) tbl)) nil [17342 17748])
            ("coding-system-iso-2022-flags" variable
               (:constant-flag t
                :default-value (quote (long-form ascii-at-eol ascii-at-cntl 7-bit locking-shift single-shift designation revision direction init-at-bol designate-at-bol safe latin-extra composition euc-tw-shift use-roman use-oldjis 8-bit-level-4)))
                nil [17870 20840])
            ("define-coding-system" function (:arguments ("name" "docstring" "props")) nil [20842 33014])
            ("coding-system-doc-string" function (:arguments ("coding-system")) nil [33016 33180])
            ("coding-system-mnemonic" function (:arguments ("coding-system")) nil [33182 33471])
            ("coding-system-type" function (:arguments ("coding-system")) nil [33473 33755])
            ("coding-system-charset-list" function (:arguments ("coding-system")) nil [33757 34067])
            ("coding-system-category" function (:arguments ("coding-system")) nil [34069 34222])
            ("coding-system-get" function (:arguments ("coding-system" "prop")) nil [34224 34840])
            ("coding-system-eol-type-mnemonic" function (:arguments ("coding-system")) nil [34842 35249])
            ("coding-system-lessp" function (:arguments ("x" "y")) nil [35251 35634])
            ("coding-system-equal" function (:arguments ("coding-system-1" "coding-system-2")) nil [35636 36224])
            ("add-to-coding-system-list" function (:arguments ("coding-system")) nil [36226 36838])
            ("coding-system-list" function (:arguments ("base-only")) nil [36840 37488])
            ("char-coding-system-table" variable (:constant-flag t) nil [37490 37605])
            ("make-obsolete-variable" code nil nil [37606 37667])
            ("transform-make-coding-system-args" function (:arguments ("name" "type" "doc-string" "props")) nil [37669 40644])
            ("make-coding-system" function (:arguments ("coding-system" "type" "mnemonic" "doc-string" "flags" "properties" "eol-type")) nil [40646 43996])
            ("merge-coding-systems" function (:arguments ("first" "second")) nil [43998 44677])
            ("autoload-coding-system" function (:arguments ("symbol" "form")) nil [44679 45206])
            ("buffer-file-coding-system-explicit" variable nil nil [45930 46153])
            ("make-variable-buffer-local" code nil nil [46154 46218])
            ("put" code nil nil [46219 46279])
            ("read-buffer-file-coding-system" function nil nil [46281 49116])
            ("set-buffer-file-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force" "nomodify"))
                nil [49118 51248])
            ("revert-buffer-with-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force"))
                nil [51250 52177])
            ("set-file-name-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [52179 52769])
            ("default-terminal-coding-system" variable nil nil [52771 52984])
            ("set-terminal-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [52986 54074])
            ("default-keyboard-coding-system" variable nil nil [54076 54288])
            ("set-keyboard-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [54290 56832])
            ("keyboard-coding-system" variable nil nil [56834 57696])
            ("set-buffer-process-coding-system" function
               (:user-visible-flag t
                :arguments ("decoding" "encoding"))
                nil [57698 58416])
            ("defalias" code nil nil [58418 58486])
            ("set-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [58488 58865])
            ("last-next-selection-coding-system" variable nil nil [58953 58999])
            ("set-next-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [59001 59711])
            ("set-coding-priority" function (:arguments ("arg")) nil [59713 60055])
            ("ctext-non-standard-encodings-alist" variable (:default-value (mapcar (quote purecopy) (quote (("big5-0" big5 2 big5) ("ISO8859-14" iso-8859-14 1 latin-iso8859-14) ("ISO8859-15" iso-8859-15 1 latin-iso8859-15) ("gbk-0" gbk 2 chinese-gbk) ("koi8-r" koi8-r 1 koi8-r) ("microsoft-cp1251" windows-1251 1 windows-1251))))) nil [60075 61400])
            ("ctext-non-standard-encodings" variable nil nil [61402 61630])
            ("ctext-non-standard-encodings-regexp" variable (:default-value (purecopy (string-to-multibyte (concat "\\(%/[0-4][\200-\377][\200-\377]\\([^]+\\)\\)" "\\|" "\\(%G[^]*%@\\)")))) nil [61632 61886])
            ("ctext-post-read-conversion" function (:arguments ("len")) nil [62127 63771])
            ("ctext-standard-encodings" variable (:default-value (quote (ascii latin-jisx0201 katakana-jisx0201 latin-iso8859-1 latin-iso8859-2 latin-iso8859-3 latin-iso8859-4 greek-iso8859-7 arabic-iso8859-6 hebrew-iso8859-8 cyrillic-iso8859-5 latin-iso8859-9 chinese-gb2312 japanese-jisx0208 korean-ksc5601))) nil [63773 64503])
            ("ctext-non-standard-encodings-table" function nil nil [65081 65801])
            ("ctext-pre-write-conversion" function (:arguments ("from" "to")) nil [65803 68388])
            ("auto-coding-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . no-conversion-multibyte) ("\\.\\(exe\\|EXE\\)\\'" . no-conversion) ("\\.\\(sx[dmicw]\\|odt\\|tar\\|t[bg]z\\)\\'" . no-conversion) ("\\.\\(gz\\|Z\\|bz\\|bz2\\|xz\\|gpg\\)\\'" . no-conversion) ("\\.\\(jpe?g\\|png\\|gif\\|tiff?\\|p[bpgn]m\\)\\'" . no-conversion) ("\\.pdf\\'" . no-conversion) ("/#[^/]+#\\'" . utf-8-emacs-unix))))) nil [68484 69698])
            ("auto-coding-regexp-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\`BABYL OPTIONS:[ 	]*-\\*-[ 	]*rmail[ 	]*-\\*-" . no-conversion) ("\\`\376\377" . utf-16be-with-signature) ("\\`\377\376" . utf-16le-with-signature) ("\\`\357\273\277" . utf-8-with-signature) ("\\`;ELC   " . emacs-mule))))) nil [69700 70534])
            ("auto-coding-regexp-alist-lookup" function (:arguments ("from" "to")) nil [70536 71147])
            ("auto-coding-functions" variable (:default-value (quote (sgml-xml-auto-coding-function sgml-html-meta-auto-coding-function))) nil [71216 72196])
            ("set-auto-coding-for-load" variable nil nil [72198 72389])
            ("auto-coding-alist-lookup" function (:arguments ("filename")) nil [72391 72804])
            ("put" code nil nil [72806 72860])
            ("put" code nil nil [72861 72927])
            ("find-auto-coding" function (:arguments ("filename" "size")) nil [72929 79262])
            ("set-auto-coding" function (:arguments ("filename" "size")) nil [79264 79694])
            ("setq" code nil nil [79696 79744])
            ("after-insert-file-set-coding" function (:arguments ("inserted" "visit")) nil [79746 80613])
            ("find-new-buffer-file-coding-system" function (:arguments ("coding")) nil [80803 82838])
            ("modify-coding-system-alist" function (:arguments ("target-type" "regexp" "coding-system")) nil [82840 85126])
            ("decode-coding-inserted-region" function (:arguments ("from" "to" "filename" "visit" "beg" "end" "replace")) nil [85128 87125])
            ("recode-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "new-coding" "coding"))
                nil [87127 87936])
            ("make-translation-table" function (:arguments ("args")) nil [87938 89425])
            ("make-translation-table-from-vector" function (:arguments ("vec")) nil [89427 90042])
            ("make-translation-table-from-alist" function (:arguments ("alist")) nil [90044 91782])
            ("define-translation-table" function (:arguments ("symbol" "args")) nil [91784 93179])
            ("translate-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "table"))
                nil [93181 94217])
            ("with-category-table" function (:arguments ("table" "body")) nil [94219 94858])
            ("define-translation-hash-table" function (:arguments ("symbol" "table")) nil [94860 95814])
            ("put" code nil nil [95848 95899])
            ("setq" code nil nil [95900 95963])
            ("put" code nil nil [95964 96024])
            ("setq" code nil nil [96025 96112])
            ("sgml-xml-auto-coding-function" function (:arguments ("size")) nil [96151 99050])
            ("sgml-html-meta-auto-coding-function" function (:arguments ("size")) nil [99052 100878])
            ("xml-find-file-coding-system" function (:arguments ("args")) nil [100880 102210])
            ("mule" package nil nil [102216 102231]))          
      :file "mule.el"
      :pointmax 102255
      :fsize 102254
      :lastmodtime '(23695 34780 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("quail" include nil nil [2522 2538])
            ("tit-encode-list" variable (:default-value (quote (("GB" euc-china "Chinese-GB") ("BIG5" cn-big5 "Chinese-BIG5") ("JIS" euc-japan "Japanese") ("KS" euc-kr "Korean")))) nil [2651 2806])
            ("quail-cxterm-package-ext-info" variable (:default-value (quote (("chinese-4corner" "四角") ("chinese-array30" "３０") ("chinese-ccdospy" "缩拼" "Pinyin base input method for Chinese charset GB2312 (`chinese-gb2312').

Pinyin is the standard Roman transliteration method for Chinese.
For the detail of Pinyin system, see the documentation of the input
method `chinese-py'.

This input method works almost the same way as `chinese-py'.  The
difference is that you type a single key for these Pinyin spelling.
    Pinyin:  zh  en  eng ang ch  an  ao  ai  ong sh  ing  yu(ü)
    keyseq:   a   f   g   h   i   j   k   l   s   u   y   v
For example:
    Chinese:  啊    果    中    文    光    玉    全
    Pinyin:   a    guo   zhong  wen  guang  yu   quan
    Keyseq:   a1   guo4   as1   wf4  guh1  yu..6 qvj6

\\<quail-translation-docstring>

For double-width GB2312 characters corresponding to ASCII, use the
input method `chinese-qj'.") ("chinese-ecdict" "英漢" "In this input method, you enter a Chinese (Big5) character or word
by typing the corresponding English word.  For example, if you type
\"computer\", \"電腦\" is input.

\\<quail-translation-docstring>") ("chinese-etzy" "倚注" "Zhuyin base input method for Chinese Big5 characters (`chinese-big5-1',
`chinese-big5-2').

Zhuyin is a kind of phonetic symbol.  One to three Zhuyin symbols
compose one Chinese character.

In this input method, you enter a Chinese character by first typing
keys corresponding to Zhuyin symbols (see the above table) followed by
SPC, 1, 2, 3, or 4 specifying a tone (SPC:陰平, 1:輕聲, 2:陽平, 3: 上聲,
4:去聲).

\\<quail-translation-docstring>") ("chinese-punct-b5" "標B" "Input method for Chinese punctuation and symbols of Big5
(`chinese-big5-1' and `chinese-big5-2').") ("chinese-punct" "标G" "Input method for Chinese punctuation and symbols of GB2312
(`chinese-gb2312').") ("chinese-py-b5" "拼B" "Pinyin base input method for Chinese Big5 characters
(`chinese-big5-1', `chinese-big5-2').

This input method works almost the same way as `chinese-py' (which
see).

This input method supports only Han characters.  The more convenient
method is `chinese-py-punct-b5', which is the combination of this
method and `chinese-punct-b5' and which supports both Han characters
and punctuation/symbols.

For double-width Big5 characters corresponding to ASCII, use the input
method `chinese-qj-b5'.

The input method `chinese-py' and `chinese-tonepy' are also Pinyin
based, but for the character set GB2312 (`chinese-gb2312').") ("chinese-qj-b5" "全B") ("chinese-qj" "全G") ("chinese-sw" "首尾" "Radical base input method for Chinese charset GB2312 (`chinese-gb2312').

In this input method, you enter a Chinese character by typing two
keys.  The first key corresponds to the first (首) radical, the second
key corresponds to the last (尾) radical.  The correspondence of keys
and radicals is as below:

 first radical:
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z
 心 冖 尸 丶 火 口 扌 氵 讠 艹 亻 木 礻 饣 月 纟 石 王 八 丿 日 辶 犭 竹 一 人
 last radical:
 a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z
 又 山 土 刀 阝 口 衣 疋 大 丁 厶 灬 十 歹 冂 门 今 丨 女 乙 囗 小 厂 虫 弋 卜

\\<quail-translation-docstring>") ("chinese-tonepy" "调拼" "Pinyin base input method for Chinese charset GB2312 (`chinese-gb2312').

Pinyin is the standard roman transliteration method for Chinese.
For the details of Pinyin system, see the documentation of the input
method `chinese-py'.

This input method works almost the same way as `chinese-py'.  The
difference is that you must type 1..5 after each Pinyin spelling to
specify a tone (1:阴平, 2:阳平, 3:上声, 4下声, 5:轻声).

\\<quail-translation-docstring>

For instance, to input 你, you type \"n i 3 3\", the first \"n i\" is
a Pinyin, the next \"3\" specifies tone, and the last \"3\" selects
the third character from the candidate list.

For double-width GB2312 characters corresponding to ASCII, use the
input method `chinese-qj'.") ("chinese-zozy" "零注" "Zhuyin base input method for Chinese Big5 characters (`chinese-big5-1',
`chinese-big5-2').

Zhuyin is a kind of a phonetic symbol.  One to three Zhuyin symbols
compose a Chinese character.

In this input method, you enter a Chinese character by first typing
keys corresponding to Zhuyin symbols (see the above table) followed by
SPC, 6, 3, 4, or 7 specifying a tone (SPC:陰平, 6:陽平, 3:上聲, 4:去聲,
7:輕聲).

\\<quail-translation-docstring>")))) nil [3422 7866])
            ("tit-read-key-value" function nil nil [7918 8051])
            ("tit-make-quail-package-file-name" function (:arguments ("filename" "dirname")) nil [8189 8359])
            ("tit-dictionary" variable (:default-value t) nil [8422 8447])
            ("tit-encode" variable nil nil [8448 8471])
            ("tit-default-encode" variable (:default-value "GB") nil [8472 8504])
            ("tit-generate-key-bindings" function (:arguments ("keys" "function-symbol")) nil [8634 9213])
            ("tit-process-header" function (:arguments ("filename")) nil [9325 14195])
            ("tit-flush-translations" function (:arguments ("key" "translations")) nil [14197 14866])
            ("tit-process-body" function nil nil [14951 16404])
            ("titdic-convert" function
               (:user-visible-flag t
                :arguments ("filename" "dirname"))
                nil [16421 18727])
            ("batch-titdic-convert" function (:arguments ("force")) nil [18744 20657])
            ("quail-misc-package-ext-info" variable (:default-value (quote (("chinese-b5-tsangchi" "倉B" "cangjie-table.b5" big5 "tsang-b5.el" tsang-b5-converter ";; # Copyright 2001 Christian Wittern <wittern@iis.sinica.edu.tw>
;; #
;; # Permission to copy and distribute both modified and
;; # unmodified versions is granted without royalty provided
;; # this notice is preserved.") ("chinese-b5-quick" "簡B" "cangjie-table.b5" big5 "quick-b5.el" quick-b5-converter ";; # Copyright 2001 Christian Wittern <wittern@iis.sinica.edu.tw>
;; #
;; # Permission to copy and distribute both modified and
;; # unmodified versions is granted without royalty provided
;; # this notice is preserved.") ("chinese-cns-tsangchi" "倉C" "cangjie-table.cns" iso-2022-cn-ext "tsang-cns.el" tsang-cns-converter ";; # Copyright 2001 Christian Wittern <wittern@iis.sinica.edu.tw>
;; #
;; # Permission to copy and distribute both modified and
;; # unmodified versions is granted without royalty provided
;; # this notice is preserved.") ("chinese-cns-quick" "簡C" "cangjie-table.cns" iso-2022-cn-ext "quick-cns.el" quick-cns-converter ";; # Copyright 2001 Christian Wittern <wittern@iis.sinica.edu.tw>
;; #
;; # Permission to copy and distribute both modified and
;; # unmodified versions is granted without royalty provided
;; # this notice is preserved.") ("chinese-py" "拼G" "pinyin.map" cn-gb-2312 "PY.el" py-converter ";; \"pinyin.map\" is included in a free package called CCE.  It is
;; available at:
;;	http://ftp.debian.org/debian/dists/potato/main
;;		/source/utils/cce_0.36.orig.tar.gz
;; This package contains the following copyright notice.
;;
;;
;;             Copyright (C) 1999, Rui He, herui@cs.duke.edu
;;
;;
;;                  CCE(Console Chinese Environment) 0.32
;;
;; CCE is free software; you can redistribute it and/or modify it under the
;; terms of the GNU General Public License as published by the Free Software
;; Foundation; either version 1, or (at your option) any later version.
;;
;; CCE is distributed in the hope that it will be useful, but WITHOUT ANY
;; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along with
;; CCE.  If not, see <https://www.gnu.org/licenses/>.") ("chinese-ziranma" "自然" "ziranma.cin" cn-gb-2312 "ZIRANMA.el" ziranma-converter ";; \"ziranma.cin\" is included in a free package called CCE.  It is
;; available at:
;;	http://ftp.debian.org/debian/dists/potato/main
;;		/source/utils/cce_0.36.orig.tar.gz
;; This package contains the following copyright notice.
;;
;;
;;             Copyright (C) 1999, Rui He, herui@cs.duke.edu
;;
;;
;;                  CCE(Console Chinese Environment) 0.32
;;
;; CCE is free software; you can redistribute it and/or modify it under the
;; terms of the GNU General Public License as published by the Free Software
;; Foundation; either version 1, or (at your option) any later version.
;;
;; CCE is distributed in the hope that it will be useful, but WITHOUT ANY
;; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along with
;; CCE.  If not, see <https://www.gnu.org/licenses/>.") ("chinese-ctlau" "刘粤" "CTLau.html" cn-gb-2312 "CTLau.el" ctlau-gb-converter ";; \"CTLau.html\" is available at:
;;
;;   http://umunhum.stanford.edu/~lee/chicomp/CTLau.html
;;
;; It contains the following copyright notice:
;;
;; # Copyright (C) 1988-2001  Fung Fung Lee (lee@umunhum.stanford.edu)
;; #
;; # This program is free software; you can redistribute it and/or
;; # modify it under the terms of the GNU General Public License
;; # as published by the Free Software Foundation; either version 2
;; # of the License, or any later version.
;; #
;; # This program is distributed in the hope that it will be useful,
;; # but WITHOUT ANY WARRANTY; without even the implied warranty of
;; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; # GNU General Public License for more details.
;; #
;; # You should have received a copy of the GNU General Public License
;; # along with this program.  If not, see <https://www.gnu.org/licenses/>.") ("chinese-ctlaub" "劉粵" "CTLau-b5.html" big5 "CTLau-b5.el" ctlau-b5-converter ";; \"CTLau-b5.html\" is available at:
;;
;;   http://umunhum.stanford.edu/~lee/chicomp/CTLau-b5.html
;;
;; It contains the following copyright notice:
;;
;; # Copyright (C) 1988-2001  Fung Fung Lee (lee@umunhum.stanford.edu)
;; #
;; # This program is free software; you can redistribute it and/or
;; # modify it under the terms of the GNU General Public License
;; # as published by the Free Software Foundation; either version 2
;; # of the License, or any later version.
;; #
;; # This program is distributed in the hope that it will be useful,
;; # but WITHOUT ANY WARRANTY; without even the implied warranty of
;; # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; # GNU General Public License for more details.
;; #
;; # You should have received a copy of the GNU General Public License
;; # along with this program.  If not, see <https://www.gnu.org/licenses/>.")))) nil [21245 26722])
            ("tsang-quick-converter" function (:arguments ("dicbuf" "name" "title" "tsang-p" "big5-p")) nil [27160 29956])
            ("tsang-b5-converter" function (:arguments ("dicbuf" "name" "title")) nil [29958 30052])
            ("quick-b5-converter" function (:arguments ("dicbuf" "name" "title")) nil [30054 30150])
            ("tsang-cns-converter" function (:arguments ("dicbuf" "name" "title")) nil [30152 30249])
            ("quick-cns-converter" function (:arguments ("dicbuf" "name" "title")) nil [30251 30350])
            ("py-converter" function (:arguments ("dicbuf" "name" "title")) nil [30548 33080])
            ("ziranma-converter" function (:arguments ("dicbuf" "name" "title")) nil [33279 37252])
            ("ctlau-converter" function (:arguments ("dicbuf" "name" "title" "description")) nil [37528 39309])
            ("ctlau-gb-converter" function (:arguments ("dicbuf" "name" "title")) nil [39311 39808])
            ("ctlau-b5-converter" function (:arguments ("dicbuf" "name" "title")) nil [39810 40304])
            ("declare-function" code nil nil [40306 40365])
            ("miscdic-convert" function
               (:user-visible-flag t
                :arguments ("filename" "dirname"))
                nil [40367 43250])
            ("batch-miscdic-convert" function nil nil [43252 44341]))          
      :file "titdic-cnv.el"
      :pointmax 44426
      :fsize 47651
      :lastmodtime '(23603 24958 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "quail.el"
      :fsize 118692
      :lastmodtime '(23603 24958 0 0)))
  :file "!drive_c!Tools!emacs-26.2!share!emacs!26.2!lisp!international!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
