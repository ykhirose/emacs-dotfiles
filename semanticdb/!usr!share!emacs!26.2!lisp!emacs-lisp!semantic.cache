;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1121 1571])
            ("function-put" code nil nil [1572 1614])
            ("function-put" code nil nil [1615 1663])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1784 2116])
            ("defalias" code nil nil [2118 3260])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3516 6460])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6462 7237])
            ("defalias" code nil nil [7239 9492])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9541 12124])
            ("defalias" code nil nil [12206 12392])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13403 13875])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13877 13955])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13957 14327])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [14329 15222])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [15224 16191])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [16193 17024])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [17027 18868])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [19198 19634])
            ("dont-compile" function (:arguments ("body")) nil [19636 19945])
            ("eval-when-compile" function (:arguments ("body")) nil [20188 20681])
            ("eval-and-compile" function (:arguments ("body")) nil [20683 21269])
            ("with-no-warnings" function (:arguments ("body")) nil [21271 21479])
            ("make-obsolete-variable" code nil nil [22774 22883])
            ("make-obsolete" code nil nil [22884 22975]))          
      :file "byte-run.el.gz"
      :pointmax 23003
      :fsize 6757
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-version" variable (:default-value "1.4") nil [1798 1856])
            ("eieio-version" function (:user-visible-flag t) nil [1858 1966])
            ("eieio-core" include nil nil [1968 1989])
            ("defclass" function (:arguments ("name" "superclasses" "slots" "options-and-doc")) nil [2021 11671])
            ("oref" function (:arguments ("obj" "slot")) nil [11709 11967])
            ("defalias" code nil nil [11969 12003])
            ("defalias" code nil nil [12004 12042])
            ("make-obsolete" code nil nil [12043 12121])
            ("oref-default" function (:arguments ("obj" "slot")) nil [12123 12463])
            ("with-slots" function (:arguments ("spec-list" "object" "body")) nil [12490 13709])
            ("eieio-pcase-slot-index-table" function (:arguments ("obj")) nil [13822 13995])
            ("eieio-pcase-slot-index-from-index-table" function (:arguments ("index-table" "slot")) nil [13997 14247])
            ("pcase-defmacro" code nil nil [14249 15547])
            ("define-obsolete-function-alias" code nil nil [15656 15737])
            ("cl-defgeneric" code nil nil [15739 15868])
            ("eieio-object-name" function (:arguments ("obj" "extra")) nil [15870 16172])
            ("define-obsolete-function-alias" code nil nil [16173 16245])
            ("eieio--object-names" variable
               (:constant-flag t
                :default-value (make-hash-table :test (function eq) :weakness (quote key)))
                nil [16247 16321])
            ("cl-defmethod" code nil nil [16573 16704])
            ("define-obsolete-function-alias" code nil nil [16705 16793])
            ("cl-defmethod" code nil nil [16795 17009])
            ("define-obsolete-function-alias" code nil nil [17010 17105])
            ("eieio-object-class" function (:arguments ("obj")) nil [17107 17336])
            ("define-obsolete-function-alias" code nil nil [17337 17411])
            ("define-obsolete-function-alias" code nil nil [17433 17503])
            ("eieio-object-class-name" function (:arguments ("obj")) nil [17505 17676])
            ("define-obsolete-function-alias" code nil nil [17677 17762])
            ("eieio-class-parents" function (:arguments ("class")) nil [17764 17989])
            ("define-obsolete-function-alias" code nil nil [17991 18067])
            ("eieio-class-children" function (:arguments ("class")) nil [18069 18292])
            ("define-obsolete-function-alias" code nil nil [18293 18373])
            ("define-obsolete-function-alias" code nil nil [18403 18493])
            ("define-obsolete-function-alias" code nil nil [18494 18583])
            ("eieio-class-parent" function (:arguments ("class")) nil [18585 18725])
            ("define-obsolete-function-alias" code nil nil [18726 18799])
            ("same-class-p" function (:arguments ("obj" "class")) nil [18801 19031])
            ("object-of-class-p" function (:arguments ("obj" "class")) nil [19033 19272])
            ("defalias" code nil nil [19300 19345])
            ("child-of-class-p" function (:arguments ("child" "class")) nil [19347 19959])
            ("eieio-slot-descriptor-name" function (:arguments ("slot")) nil [19961 20036])
            ("eieio-class-slots" function (:arguments ("class")) nil [20038 20349])
            ("object-slots" function (:arguments ("obj")) nil [20351 20595])
            ("eieio--class-slot-initarg" function (:arguments ("class" "slot")) nil [20597 20902])
            ("oset" function (:arguments ("obj" "slot" "value")) nil [20929 21218])
            ("oset-default" function (:arguments ("class" "slot" "value")) nil [21220 21571])
            ("slot-boundp" function (:arguments ("object" "slot")) nil [21616 22201])
            ("slot-makeunbound" function (:arguments ("object" "slot")) nil [22203 22316])
            ("slot-exists-p" function (:arguments ("object-or-class" "slot")) nil [22318 23002])
            ("find-class" function (:arguments ("symbol" "errorp")) nil [23004 23362])
            ("object-assoc" function (:arguments ("key" "slot" "list")) nil [23423 23961])
            ("object-assoc-list" function (:arguments ("slot" "list")) nil [23963 24421])
            ("object-assoc-list-safe" function (:arguments ("slot" "list")) nil [24423 24962])
            ("object-add-to-list" function (:arguments ("object" "slot" "item" "append")) nil [24964 25769])
            ("object-remove-from-list" function (:arguments ("object" "slot" "item")) nil [25771 26121])
            ("gv-define-simple-setter" code nil nil [26401 26448])
            ("eieio-default-superclass" type (:type "class") nil [26833 27100])
            ("setq" code nil nil [27102 27176])
            ("define-obsolete-function-alias" code nil nil [27178 27261])
            ("cl-defgeneric" code nil nil [27263 27558])
            ("define-obsolete-function-alias" code nil nil [27560 27628])
            ("cl-defmethod" code nil nil [27630 28622])
            ("cl-defgeneric" code nil nil [28670 28821])
            ("cl-defmethod" code nil nil [28823 29310])
            ("cl-defgeneric" code nil nil [29358 29466])
            ("cl-defmethod" code nil nil [29468 31024])
            ("cl-defgeneric" code nil nil [31026 31581])
            ("cl-defgeneric" code nil nil [31583 31715])
            ("cl-defmethod" code nil nil [31717 32523])
            ("cl-defgeneric" code nil nil [32525 32788])
            ("cl-defmethod" code nil nil [32790 33165])
            ("cl-defgeneric" code nil nil [33167 33343])
            ("cl-defgeneric" code nil nil [33345 33670])
            ("cl-defmethod" code nil nil [33672 34290])
            ("cl-defmethod" code nil nil [34293 34485])
            ("eieio-print-depth" variable nil nil [34487 34579])
            ("cl-defgeneric" code nil nil [34581 34750])
            ("cl-defmethod" code nil nil [34752 37077])
            ("eieio-override-prin1" function (:arguments ("thing")) nil [37079 37845])
            ("eieio-list-prin1" function (:arguments ("list")) nil [37847 38364])
            ("eieio-change-class" function (:arguments ("_obj" "_class")) nil [38409 38622])
            ("define-obsolete-function-alias" code nil nil [38623 38696])
            ("add-hook" code nil nil [38916 38988])
            ("eieio" package nil nil [38990 39006]))          
      :file "eieio.el.gz"
      :pointmax 39028
      :fsize 11926
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1048 1065])
            ("macroexp" include nil nil [1066 1085])
            ("gv" include nil nil [1086 1099])
            ("cl-unload-function" function nil nil [3595 3753])
            ("dolist" code nil nil [3790 4503])
            ("dolist" code nil nil [4505 9132])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9134 9216])
            ("advice-add" code nil nil [9217 9269])
            ("advice-add" code nil nil [9270 9323])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9325 9413])
            ("advice-add" code nil nil [9414 9472])
            ("cl-closure-vars" variable nil nil [9632 9660])
            ("cl--function-convert-cache" variable nil nil [9661 9700])
            ("cl--function-convert" function (:arguments ("f")) nil [9702 11817])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [11819 13830])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [13832 14362])
            ("flet" function (:arguments ("bindings" "body")) nil [14441 16195])
            ("labels" function (:arguments ("bindings" "body")) nil [16197 17364])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [17560 18450])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18452 19355])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19357 20975])
            ("make-obsolete" code nil nil [22889 22941])
            ("declare-function" code nil nil [22943 22995])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [22997 23819])
            ("define-obsolete-function-alias" code nil nil [23921 23989])
            ("define-obsolete-variable-alias" code nil nil [23990 24082])
            ("define-obsolete-function-alias" code nil nil [24083 24159])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24297 24446])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24448 24502])
            ("make-obsolete-variable" code nil nil [24503 24558])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24559 24613])
            ("make-obsolete-variable" code nil nil [24614 24669])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [24670 24724])
            ("make-obsolete-variable" code nil nil [24725 24780])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [24781 24835])
            ("make-obsolete-variable" code nil nil [24837 24892])
            ("define-obsolete-function-alias" code nil nil [24893 24959])
            ("define-obsolete-function-alias" code nil nil [24960 25024])
            ("define-obsolete-function-alias" code nil nil [25025 25085])
            ("define-obsolete-function-alias" code nil nil [25086 25146])
            ("define-obsolete-function-alias" code nil nil [25147 25207])
            ("define-obsolete-function-alias" code nil nil [25208 25268])
            ("define-obsolete-function-alias" code nil nil [25269 25329])
            ("define-obsolete-function-alias" code nil nil [25330 25406])
            ("define-obsolete-function-alias" code nil nil [25407 25477])
            ("define-obsolete-function-alias" code nil nil [25478 25556])
            ("define-obsolete-function-alias" code nil nil [25558 25654])
            ("define-obsolete-function-alias" code nil nil [25655 25731])
            ("define-obsolete-function-alias" code nil nil [25732 25805])
            ("define-obsolete-function-alias" code nil nil [25806 25872])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [25874 26029])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26080 27014])
            ("cl" package nil nil [27016 27029])
            ("run-hooks" code nil nil [27031 27056]))          
      :file "cl.el.gz"
      :pointmax 27078
      :fsize 7965
      :lastmodtime '(23728 55154 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!26.2!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
